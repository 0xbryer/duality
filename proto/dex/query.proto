syntax = "proto3";
package nicholasdotsol.duality.dex;

import "gogoproto/gogo.proto";
import "google/api/annotations.proto";
import "cosmos/base/query/v1beta1/pagination.proto";
import "dex/params.proto";
import "dex/nodes.proto";
import "dex/ticks.proto";
import "dex/pairs.proto";
import "dex/virtual_price_queue.proto";
// this line is used by starport scaffolding # 1

option go_package = "github.com/NicholasDotSol/duality/x/dex/types";

// Query defines the gRPC querier service.
service Query {
  // Parameters queries the parameters of the module.
  rpc Params(QueryParamsRequest) returns (QueryParamsResponse) {
    option (google.api.http).get = "/NicholasDotSol/duality/dex/params";
  }
  // Queries a Nodes by id.
	rpc Nodes(QueryGetNodesRequest) returns (QueryGetNodesResponse) {
		option (google.api.http).get = "/NicholasDotSol/duality/dex/nodes/{id}";
	}

	// Queries a list of Nodes items.
	rpc NodesAll(QueryAllNodesRequest) returns (QueryAllNodesResponse) {
		option (google.api.http).get = "/NicholasDotSol/duality/dex/nodes";
	}



// Queries a Ticks by index.
	rpc Ticks(QueryGetTicksRequest) returns (QueryGetTicksResponse) {
		option (google.api.http).get = "/NicholasDotSol/duality/dex/ticks/{price}/{fee}/{direction}/{orderType}";
	}

	// Queries a list of Ticks items.
	rpc TicksAll(QueryAllTicksRequest) returns (QueryAllTicksResponse) {
		option (google.api.http).get = "/NicholasDotSol/duality/dex/ticks";
	}

// Queries a Pairs by index.
	rpc Pairs(QueryGetPairsRequest) returns (QueryGetPairsResponse) {
		option (google.api.http).get = "/NicholasDotSol/duality/dex/pairs/{token0}/{token1}";
	}

	// Queries a list of Pairs items.
	rpc PairsAll(QueryAllPairsRequest) returns (QueryAllPairsResponse) {
		option (google.api.http).get = "/NicholasDotSol/duality/dex/pairs";
	}

// Queries a VirtualPriceQueue by index.
	rpc VirtualPriceQueue(QueryGetVirtualPriceQueueRequest) returns (QueryGetVirtualPriceQueueResponse) {
		option (google.api.http).get = "/NicholasDotSol/duality/dex/virtual_price_queue/{vPrice}/{direction}/{orderType}";
	}

	// Queries a list of VirtualPriceQueue items.
	rpc VirtualPriceQueueAll(QueryAllVirtualPriceQueueRequest) returns (QueryAllVirtualPriceQueueResponse) {
		option (google.api.http).get = "/NicholasDotSol/duality/dex/virtual_price_queue";
	}

// this line is used by starport scaffolding # 2
}

// QueryParamsRequest is request type for the Query/Params RPC method.
message QueryParamsRequest {}

// QueryParamsResponse is response type for the Query/Params RPC method.
message QueryParamsResponse {
  // params holds all the parameters of this module.
  Params params = 1 [(gogoproto.nullable) = false];
}

message QueryGetNodesRequest {
	uint64 id = 1;
}

message QueryGetNodesResponse {
	Nodes Nodes = 1 [(gogoproto.nullable) = false];
}

message QueryAllNodesRequest {
	cosmos.base.query.v1beta1.PageRequest pagination = 1;
}

message QueryAllNodesResponse {
	repeated Nodes Nodes = 1 [(gogoproto.nullable) = false];
	cosmos.base.query.v1beta1.PageResponse pagination = 2;
}



message QueryGetTicksRequest {
	  string price = 1;
  string fee = 2;
  string direction = 3;
  string orderType = 4;

}

message QueryGetTicksResponse {
	Ticks ticks = 1 [(gogoproto.nullable) = false];
}

message QueryAllTicksRequest {
	cosmos.base.query.v1beta1.PageRequest pagination = 1;
}

message QueryAllTicksResponse {
	repeated Ticks ticks = 1 [(gogoproto.nullable) = false];
	cosmos.base.query.v1beta1.PageResponse pagination = 2;
}

message QueryGetPairsRequest {
	  string token0 = 1;
  string token1 = 2;

}

message QueryGetPairsResponse {
	Pairs pairs = 1 [(gogoproto.nullable) = false];
}

message QueryAllPairsRequest {
	cosmos.base.query.v1beta1.PageRequest pagination = 1;
}

message QueryAllPairsResponse {
	repeated Pairs pairs = 1 [(gogoproto.nullable) = false];
	cosmos.base.query.v1beta1.PageResponse pagination = 2;
}

message QueryGetVirtualPriceQueueRequest {
	  string vPrice = 1;
  string direction = 2;
  string orderType = 3;

}

message QueryGetVirtualPriceQueueResponse {
	VirtualPriceQueue virtualPriceQueue = 1 [(gogoproto.nullable) = false];
}

message QueryAllVirtualPriceQueueRequest {
	cosmos.base.query.v1beta1.PageRequest pagination = 1;
}

message QueryAllVirtualPriceQueueResponse {
	repeated VirtualPriceQueue virtualPriceQueue = 1 [(gogoproto.nullable) = false];
	cosmos.base.query.v1beta1.PageResponse pagination = 2;
}

// this line is used by starport scaffolding # 3
