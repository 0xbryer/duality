syntax = "proto3";
package nicholasdotsol.duality.dex;

import "gogoproto/gogo.proto";
import "google/api/annotations.proto";
import "cosmos/base/query/v1beta1/pagination.proto";
import "dex/params.proto";
import "dex/tick_object.proto";
import "dex/pair_object.proto";
import "dex/tokens.proto";
import "dex/token_object.proto";
import "dex/shares.proto";
import "dex/fee_list.proto";
import "dex/limit_order_pool_user_share_map.proto";
import "dex/limit_order_pool_user_shares_withdrawn.proto";
import "dex/limit_order_pool_total_shares_map.proto";
import "dex/limit_order_pool_reserve_object.proto";
import "dex/limit_order_pool_fill_object.proto";
// this line is used by starport scaffolding # 1

option go_package = "github.com/NicholasDotSol/duality/x/dex/types";

// Query defines the gRPC querier service.
service Query {
  // Parameters queries the parameters of the module.
  rpc Params(QueryParamsRequest) returns (QueryParamsResponse) {
    option (google.api.http).get = "/NicholasDotSol/duality/dex/params";
  }
  // Queries a TickObject by index.
	rpc TickObject(QueryGetTickObjectRequest) returns (QueryGetTickObjectResponse) {
		option (google.api.http).get = "/NicholasDotSol/duality/dex/tick_map/{pairId}/{tickIndex}";
	}

	// Queries a list of TickObject items.
	rpc TickObjectAll(QueryAllTickObjectRequest) returns (QueryAllTickObjectResponse) {
		option (google.api.http).get = "/NicholasDotSol/duality/dex/tick_map";
	}

// Queries a PairObject by index.
	rpc PairObject(QueryGetPairObjectRequest) returns (QueryGetPairObjectResponse) {
		option (google.api.http).get = "/NicholasDotSol/duality/dex/pair_map/{pairId}";
	}

	// Queries a list of PairObject items.
	rpc PairObjectAll(QueryAllPairObjectRequest) returns (QueryAllPairObjectResponse) {
		option (google.api.http).get = "/NicholasDotSol/duality/dex/pair_map";
	}

// Queries a Tokens by id.
	rpc Tokens(QueryGetTokensRequest) returns (QueryGetTokensResponse) {
		option (google.api.http).get = "/NicholasDotSol/duality/dex/tokens/{id}";
	}

	// Queries a list of Tokens items.
	rpc TokensAll(QueryAllTokensRequest) returns (QueryAllTokensResponse) {
		option (google.api.http).get = "/NicholasDotSol/duality/dex/tokens";
	}

// Queries a TokenObject by index.
	rpc TokenObject(QueryGetTokenObjectRequest) returns (QueryGetTokenObjectResponse) {
		option (google.api.http).get = "/NicholasDotSol/duality/dex/token_map/{address}";
	}

	// Queries a list of TokenObject items.
	rpc TokenObjectAll(QueryAllTokenObjectRequest) returns (QueryAllTokenObjectResponse) {
		option (google.api.http).get = "/NicholasDotSol/duality/dex/token_map";
	}

// Queries a Shares by index.
	rpc Shares(QueryGetSharesRequest) returns (QueryGetSharesResponse) {
		option (google.api.http).get = "/NicholasDotSol/duality/dex/shares/{address}/{pairId}/{tickIndex}/{fee}";
	}

	// Queries a list of Shares items.
	rpc SharesAll(QueryAllSharesRequest) returns (QueryAllSharesResponse) {
		option (google.api.http).get = "/NicholasDotSol/duality/dex/shares";
	}

// Queries a FeeList by id.
	rpc FeeList(QueryGetFeeListRequest) returns (QueryGetFeeListResponse) {
		option (google.api.http).get = "/NicholasDotSol/duality/dex/fee_list/{id}";
	}

	// Queries a list of FeeList items.
	rpc FeeListAll(QueryAllFeeListRequest) returns (QueryAllFeeListResponse) {
		option (google.api.http).get = "/NicholasDotSol/duality/dex/fee_list";
	}

// Queries a LimitOrderPoolUserShareMap by index.
	rpc LimitOrderPoolUserShareMap(QueryGetLimitOrderPoolUserShareMapRequest) returns (QueryGetLimitOrderPoolUserShareMapResponse) {
		option (google.api.http).get = "/NicholasDotSol/duality/dex/limit_order_pool_user_share_map/{pairId}/{token}/{tickIndex}/{count}/{address}";
	}

	// Queries a list of LimitOrderPoolUserShareMap items.
	rpc LimitOrderPoolUserShareMapAll(QueryAllLimitOrderPoolUserShareMapRequest) returns (QueryAllLimitOrderPoolUserShareMapResponse) {
		option (google.api.http).get = "/NicholasDotSol/duality/dex/limit_order_pool_user_share_map";
	}

// Queries a LimitOrderPoolUserSharesWithdrawn by index.
	rpc LimitOrderPoolUserSharesWithdrawn(QueryGetLimitOrderPoolUserSharesWithdrawnRequest) returns (QueryGetLimitOrderPoolUserSharesWithdrawnResponse) {
		option (google.api.http).get = "/NicholasDotSol/duality/dex/limit_order_pool_user_shares_withdrawn/{pairId}/{token}/{tickIndex}/{count}/{address}";
	}

	// Queries a list of LimitOrderPoolUserSharesWithdrawn items.
	rpc LimitOrderPoolUserSharesWithdrawnAll(QueryAllLimitOrderPoolUserSharesWithdrawnRequest) returns (QueryAllLimitOrderPoolUserSharesWithdrawnResponse) {
		option (google.api.http).get = "/NicholasDotSol/duality/dex/limit_order_pool_user_shares_withdrawn";
	}

// Queries a LimitOrderPoolTotalSharesMap by index.
	rpc LimitOrderPoolTotalSharesMap(QueryGetLimitOrderPoolTotalSharesMapRequest) returns (QueryGetLimitOrderPoolTotalSharesMapResponse) {
		option (google.api.http).get = "/NicholasDotSol/duality/dex/limit_order_pool_total_shares_map/{pairId}/{token}/{tickIndex}/{count}";
	}

	// Queries a list of LimitOrderPoolTotalSharesMap items.
	rpc LimitOrderPoolTotalSharesMapAll(QueryAllLimitOrderPoolTotalSharesMapRequest) returns (QueryAllLimitOrderPoolTotalSharesMapResponse) {
		option (google.api.http).get = "/NicholasDotSol/duality/dex/limit_order_pool_total_shares_map";
	}

// Queries a LimitOrderPoolReserveObject by index.
	rpc LimitOrderPoolReserveObject(QueryGetLimitOrderPoolReserveObjectRequest) returns (QueryGetLimitOrderPoolReserveObjectResponse) {
		option (google.api.http).get = "/NicholasDotSol/duality/dex/limit_order_pool_reserve_map/{pairId}/{token}/{tickIndex}/{count}";
	}

	// Queries a list of LimitOrderPoolReserveObject items.
	rpc LimitOrderPoolReserveObjectAll(QueryAllLimitOrderPoolReserveObjectRequest) returns (QueryAllLimitOrderPoolReserveObjectResponse) {
		option (google.api.http).get = "/NicholasDotSol/duality/dex/limit_order_pool_reserve_map";
	}

// Queries a LimitOrderPoolFillObject by index.
	rpc LimitOrderPoolFillObject(QueryGetLimitOrderPoolFillObjectRequest) returns (QueryGetLimitOrderPoolFillObjectResponse) {
		option (google.api.http).get = "/NicholasDotSol/duality/dex/limit_order_pool_fill_map/{pairId}/{token}/{tickIndex}/{count}";
	}

	// Queries a list of LimitOrderPoolFillObject items.
	rpc LimitOrderPoolFillObjectAll(QueryAllLimitOrderPoolFillObjectRequest) returns (QueryAllLimitOrderPoolFillObjectResponse) {
		option (google.api.http).get = "/NicholasDotSol/duality/dex/limit_order_pool_fill_map";
	}

// this line is used by starport scaffolding # 2
}

// QueryParamsRequest is request type for the Query/Params RPC method.
message QueryParamsRequest {}

// QueryParamsResponse is response type for the Query/Params RPC method.
message QueryParamsResponse {
  // params holds all the parameters of this module.
  Params params = 1 [(gogoproto.nullable) = false];
}

message QueryGetTickObjectRequest {
	  int64 tickIndex = 1;
	  string pairId = 2;
	  

}

message QueryGetTickObjectResponse {
	TickObject tickObject = 1 [(gogoproto.nullable) = false];
}

message QueryAllTickObjectRequest {
	cosmos.base.query.v1beta1.PageRequest pagination = 1;
}

message QueryAllTickObjectResponse {
	repeated TickObject tickObject = 1 [(gogoproto.nullable) = false];
	cosmos.base.query.v1beta1.PageResponse pagination = 2;
}

message QueryGetPairObjectRequest {
	  string pairId = 1;

}

message QueryGetPairObjectResponse {
	PairObject pairObject = 1 [(gogoproto.nullable) = false];
}

message QueryAllPairObjectRequest {
	cosmos.base.query.v1beta1.PageRequest pagination = 1;
}

message QueryAllPairObjectResponse {
	repeated PairObject pairObject = 1 [(gogoproto.nullable) = false];
	cosmos.base.query.v1beta1.PageResponse pagination = 2;
}

message QueryGetTokensRequest {
	uint64 id = 1;
}

message QueryGetTokensResponse {
	Tokens Tokens = 1 [(gogoproto.nullable) = false];
}

message QueryAllTokensRequest {
	cosmos.base.query.v1beta1.PageRequest pagination = 1;
}

message QueryAllTokensResponse {
	repeated Tokens Tokens = 1 [(gogoproto.nullable) = false];
	cosmos.base.query.v1beta1.PageResponse pagination = 2;
}

message QueryGetTokenObjectRequest {
	  string address = 1;

}

message QueryGetTokenObjectResponse {
	TokenObject tokenObject = 1 [(gogoproto.nullable) = false];
}

message QueryAllTokenObjectRequest {
	cosmos.base.query.v1beta1.PageRequest pagination = 1;
}

message QueryAllTokenObjectResponse {
	repeated TokenObject tokenObject = 1 [(gogoproto.nullable) = false];
	cosmos.base.query.v1beta1.PageResponse pagination = 2;
}

message QueryGetSharesRequest {
	  string address = 1;
  string pairId = 2;
  int64 tickIndex = 3;
  uint64 fee = 4;

}

message QueryGetSharesResponse {
	Shares shares = 1 [(gogoproto.nullable) = false];
}

message QueryAllSharesRequest {
	cosmos.base.query.v1beta1.PageRequest pagination = 1;
}

message QueryAllSharesResponse {
	repeated Shares shares = 1 [(gogoproto.nullable) = false];
	cosmos.base.query.v1beta1.PageResponse pagination = 2;
}

message QueryGetFeeListRequest {
	uint64 id = 1;
}

message QueryGetFeeListResponse {
	FeeList FeeList = 1 [(gogoproto.nullable) = false];
}

message QueryAllFeeListRequest {
	cosmos.base.query.v1beta1.PageRequest pagination = 1;
}

message QueryAllFeeListResponse {
	repeated FeeList FeeList = 1 [(gogoproto.nullable) = false];
	cosmos.base.query.v1beta1.PageResponse pagination = 2;
}


message QueryGetLimitOrderPoolUserShareMapRequest {
  string pairId = 1;
  int64 tickIndex =2;
  string token = 3;
    uint64 count = 4;
  string address = 5;

}

message QueryGetLimitOrderPoolUserShareMapResponse {
	LimitOrderPoolUserShareMap limitOrderPoolUserShareMap = 1 [(gogoproto.nullable) = false];
}

message QueryAllLimitOrderPoolUserShareMapRequest {
	cosmos.base.query.v1beta1.PageRequest pagination = 1;
}

message QueryAllLimitOrderPoolUserShareMapResponse {
	repeated LimitOrderPoolUserShareMap limitOrderPoolUserShareMap = 1 [(gogoproto.nullable) = false];
	cosmos.base.query.v1beta1.PageResponse pagination = 2;
}

message QueryGetLimitOrderPoolUserSharesWithdrawnRequest {
string pairId = 1;
  int64 tickIndex =2;
  string token = 3;
    uint64 count = 4;
  string address = 5;
}

message QueryGetLimitOrderPoolUserSharesWithdrawnResponse {
	LimitOrderPoolUserSharesWithdrawn limitOrderPoolUserSharesWithdrawn = 1 [(gogoproto.nullable) = false];
}

message QueryAllLimitOrderPoolUserSharesWithdrawnRequest {
	cosmos.base.query.v1beta1.PageRequest pagination = 1;
}

message QueryAllLimitOrderPoolUserSharesWithdrawnResponse {
	repeated LimitOrderPoolUserSharesWithdrawn limitOrderPoolUserSharesWithdrawn = 1 [(gogoproto.nullable) = false];
	cosmos.base.query.v1beta1.PageResponse pagination = 2;
}

message QueryGetLimitOrderPoolTotalSharesMapRequest {
	  string pairId = 1;
  int64 tickIndex =2;
  string token = 3;
    uint64 count = 4;

}

message QueryGetLimitOrderPoolTotalSharesMapResponse {
	LimitOrderPoolTotalSharesMap limitOrderPoolTotalSharesMap = 1 [(gogoproto.nullable) = false];
}

message QueryAllLimitOrderPoolTotalSharesMapRequest {
	cosmos.base.query.v1beta1.PageRequest pagination = 1;
}

message QueryAllLimitOrderPoolTotalSharesMapResponse {
	repeated LimitOrderPoolTotalSharesMap limitOrderPoolTotalSharesMap = 1 [(gogoproto.nullable) = false];
	cosmos.base.query.v1beta1.PageResponse pagination = 2;
}

message QueryGetLimitOrderPoolReserveObjectRequest {
	  string pairId = 1;
  int64 tickIndex =2;
  string token = 3;
    uint64 count = 4;

}

message QueryGetLimitOrderPoolReserveObjectResponse {
	LimitOrderPoolReserveObject limitOrderPoolReserveObject = 1 [(gogoproto.nullable) = false];
}

message QueryAllLimitOrderPoolReserveObjectRequest {
	cosmos.base.query.v1beta1.PageRequest pagination = 1;
}

message QueryAllLimitOrderPoolReserveObjectResponse {
	repeated LimitOrderPoolReserveObject limitOrderPoolReserveObject = 1 [(gogoproto.nullable) = false];
	cosmos.base.query.v1beta1.PageResponse pagination = 2;
}

message QueryGetLimitOrderPoolFillObjectRequest {
	  string pairId = 1;
  int64 tickIndex =2;
  string token = 3;
    uint64 count = 4;

}

message QueryGetLimitOrderPoolFillObjectResponse {
	LimitOrderPoolFillObject limitOrderPoolFillObject = 1 [(gogoproto.nullable) = false];
}

message QueryAllLimitOrderPoolFillObjectRequest {
	cosmos.base.query.v1beta1.PageRequest pagination = 1;
}

message QueryAllLimitOrderPoolFillObjectResponse {
	repeated LimitOrderPoolFillObject limitOrderPoolFillObject = 1 [(gogoproto.nullable) = false];
	cosmos.base.query.v1beta1.PageResponse pagination = 2;
}

// this line is used by starport scaffolding # 3
