syntax = "proto3";
package nicholasdotsol.duality.dex;

import "gogoproto/gogo.proto";
import "google/api/annotations.proto";
import "cosmos/base/query/v1beta1/pagination.proto";
import "dex/params.proto";
import "dex/tick_map.proto";
import "dex/pair_map.proto";
import "dex/tokens.proto";
import "dex/token_map.proto";
import "dex/shares.proto";
import "dex/fee_list.proto";
import "dex/edge_row.proto";
import "dex/adjancey_matrix.proto";
import "dex/limit_order_pool_user_share_map.proto";
import "dex/limit_order_pool_user_shares_filled.proto";
import "dex/limit_order_pool_total_shares_map.proto";
import "dex/limit_order_pool_reserve_map.proto";
import "dex/limit_order_pool_fill_map.proto";
// this line is used by starport scaffolding # 1

option go_package = "github.com/NicholasDotSol/duality/x/dex/types";

// Query defines the gRPC querier service.
service Query {
  // Parameters queries the parameters of the module.
  rpc Params(QueryParamsRequest) returns (QueryParamsResponse) {
    option (google.api.http).get = "/NicholasDotSol/duality/dex/params";
  }
  // Queries a TickMap by index.
	rpc TickMap(QueryGetTickMapRequest) returns (QueryGetTickMapResponse) {
		option (google.api.http).get = "/NicholasDotSol/duality/dex/tick_map/{tickIndex}";
	}

	// Queries a list of TickMap items.
	rpc TickMapAll(QueryAllTickMapRequest) returns (QueryAllTickMapResponse) {
		option (google.api.http).get = "/NicholasDotSol/duality/dex/tick_map";
	}

// Queries a PairMap by index.
	rpc PairMap(QueryGetPairMapRequest) returns (QueryGetPairMapResponse) {
		option (google.api.http).get = "/NicholasDotSol/duality/dex/pair_map/{pairId}";
	}

	// Queries a list of PairMap items.
	rpc PairMapAll(QueryAllPairMapRequest) returns (QueryAllPairMapResponse) {
		option (google.api.http).get = "/NicholasDotSol/duality/dex/pair_map";
	}

// Queries a Tokens by id.
	rpc Tokens(QueryGetTokensRequest) returns (QueryGetTokensResponse) {
		option (google.api.http).get = "/NicholasDotSol/duality/dex/tokens/{id}";
	}

	// Queries a list of Tokens items.
	rpc TokensAll(QueryAllTokensRequest) returns (QueryAllTokensResponse) {
		option (google.api.http).get = "/NicholasDotSol/duality/dex/tokens";
	}

// Queries a TokenMap by index.
	rpc TokenMap(QueryGetTokenMapRequest) returns (QueryGetTokenMapResponse) {
		option (google.api.http).get = "/NicholasDotSol/duality/dex/token_map/{address}";
	}

	// Queries a list of TokenMap items.
	rpc TokenMapAll(QueryAllTokenMapRequest) returns (QueryAllTokenMapResponse) {
		option (google.api.http).get = "/NicholasDotSol/duality/dex/token_map";
	}

// Queries a Shares by index.
	rpc Shares(QueryGetSharesRequest) returns (QueryGetSharesResponse) {
		option (google.api.http).get = "/NicholasDotSol/duality/dex/shares/{address}/{pairId}/{tickIndex}/{fee}";
	}

	// Queries a list of Shares items.
	rpc SharesAll(QueryAllSharesRequest) returns (QueryAllSharesResponse) {
		option (google.api.http).get = "/NicholasDotSol/duality/dex/shares";
	}

// Queries a FeeList by id.
	rpc FeeList(QueryGetFeeListRequest) returns (QueryGetFeeListResponse) {
		option (google.api.http).get = "/NicholasDotSol/duality/dex/fee_list/{id}";
	}

	// Queries a list of FeeList items.
	rpc FeeListAll(QueryAllFeeListRequest) returns (QueryAllFeeListResponse) {
		option (google.api.http).get = "/NicholasDotSol/duality/dex/fee_list";
	}

// Queries a EdgeRow by id.
	rpc EdgeRow(QueryGetEdgeRowRequest) returns (QueryGetEdgeRowResponse) {
		option (google.api.http).get = "/NicholasDotSol/duality/dex/edge_row/{id}";
	}

	// Queries a list of EdgeRow items.
	rpc EdgeRowAll(QueryAllEdgeRowRequest) returns (QueryAllEdgeRowResponse) {
		option (google.api.http).get = "/NicholasDotSol/duality/dex/edge_row";
	}

// Queries a AdjanceyMatrix by id.
	rpc AdjanceyMatrix(QueryGetAdjanceyMatrixRequest) returns (QueryGetAdjanceyMatrixResponse) {
		option (google.api.http).get = "/NicholasDotSol/duality/dex/adjancey_matrix/{id}";
	}

	// Queries a list of AdjanceyMatrix items.
	rpc AdjanceyMatrixAll(QueryAllAdjanceyMatrixRequest) returns (QueryAllAdjanceyMatrixResponse) {
		option (google.api.http).get = "/NicholasDotSol/duality/dex/adjancey_matrix";
	}

// Queries a LimitOrderPoolUserShareMap by index.
	rpc LimitOrderPoolUserShareMap(QueryGetLimitOrderPoolUserShareMapRequest) returns (QueryGetLimitOrderPoolUserShareMapResponse) {
		option (google.api.http).get = "/NicholasDotSol/duality/dex/limit_order_pool_user_share_map/{count}/{address}";
	}

	// Queries a list of LimitOrderPoolUserShareMap items.
	rpc LimitOrderPoolUserShareMapAll(QueryAllLimitOrderPoolUserShareMapRequest) returns (QueryAllLimitOrderPoolUserShareMapResponse) {
		option (google.api.http).get = "/NicholasDotSol/duality/dex/limit_order_pool_user_share_map";
	}

// Queries a LimitOrderPoolUserSharesFilled by index.
	rpc LimitOrderPoolUserSharesFilled(QueryGetLimitOrderPoolUserSharesFilledRequest) returns (QueryGetLimitOrderPoolUserSharesFilledResponse) {
		option (google.api.http).get = "/NicholasDotSol/duality/dex/limit_order_pool_user_shares_filled/{count}/{address}";
	}

	// Queries a list of LimitOrderPoolUserSharesFilled items.
	rpc LimitOrderPoolUserSharesFilledAll(QueryAllLimitOrderPoolUserSharesFilledRequest) returns (QueryAllLimitOrderPoolUserSharesFilledResponse) {
		option (google.api.http).get = "/NicholasDotSol/duality/dex/limit_order_pool_user_shares_filled";
	}

// Queries a LimitOrderPoolTotalSharesMap by index.
	rpc LimitOrderPoolTotalSharesMap(QueryGetLimitOrderPoolTotalSharesMapRequest) returns (QueryGetLimitOrderPoolTotalSharesMapResponse) {
		option (google.api.http).get = "/NicholasDotSol/duality/dex/limit_order_pool_total_shares_map/{count}";
	}

	// Queries a list of LimitOrderPoolTotalSharesMap items.
	rpc LimitOrderPoolTotalSharesMapAll(QueryAllLimitOrderPoolTotalSharesMapRequest) returns (QueryAllLimitOrderPoolTotalSharesMapResponse) {
		option (google.api.http).get = "/NicholasDotSol/duality/dex/limit_order_pool_total_shares_map";
	}

// Queries a LimitOrderPoolReserveMap by index.
	rpc LimitOrderPoolReserveMap(QueryGetLimitOrderPoolReserveMapRequest) returns (QueryGetLimitOrderPoolReserveMapResponse) {
		option (google.api.http).get = "/NicholasDotSol/duality/dex/limit_order_pool_reserve_map/{count}";
	}

	// Queries a list of LimitOrderPoolReserveMap items.
	rpc LimitOrderPoolReserveMapAll(QueryAllLimitOrderPoolReserveMapRequest) returns (QueryAllLimitOrderPoolReserveMapResponse) {
		option (google.api.http).get = "/NicholasDotSol/duality/dex/limit_order_pool_reserve_map";
	}

// Queries a LimitOrderPoolFillMap by index.
	rpc LimitOrderPoolFillMap(QueryGetLimitOrderPoolFillMapRequest) returns (QueryGetLimitOrderPoolFillMapResponse) {
		option (google.api.http).get = "/NicholasDotSol/duality/dex/limit_order_pool_fill_map/{count}";
	}

	// Queries a list of LimitOrderPoolFillMap items.
	rpc LimitOrderPoolFillMapAll(QueryAllLimitOrderPoolFillMapRequest) returns (QueryAllLimitOrderPoolFillMapResponse) {
		option (google.api.http).get = "/NicholasDotSol/duality/dex/limit_order_pool_fill_map";
	}

// this line is used by starport scaffolding # 2
}

// QueryParamsRequest is request type for the Query/Params RPC method.
message QueryParamsRequest {}

// QueryParamsResponse is response type for the Query/Params RPC method.
message QueryParamsResponse {
  // params holds all the parameters of this module.
  Params params = 1 [(gogoproto.nullable) = false];
}

message QueryGetTickMapRequest {
	  int64 tickIndex = 1;
	  string pairId = 2;
	  

}

message QueryGetTickMapResponse {
	TickMap tickMap = 1 [(gogoproto.nullable) = false];
}

message QueryAllTickMapRequest {
	cosmos.base.query.v1beta1.PageRequest pagination = 1;
}

message QueryAllTickMapResponse {
	repeated TickMap tickMap = 1 [(gogoproto.nullable) = false];
	cosmos.base.query.v1beta1.PageResponse pagination = 2;
}

message QueryGetPairMapRequest {
	  string pairId = 1;

}

message QueryGetPairMapResponse {
	PairMap pairMap = 1 [(gogoproto.nullable) = false];
}

message QueryAllPairMapRequest {
	cosmos.base.query.v1beta1.PageRequest pagination = 1;
}

message QueryAllPairMapResponse {
	repeated PairMap pairMap = 1 [(gogoproto.nullable) = false];
	cosmos.base.query.v1beta1.PageResponse pagination = 2;
}

message QueryGetTokensRequest {
	uint64 id = 1;
}

message QueryGetTokensResponse {
	Tokens Tokens = 1 [(gogoproto.nullable) = false];
}

message QueryAllTokensRequest {
	cosmos.base.query.v1beta1.PageRequest pagination = 1;
}

message QueryAllTokensResponse {
	repeated Tokens Tokens = 1 [(gogoproto.nullable) = false];
	cosmos.base.query.v1beta1.PageResponse pagination = 2;
}

message QueryGetTokenMapRequest {
	  string address = 1;

}

message QueryGetTokenMapResponse {
	TokenMap tokenMap = 1 [(gogoproto.nullable) = false];
}

message QueryAllTokenMapRequest {
	cosmos.base.query.v1beta1.PageRequest pagination = 1;
}

message QueryAllTokenMapResponse {
	repeated TokenMap tokenMap = 1 [(gogoproto.nullable) = false];
	cosmos.base.query.v1beta1.PageResponse pagination = 2;
}

message QueryGetSharesRequest {
	  string address = 1;
  string pairId = 2;
  int64 tickIndex = 3;
  uint64 fee = 4;

}

message QueryGetSharesResponse {
	Shares shares = 1 [(gogoproto.nullable) = false];
}

message QueryAllSharesRequest {
	cosmos.base.query.v1beta1.PageRequest pagination = 1;
}

message QueryAllSharesResponse {
	repeated Shares shares = 1 [(gogoproto.nullable) = false];
	cosmos.base.query.v1beta1.PageResponse pagination = 2;
}

message QueryGetFeeListRequest {
	uint64 id = 1;
}

message QueryGetFeeListResponse {
	FeeList FeeList = 1 [(gogoproto.nullable) = false];
}

message QueryAllFeeListRequest {
	cosmos.base.query.v1beta1.PageRequest pagination = 1;
}

message QueryAllFeeListResponse {
	repeated FeeList FeeList = 1 [(gogoproto.nullable) = false];
	cosmos.base.query.v1beta1.PageResponse pagination = 2;
}

message QueryGetEdgeRowRequest {
	uint64 id = 1;
}

message QueryGetEdgeRowResponse {
	EdgeRow EdgeRow = 1 [(gogoproto.nullable) = false];
}

message QueryAllEdgeRowRequest {
	cosmos.base.query.v1beta1.PageRequest pagination = 1;
}

message QueryAllEdgeRowResponse {
	repeated EdgeRow EdgeRow = 1 [(gogoproto.nullable) = false];
	cosmos.base.query.v1beta1.PageResponse pagination = 2;
}

message QueryGetAdjanceyMatrixRequest {
	uint64 id = 1;
}

message QueryGetAdjanceyMatrixResponse {
	AdjanceyMatrix AdjanceyMatrix = 1 [(gogoproto.nullable) = false];
}

message QueryAllAdjanceyMatrixRequest {
	cosmos.base.query.v1beta1.PageRequest pagination = 1;
}

message QueryAllAdjanceyMatrixResponse {
	repeated AdjanceyMatrix AdjanceyMatrix = 1 [(gogoproto.nullable) = false];
	cosmos.base.query.v1beta1.PageResponse pagination = 2;
}

message QueryGetLimitOrderPoolUserShareMapRequest {
	uint64 count = 1;
  string address = 2;
  string pairId = 3;
  int64 tickIndex =4;
  string token = 5;

}

message QueryGetLimitOrderPoolUserShareMapResponse {
	LimitOrderPoolUserShareMap limitOrderPoolUserShareMap = 1 [(gogoproto.nullable) = false];
}

message QueryAllLimitOrderPoolUserShareMapRequest {
	cosmos.base.query.v1beta1.PageRequest pagination = 1;
}

message QueryAllLimitOrderPoolUserShareMapResponse {
	repeated LimitOrderPoolUserShareMap limitOrderPoolUserShareMap = 1 [(gogoproto.nullable) = false];
	cosmos.base.query.v1beta1.PageResponse pagination = 2;
}

message QueryGetLimitOrderPoolUserSharesFilledRequest {
	uint64 count = 1;
  string address = 2;
 string pairId = 3;
  int64 tickIndex =4;
  string token = 5;
}

message QueryGetLimitOrderPoolUserSharesFilledResponse {
	LimitOrderPoolUserSharesFilled limitOrderPoolUserSharesFilled = 1 [(gogoproto.nullable) = false];
}

message QueryAllLimitOrderPoolUserSharesFilledRequest {
	cosmos.base.query.v1beta1.PageRequest pagination = 1;
}

message QueryAllLimitOrderPoolUserSharesFilledResponse {
	repeated LimitOrderPoolUserSharesFilled limitOrderPoolUserSharesFilled = 1 [(gogoproto.nullable) = false];
	cosmos.base.query.v1beta1.PageResponse pagination = 2;
}

message QueryGetLimitOrderPoolTotalSharesMapRequest {
	  uint64 count = 1;
	   string pairId = 2;
  int64 tickIndex =3;
  string token = 4;

}

message QueryGetLimitOrderPoolTotalSharesMapResponse {
	LimitOrderPoolTotalSharesMap limitOrderPoolTotalSharesMap = 1 [(gogoproto.nullable) = false];
}

message QueryAllLimitOrderPoolTotalSharesMapRequest {
	cosmos.base.query.v1beta1.PageRequest pagination = 1;
}

message QueryAllLimitOrderPoolTotalSharesMapResponse {
	repeated LimitOrderPoolTotalSharesMap limitOrderPoolTotalSharesMap = 1 [(gogoproto.nullable) = false];
	cosmos.base.query.v1beta1.PageResponse pagination = 2;
}

message QueryGetLimitOrderPoolReserveMapRequest {
	  uint64 count = 1;
	  string pairId = 2;
  int64 tickIndex =3;
  string token = 4;

}

message QueryGetLimitOrderPoolReserveMapResponse {
	LimitOrderPoolReserveMap limitOrderPoolReserveMap = 1 [(gogoproto.nullable) = false];
}

message QueryAllLimitOrderPoolReserveMapRequest {
	cosmos.base.query.v1beta1.PageRequest pagination = 1;
}

message QueryAllLimitOrderPoolReserveMapResponse {
	repeated LimitOrderPoolReserveMap limitOrderPoolReserveMap = 1 [(gogoproto.nullable) = false];
	cosmos.base.query.v1beta1.PageResponse pagination = 2;
}

message QueryGetLimitOrderPoolFillMapRequest {
	uint64 count = 1;
	string pairId = 2;
  int64 tickIndex =3;
  string token = 4;

}

message QueryGetLimitOrderPoolFillMapResponse {
	LimitOrderPoolFillMap limitOrderPoolFillMap = 1 [(gogoproto.nullable) = false];
}

message QueryAllLimitOrderPoolFillMapRequest {
	cosmos.base.query.v1beta1.PageRequest pagination = 1;
}

message QueryAllLimitOrderPoolFillMapResponse {
	repeated LimitOrderPoolFillMap limitOrderPoolFillMap = 1 [(gogoproto.nullable) = false];
	cosmos.base.query.v1beta1.PageResponse pagination = 2;
}

// this line is used by starport scaffolding # 3
