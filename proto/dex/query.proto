syntax = "proto3";
package nicholasdotsol.duality.dex;

import "gogoproto/gogo.proto";
import "google/api/annotations.proto";
import "cosmos/base/query/v1beta1/pagination.proto";
import "dex/params.proto";
import "dex/tick_map.proto";
import "dex/pair_map.proto";
import "dex/tokens.proto";
import "dex/token_map.proto";
import "dex/shares.proto";
// this line is used by starport scaffolding # 1

option go_package = "github.com/NicholasDotSol/duality/x/dex/types";

// Query defines the gRPC querier service.
service Query {
  // Parameters queries the parameters of the module.
  rpc Params(QueryParamsRequest) returns (QueryParamsResponse) {
    option (google.api.http).get = "/NicholasDotSol/duality/dex/params";
  }
  // Queries a TickMap by index.
	rpc TickMap(QueryGetTickMapRequest) returns (QueryGetTickMapResponse) {
		option (google.api.http).get = "/NicholasDotSol/duality/dex/tick_map/{tickIndex}";
	}

	// Queries a list of TickMap items.
	rpc TickMapAll(QueryAllTickMapRequest) returns (QueryAllTickMapResponse) {
		option (google.api.http).get = "/NicholasDotSol/duality/dex/tick_map";
	}

// Queries a PairMap by index.
	rpc PairMap(QueryGetPairMapRequest) returns (QueryGetPairMapResponse) {
		option (google.api.http).get = "/NicholasDotSol/duality/dex/pair_map/{pairId}";
	}

	// Queries a list of PairMap items.
	rpc PairMapAll(QueryAllPairMapRequest) returns (QueryAllPairMapResponse) {
		option (google.api.http).get = "/NicholasDotSol/duality/dex/pair_map";
	}

// Queries a Tokens by id.
	rpc Tokens(QueryGetTokensRequest) returns (QueryGetTokensResponse) {
		option (google.api.http).get = "/NicholasDotSol/duality/dex/tokens/{id}";
	}

	// Queries a list of Tokens items.
	rpc TokensAll(QueryAllTokensRequest) returns (QueryAllTokensResponse) {
		option (google.api.http).get = "/NicholasDotSol/duality/dex/tokens";
	}

// Queries a TokenMap by index.
	rpc TokenMap(QueryGetTokenMapRequest) returns (QueryGetTokenMapResponse) {
		option (google.api.http).get = "/NicholasDotSol/duality/dex/token_map/{address}";
	}

	// Queries a list of TokenMap items.
	rpc TokenMapAll(QueryAllTokenMapRequest) returns (QueryAllTokenMapResponse) {
		option (google.api.http).get = "/NicholasDotSol/duality/dex/token_map";
	}

// Queries a Shares by index.
	rpc Shares(QueryGetSharesRequest) returns (QueryGetSharesResponse) {
		option (google.api.http).get = "/NicholasDotSol/duality/dex/shares/{address}/{pairId}/{priceIndex}/{fee}";
	}

	// Queries a list of Shares items.
	rpc SharesAll(QueryAllSharesRequest) returns (QueryAllSharesResponse) {
		option (google.api.http).get = "/NicholasDotSol/duality/dex/shares";
	}

// this line is used by starport scaffolding # 2
}

// QueryParamsRequest is request type for the Query/Params RPC method.
message QueryParamsRequest {}

// QueryParamsResponse is response type for the Query/Params RPC method.
message QueryParamsResponse {
  // params holds all the parameters of this module.
  Params params = 1 [(gogoproto.nullable) = false];
}

message QueryGetTickMapRequest {
	  int64 tickIndex = 1;
	  string pairId = 2;
	  

}

message QueryGetTickMapResponse {
	TickMap tickMap = 1 [(gogoproto.nullable) = false];
}

message QueryAllTickMapRequest {
	cosmos.base.query.v1beta1.PageRequest pagination = 1;
}

message QueryAllTickMapResponse {
	repeated TickMap tickMap = 1 [(gogoproto.nullable) = false];
	cosmos.base.query.v1beta1.PageResponse pagination = 2;
}

message QueryGetPairMapRequest {
	  string pairId = 1;

}

message QueryGetPairMapResponse {
	PairMap pairMap = 1 [(gogoproto.nullable) = false];
}

message QueryAllPairMapRequest {
	cosmos.base.query.v1beta1.PageRequest pagination = 1;
}

message QueryAllPairMapResponse {
	repeated PairMap pairMap = 1 [(gogoproto.nullable) = false];
	cosmos.base.query.v1beta1.PageResponse pagination = 2;
}

message QueryGetTokensRequest {
	uint64 id = 1;
}

message QueryGetTokensResponse {
	Tokens Tokens = 1 [(gogoproto.nullable) = false];
}

message QueryAllTokensRequest {
	cosmos.base.query.v1beta1.PageRequest pagination = 1;
}

message QueryAllTokensResponse {
	repeated Tokens Tokens = 1 [(gogoproto.nullable) = false];
	cosmos.base.query.v1beta1.PageResponse pagination = 2;
}

message QueryGetTokenMapRequest {
	  string address = 1;

}

message QueryGetTokenMapResponse {
	TokenMap tokenMap = 1 [(gogoproto.nullable) = false];
}

message QueryAllTokenMapRequest {
	cosmos.base.query.v1beta1.PageRequest pagination = 1;
}

message QueryAllTokenMapResponse {
	repeated TokenMap tokenMap = 1 [(gogoproto.nullable) = false];
	cosmos.base.query.v1beta1.PageResponse pagination = 2;
}

message QueryGetSharesRequest {
	  string address = 1;
  string pairId = 2;
  string priceIndex = 3;
  string fee = 4;

}

message QueryGetSharesResponse {
	Shares shares = 1 [(gogoproto.nullable) = false];
}

message QueryAllSharesRequest {
	cosmos.base.query.v1beta1.PageRequest pagination = 1;
}

message QueryAllSharesResponse {
	repeated Shares shares = 1 [(gogoproto.nullable) = false];
	cosmos.base.query.v1beta1.PageResponse pagination = 2;
}

// this line is used by starport scaffolding # 3
