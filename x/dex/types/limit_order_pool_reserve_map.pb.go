// Code generated by protoc-gen-gogo. DO NOT EDIT.
// source: dex/limit_order_pool_reserve_map.proto

package types

import (
	fmt "fmt"
	github_com_cosmos_cosmos_sdk_types "github.com/cosmos/cosmos-sdk/types"
	_ "github.com/gogo/protobuf/gogoproto"
	proto "github.com/gogo/protobuf/proto"
	io "io"
	math "math"
	math_bits "math/bits"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.GoGoProtoPackageIsVersion3 // please upgrade the proto package

type LimitOrderPoolReserveMap struct {
	Token     string                                 `protobuf:"bytes,1,opt,name=token,proto3" json:"token,omitempty"`
	TickIndex int64                                  `protobuf:"varint,2,opt,name=tickIndex,proto3" json:"tickIndex,omitempty"`
	Count     uint64                                 `protobuf:"varint,3,opt,name=count,proto3" json:"count,omitempty"`
	Reserves  github_com_cosmos_cosmos_sdk_types.Dec `protobuf:"bytes,4,opt,name=reserves,proto3,customtype=github.com/cosmos/cosmos-sdk/types.Dec" json:"reserves" yaml:"reserves"`
}

func (m *LimitOrderPoolReserveMap) Reset()         { *m = LimitOrderPoolReserveMap{} }
func (m *LimitOrderPoolReserveMap) String() string { return proto.CompactTextString(m) }
func (*LimitOrderPoolReserveMap) ProtoMessage()    {}
func (*LimitOrderPoolReserveMap) Descriptor() ([]byte, []int) {
	return fileDescriptor_9c0f8247f33ec8ae, []int{0}
}
func (m *LimitOrderPoolReserveMap) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *LimitOrderPoolReserveMap) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_LimitOrderPoolReserveMap.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *LimitOrderPoolReserveMap) XXX_Merge(src proto.Message) {
	xxx_messageInfo_LimitOrderPoolReserveMap.Merge(m, src)
}
func (m *LimitOrderPoolReserveMap) XXX_Size() int {
	return m.Size()
}
func (m *LimitOrderPoolReserveMap) XXX_DiscardUnknown() {
	xxx_messageInfo_LimitOrderPoolReserveMap.DiscardUnknown(m)
}

var xxx_messageInfo_LimitOrderPoolReserveMap proto.InternalMessageInfo

func (m *LimitOrderPoolReserveMap) GetToken() string {
	if m != nil {
		return m.Token
	}
	return ""
}

func (m *LimitOrderPoolReserveMap) GetTickIndex() int64 {
	if m != nil {
		return m.TickIndex
	}
	return 0
}

func (m *LimitOrderPoolReserveMap) GetCount() uint64 {
	if m != nil {
		return m.Count
	}
	return 0
}

func init() {
	proto.RegisterType((*LimitOrderPoolReserveMap)(nil), "nicholasdotsol.duality.dex.LimitOrderPoolReserveMap")
}

func init() {
	proto.RegisterFile("dex/limit_order_pool_reserve_map.proto", fileDescriptor_9c0f8247f33ec8ae)
}

var fileDescriptor_9c0f8247f33ec8ae = []byte{
	// 309 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0x4c, 0x90, 0x31, 0x4b, 0xc3, 0x40,
	0x14, 0xc7, 0x73, 0xb6, 0x8a, 0xcd, 0x22, 0x84, 0x0e, 0xa1, 0xc8, 0xa5, 0x74, 0x28, 0x5d, 0x9a,
	0x1b, 0xdc, 0x1c, 0x4b, 0x41, 0x04, 0xab, 0x12, 0x37, 0x97, 0x90, 0xde, 0x1d, 0xed, 0xd1, 0x4b,
	0x5e, 0xc8, 0x5d, 0x25, 0xfd, 0x16, 0x7e, 0xac, 0x6e, 0x76, 0x14, 0x87, 0x20, 0xc9, 0xe6, 0xe8,
	0x27, 0x90, 0x4b, 0x62, 0x75, 0xba, 0x7b, 0xef, 0xee, 0xfd, 0xfe, 0x8f, 0x9f, 0x3d, 0x66, 0x3c,
	0x27, 0x52, 0xc4, 0x42, 0x87, 0x90, 0x31, 0x9e, 0x85, 0x29, 0x80, 0x0c, 0x33, 0xae, 0x78, 0xf6,
	0xc2, 0xc3, 0x38, 0x4a, 0xfd, 0x34, 0x03, 0x0d, 0xce, 0x20, 0x11, 0x74, 0x0d, 0x32, 0x52, 0x0c,
	0xb4, 0x02, 0xe9, 0xb3, 0x6d, 0x24, 0x85, 0xde, 0xf9, 0x8c, 0xe7, 0x83, 0xfe, 0x0a, 0x56, 0x50,
	0x7f, 0x23, 0xe6, 0xd6, 0x4c, 0x8c, 0xde, 0x90, 0xed, 0xde, 0x19, 0xf0, 0x83, 0xe1, 0x3e, 0x02,
	0xc8, 0xa0, 0xa1, 0x2e, 0xa2, 0xd4, 0xe9, 0xdb, 0xa7, 0x1a, 0x36, 0x3c, 0x71, 0xd1, 0x10, 0x4d,
	0x7a, 0x41, 0x53, 0x38, 0x97, 0x76, 0x4f, 0x0b, 0xba, 0xb9, 0x4d, 0x18, 0xcf, 0xdd, 0x93, 0x21,
	0x9a, 0x74, 0x82, 0xbf, 0x86, 0x99, 0xa1, 0xb0, 0x4d, 0xb4, 0xdb, 0x19, 0xa2, 0x49, 0x37, 0x68,
	0x0a, 0x47, 0xd8, 0xe7, 0xed, 0xb6, 0xca, 0xed, 0x1a, 0xd8, 0x6c, 0xb1, 0x2f, 0x3c, 0xeb, 0xa3,
	0xf0, 0xc6, 0x2b, 0xa1, 0xd7, 0xdb, 0xa5, 0x4f, 0x21, 0x26, 0x14, 0x54, 0x0c, 0xaa, 0x3d, 0xa6,
	0x8a, 0x6d, 0x88, 0xde, 0xa5, 0x5c, 0xf9, 0x73, 0x4e, 0xbf, 0x0a, 0xef, 0x48, 0xf8, 0x2e, 0xbc,
	0x8b, 0x5d, 0x14, 0xcb, 0xeb, 0xd1, 0x6f, 0x67, 0x14, 0x1c, 0x1f, 0x67, 0x37, 0xfb, 0x12, 0xa3,
	0x43, 0x89, 0xd1, 0x67, 0x89, 0xd1, 0x6b, 0x85, 0xad, 0x43, 0x85, 0xad, 0xf7, 0x0a, 0x5b, 0xcf,
	0xd3, 0x7f, 0x51, 0xf7, 0xad, 0xa8, 0x39, 0xe8, 0x27, 0x90, 0xa4, 0x15, 0x45, 0x72, 0x62, 0x4c,
	0xd7, 0xa9, 0xcb, 0xb3, 0xda, 0xd0, 0xd5, 0x4f, 0x00, 0x00, 0x00, 0xff, 0xff, 0xcd, 0x18, 0x37,
	0x27, 0x7d, 0x01, 0x00, 0x00,
}

func (m *LimitOrderPoolReserveMap) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *LimitOrderPoolReserveMap) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *LimitOrderPoolReserveMap) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	{
		size := m.Reserves.Size()
		i -= size
		if _, err := m.Reserves.MarshalTo(dAtA[i:]); err != nil {
			return 0, err
		}
		i = encodeVarintLimitOrderPoolReserveMap(dAtA, i, uint64(size))
	}
	i--
	dAtA[i] = 0x22
	if m.Count != 0 {
		i = encodeVarintLimitOrderPoolReserveMap(dAtA, i, uint64(m.Count))
		i--
		dAtA[i] = 0x18
	}
	if m.TickIndex != 0 {
		i = encodeVarintLimitOrderPoolReserveMap(dAtA, i, uint64(m.TickIndex))
		i--
		dAtA[i] = 0x10
	}
	if len(m.Token) > 0 {
		i -= len(m.Token)
		copy(dAtA[i:], m.Token)
		i = encodeVarintLimitOrderPoolReserveMap(dAtA, i, uint64(len(m.Token)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func encodeVarintLimitOrderPoolReserveMap(dAtA []byte, offset int, v uint64) int {
	offset -= sovLimitOrderPoolReserveMap(v)
	base := offset
	for v >= 1<<7 {
		dAtA[offset] = uint8(v&0x7f | 0x80)
		v >>= 7
		offset++
	}
	dAtA[offset] = uint8(v)
	return base
}
func (m *LimitOrderPoolReserveMap) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.Token)
	if l > 0 {
		n += 1 + l + sovLimitOrderPoolReserveMap(uint64(l))
	}
	if m.TickIndex != 0 {
		n += 1 + sovLimitOrderPoolReserveMap(uint64(m.TickIndex))
	}
	if m.Count != 0 {
		n += 1 + sovLimitOrderPoolReserveMap(uint64(m.Count))
	}
	l = m.Reserves.Size()
	n += 1 + l + sovLimitOrderPoolReserveMap(uint64(l))
	return n
}

func sovLimitOrderPoolReserveMap(x uint64) (n int) {
	return (math_bits.Len64(x|1) + 6) / 7
}
func sozLimitOrderPoolReserveMap(x uint64) (n int) {
	return sovLimitOrderPoolReserveMap(uint64((x << 1) ^ uint64((int64(x) >> 63))))
}
func (m *LimitOrderPoolReserveMap) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowLimitOrderPoolReserveMap
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: LimitOrderPoolReserveMap: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: LimitOrderPoolReserveMap: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Token", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowLimitOrderPoolReserveMap
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthLimitOrderPoolReserveMap
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthLimitOrderPoolReserveMap
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Token = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field TickIndex", wireType)
			}
			m.TickIndex = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowLimitOrderPoolReserveMap
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.TickIndex |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 3:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Count", wireType)
			}
			m.Count = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowLimitOrderPoolReserveMap
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Count |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Reserves", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowLimitOrderPoolReserveMap
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthLimitOrderPoolReserveMap
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthLimitOrderPoolReserveMap
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := m.Reserves.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipLimitOrderPoolReserveMap(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthLimitOrderPoolReserveMap
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func skipLimitOrderPoolReserveMap(dAtA []byte) (n int, err error) {
	l := len(dAtA)
	iNdEx := 0
	depth := 0
	for iNdEx < l {
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return 0, ErrIntOverflowLimitOrderPoolReserveMap
			}
			if iNdEx >= l {
				return 0, io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		wireType := int(wire & 0x7)
		switch wireType {
		case 0:
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowLimitOrderPoolReserveMap
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				iNdEx++
				if dAtA[iNdEx-1] < 0x80 {
					break
				}
			}
		case 1:
			iNdEx += 8
		case 2:
			var length int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowLimitOrderPoolReserveMap
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				length |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if length < 0 {
				return 0, ErrInvalidLengthLimitOrderPoolReserveMap
			}
			iNdEx += length
		case 3:
			depth++
		case 4:
			if depth == 0 {
				return 0, ErrUnexpectedEndOfGroupLimitOrderPoolReserveMap
			}
			depth--
		case 5:
			iNdEx += 4
		default:
			return 0, fmt.Errorf("proto: illegal wireType %d", wireType)
		}
		if iNdEx < 0 {
			return 0, ErrInvalidLengthLimitOrderPoolReserveMap
		}
		if depth == 0 {
			return iNdEx, nil
		}
	}
	return 0, io.ErrUnexpectedEOF
}

var (
	ErrInvalidLengthLimitOrderPoolReserveMap        = fmt.Errorf("proto: negative length found during unmarshaling")
	ErrIntOverflowLimitOrderPoolReserveMap          = fmt.Errorf("proto: integer overflow")
	ErrUnexpectedEndOfGroupLimitOrderPoolReserveMap = fmt.Errorf("proto: unexpected end of group")
)
