// Code generated by protoc-gen-gogo. DO NOT EDIT.
// source: dex/tick.proto

package types

import (
	fmt "fmt"
	proto "github.com/gogo/protobuf/proto"
	io "io"
	math "math"
	math_bits "math/bits"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.GoGoProtoPackageIsVersion3 // please upgrade the proto package

type Tick struct {
	Token0      string `protobuf:"bytes,1,opt,name=token0,proto3" json:"token0,omitempty"`
	Token1      string `protobuf:"bytes,2,opt,name=token1,proto3" json:"token1,omitempty"`
	Price       string `protobuf:"bytes,3,opt,name=price,proto3" json:"price,omitempty"`
	Fee         uint64 `protobuf:"varint,4,opt,name=fee,proto3" json:"fee,omitempty"`
	Reserves0   uint64 `protobuf:"varint,5,opt,name=reserves0,proto3" json:"reserves0,omitempty"`
	Reserves1   uint64 `protobuf:"varint,6,opt,name=reserves1,proto3" json:"reserves1,omitempty"`
	TotalShares uint64 `protobuf:"varint,7,opt,name=totalShares,proto3" json:"totalShares,omitempty"`
}

func (m *Tick) Reset()         { *m = Tick{} }
func (m *Tick) String() string { return proto.CompactTextString(m) }
func (*Tick) ProtoMessage()    {}
func (*Tick) Descriptor() ([]byte, []int) {
	return fileDescriptor_120cef08c2828891, []int{0}
}
func (m *Tick) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *Tick) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_Tick.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *Tick) XXX_Merge(src proto.Message) {
	xxx_messageInfo_Tick.Merge(m, src)
}
func (m *Tick) XXX_Size() int {
	return m.Size()
}
func (m *Tick) XXX_DiscardUnknown() {
	xxx_messageInfo_Tick.DiscardUnknown(m)
}

var xxx_messageInfo_Tick proto.InternalMessageInfo

func (m *Tick) GetToken0() string {
	if m != nil {
		return m.Token0
	}
	return ""
}

func (m *Tick) GetToken1() string {
	if m != nil {
		return m.Token1
	}
	return ""
}

func (m *Tick) GetPrice() string {
	if m != nil {
		return m.Price
	}
	return ""
}

func (m *Tick) GetFee() uint64 {
	if m != nil {
		return m.Fee
	}
	return 0
}

func (m *Tick) GetReserves0() uint64 {
	if m != nil {
		return m.Reserves0
	}
	return 0
}

func (m *Tick) GetReserves1() uint64 {
	if m != nil {
		return m.Reserves1
	}
	return 0
}

func (m *Tick) GetTotalShares() uint64 {
	if m != nil {
		return m.TotalShares
	}
	return 0
}

func init() {
	proto.RegisterType((*Tick)(nil), "nicholasdotsol.duality.dex.Tick")
}

func init() { proto.RegisterFile("dex/tick.proto", fileDescriptor_120cef08c2828891) }

var fileDescriptor_120cef08c2828891 = []byte{
	// 250 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0xe2, 0xe2, 0x4b, 0x49, 0xad, 0xd0,
	0x2f, 0xc9, 0x4c, 0xce, 0xd6, 0x2b, 0x28, 0xca, 0x2f, 0xc9, 0x17, 0x92, 0xca, 0xcb, 0x4c, 0xce,
	0xc8, 0xcf, 0x49, 0x2c, 0x4e, 0xc9, 0x2f, 0x29, 0xce, 0xcf, 0xd1, 0x4b, 0x29, 0x4d, 0xcc, 0xc9,
	0x2c, 0xa9, 0xd4, 0x4b, 0x49, 0xad, 0x50, 0xda, 0xc3, 0xc8, 0xc5, 0x12, 0x92, 0x99, 0x9c, 0x2d,
	0x24, 0xc6, 0xc5, 0x56, 0x92, 0x9f, 0x9d, 0x9a, 0x67, 0x20, 0xc1, 0xa8, 0xc0, 0xa8, 0xc1, 0x19,
	0x04, 0xe5, 0xc1, 0xc5, 0x0d, 0x25, 0x98, 0x90, 0xc4, 0x0d, 0x85, 0x44, 0xb8, 0x58, 0x0b, 0x8a,
	0x32, 0x93, 0x53, 0x25, 0x98, 0xc1, 0xc2, 0x10, 0x8e, 0x90, 0x00, 0x17, 0x73, 0x5a, 0x6a, 0xaa,
	0x04, 0x8b, 0x02, 0xa3, 0x06, 0x4b, 0x10, 0x88, 0x29, 0x24, 0xc3, 0xc5, 0x59, 0x94, 0x5a, 0x9c,
	0x5a, 0x54, 0x96, 0x5a, 0x6c, 0x20, 0xc1, 0x0a, 0x16, 0x47, 0x08, 0x20, 0xcb, 0x1a, 0x4a, 0xb0,
	0xa1, 0xca, 0x1a, 0x0a, 0x29, 0x70, 0x71, 0x97, 0xe4, 0x97, 0x24, 0xe6, 0x04, 0x67, 0x24, 0x16,
	0xa5, 0x16, 0x4b, 0xb0, 0x83, 0xe5, 0x91, 0x85, 0x9c, 0xdc, 0x4f, 0x3c, 0x92, 0x63, 0xbc, 0xf0,
	0x48, 0x8e, 0xf1, 0xc1, 0x23, 0x39, 0xc6, 0x09, 0x8f, 0xe5, 0x18, 0x2e, 0x3c, 0x96, 0x63, 0xb8,
	0xf1, 0x58, 0x8e, 0x21, 0x4a, 0x37, 0x3d, 0xb3, 0x24, 0xa3, 0x34, 0x49, 0x2f, 0x39, 0x3f, 0x57,
	0xdf, 0x0f, 0xea, 0x7f, 0x97, 0xfc, 0x92, 0xe0, 0xfc, 0x1c, 0x7d, 0xa8, 0xff, 0xf5, 0x2b, 0xf4,
	0xc1, 0x01, 0x55, 0x59, 0x90, 0x5a, 0x9c, 0xc4, 0x06, 0x0e, 0x2a, 0x63, 0x40, 0x00, 0x00, 0x00,
	0xff, 0xff, 0x41, 0xe5, 0x64, 0xb9, 0x3c, 0x01, 0x00, 0x00,
}

func (m *Tick) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *Tick) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *Tick) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.TotalShares != 0 {
		i = encodeVarintTick(dAtA, i, uint64(m.TotalShares))
		i--
		dAtA[i] = 0x38
	}
	if m.Reserves1 != 0 {
		i = encodeVarintTick(dAtA, i, uint64(m.Reserves1))
		i--
		dAtA[i] = 0x30
	}
	if m.Reserves0 != 0 {
		i = encodeVarintTick(dAtA, i, uint64(m.Reserves0))
		i--
		dAtA[i] = 0x28
	}
	if m.Fee != 0 {
		i = encodeVarintTick(dAtA, i, uint64(m.Fee))
		i--
		dAtA[i] = 0x20
	}
	if len(m.Price) > 0 {
		i -= len(m.Price)
		copy(dAtA[i:], m.Price)
		i = encodeVarintTick(dAtA, i, uint64(len(m.Price)))
		i--
		dAtA[i] = 0x1a
	}
	if len(m.Token1) > 0 {
		i -= len(m.Token1)
		copy(dAtA[i:], m.Token1)
		i = encodeVarintTick(dAtA, i, uint64(len(m.Token1)))
		i--
		dAtA[i] = 0x12
	}
	if len(m.Token0) > 0 {
		i -= len(m.Token0)
		copy(dAtA[i:], m.Token0)
		i = encodeVarintTick(dAtA, i, uint64(len(m.Token0)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func encodeVarintTick(dAtA []byte, offset int, v uint64) int {
	offset -= sovTick(v)
	base := offset
	for v >= 1<<7 {
		dAtA[offset] = uint8(v&0x7f | 0x80)
		v >>= 7
		offset++
	}
	dAtA[offset] = uint8(v)
	return base
}
func (m *Tick) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.Token0)
	if l > 0 {
		n += 1 + l + sovTick(uint64(l))
	}
	l = len(m.Token1)
	if l > 0 {
		n += 1 + l + sovTick(uint64(l))
	}
	l = len(m.Price)
	if l > 0 {
		n += 1 + l + sovTick(uint64(l))
	}
	if m.Fee != 0 {
		n += 1 + sovTick(uint64(m.Fee))
	}
	if m.Reserves0 != 0 {
		n += 1 + sovTick(uint64(m.Reserves0))
	}
	if m.Reserves1 != 0 {
		n += 1 + sovTick(uint64(m.Reserves1))
	}
	if m.TotalShares != 0 {
		n += 1 + sovTick(uint64(m.TotalShares))
	}
	return n
}

func sovTick(x uint64) (n int) {
	return (math_bits.Len64(x|1) + 6) / 7
}
func sozTick(x uint64) (n int) {
	return sovTick(uint64((x << 1) ^ uint64((int64(x) >> 63))))
}
func (m *Tick) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowTick
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: Tick: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: Tick: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Token0", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTick
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTick
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTick
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Token0 = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Token1", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTick
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTick
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTick
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Token1 = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Price", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTick
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTick
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTick
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Price = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 4:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Fee", wireType)
			}
			m.Fee = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTick
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Fee |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 5:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Reserves0", wireType)
			}
			m.Reserves0 = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTick
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Reserves0 |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 6:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Reserves1", wireType)
			}
			m.Reserves1 = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTick
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Reserves1 |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 7:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field TotalShares", wireType)
			}
			m.TotalShares = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTick
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.TotalShares |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipTick(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthTick
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func skipTick(dAtA []byte) (n int, err error) {
	l := len(dAtA)
	iNdEx := 0
	depth := 0
	for iNdEx < l {
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return 0, ErrIntOverflowTick
			}
			if iNdEx >= l {
				return 0, io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		wireType := int(wire & 0x7)
		switch wireType {
		case 0:
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowTick
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				iNdEx++
				if dAtA[iNdEx-1] < 0x80 {
					break
				}
			}
		case 1:
			iNdEx += 8
		case 2:
			var length int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowTick
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				length |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if length < 0 {
				return 0, ErrInvalidLengthTick
			}
			iNdEx += length
		case 3:
			depth++
		case 4:
			if depth == 0 {
				return 0, ErrUnexpectedEndOfGroupTick
			}
			depth--
		case 5:
			iNdEx += 4
		default:
			return 0, fmt.Errorf("proto: illegal wireType %d", wireType)
		}
		if iNdEx < 0 {
			return 0, ErrInvalidLengthTick
		}
		if depth == 0 {
			return iNdEx, nil
		}
	}
	return 0, io.ErrUnexpectedEOF
}

var (
	ErrInvalidLengthTick        = fmt.Errorf("proto: negative length found during unmarshaling")
	ErrIntOverflowTick          = fmt.Errorf("proto: integer overflow")
	ErrUnexpectedEndOfGroupTick = fmt.Errorf("proto: unexpected end of group")
)
