// Code generated by protoc-gen-gogo. DO NOT EDIT.
// source: dex/share.proto

package types

import (
	fmt "fmt"
	github_com_cosmos_cosmos_sdk_types "github.com/cosmos/cosmos-sdk/types"
	_ "github.com/gogo/protobuf/gogoproto"
	proto "github.com/gogo/protobuf/proto"
	io "io"
	math "math"
	math_bits "math/bits"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.GoGoProtoPackageIsVersion3 // please upgrade the proto package

type Share struct {
	Owner       string                                 `protobuf:"bytes,1,opt,name=owner,proto3" json:"owner,omitempty"`
	Token0      string                                 `protobuf:"bytes,2,opt,name=token0,proto3" json:"token0,omitempty"`
	Token1      string                                 `protobuf:"bytes,3,opt,name=token1,proto3" json:"token1,omitempty"`
	Price       string                                 `protobuf:"bytes,4,opt,name=price,proto3" json:"price,omitempty"`
	Fee         string                                 `protobuf:"bytes,5,opt,name=fee,proto3" json:"fee,omitempty"`
	ShareAmount github_com_cosmos_cosmos_sdk_types.Dec `protobuf:"bytes,6,opt,name=shareAmount,proto3,customtype=github.com/cosmos/cosmos-sdk/types.Dec" json:"totalShares" yaml:"totalShares"`
}

func (m *Share) Reset()         { *m = Share{} }
func (m *Share) String() string { return proto.CompactTextString(m) }
func (*Share) ProtoMessage()    {}
func (*Share) Descriptor() ([]byte, []int) {
	return fileDescriptor_e8aac87fd5ccb63b, []int{0}
}
func (m *Share) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *Share) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_Share.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *Share) XXX_Merge(src proto.Message) {
	xxx_messageInfo_Share.Merge(m, src)
}
func (m *Share) XXX_Size() int {
	return m.Size()
}
func (m *Share) XXX_DiscardUnknown() {
	xxx_messageInfo_Share.DiscardUnknown(m)
}

var xxx_messageInfo_Share proto.InternalMessageInfo

func (m *Share) GetOwner() string {
	if m != nil {
		return m.Owner
	}
	return ""
}

func (m *Share) GetToken0() string {
	if m != nil {
		return m.Token0
	}
	return ""
}

func (m *Share) GetToken1() string {
	if m != nil {
		return m.Token1
	}
	return ""
}

func (m *Share) GetPrice() string {
	if m != nil {
		return m.Price
	}
	return ""
}

func (m *Share) GetFee() string {
	if m != nil {
		return m.Fee
	}
	return ""
}

func init() {
	proto.RegisterType((*Share)(nil), "nicholasdotsol.duality.dex.Share")
}

func init() { proto.RegisterFile("dex/share.proto", fileDescriptor_e8aac87fd5ccb63b) }

var fileDescriptor_e8aac87fd5ccb63b = []byte{
	// 300 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0x4c, 0x90, 0xb1, 0x4e, 0xeb, 0x30,
	0x18, 0x85, 0xe3, 0xdb, 0xdb, 0x4a, 0xb8, 0x03, 0xc8, 0xaa, 0x90, 0xd5, 0xc1, 0x41, 0x1d, 0x10,
	0x4b, 0x63, 0x2a, 0x36, 0x36, 0xaa, 0x4a, 0x6c, 0x0c, 0xed, 0xc6, 0x96, 0x26, 0xa6, 0x8d, 0xea,
	0xe4, 0x8f, 0x62, 0x47, 0x24, 0x6f, 0xc1, 0x63, 0x75, 0xec, 0x88, 0x18, 0x22, 0x94, 0x6c, 0x88,
	0x89, 0x27, 0x40, 0x76, 0x22, 0x94, 0xc9, 0xff, 0xf9, 0x6c, 0x9f, 0x63, 0x1f, 0x7c, 0x1e, 0x8a,
	0x82, 0xab, 0xbd, 0x9f, 0x09, 0x2f, 0xcd, 0x40, 0x03, 0x99, 0x26, 0x51, 0xb0, 0x07, 0xe9, 0xab,
	0x10, 0xb4, 0x02, 0xe9, 0x85, 0xb9, 0x2f, 0x23, 0x5d, 0x7a, 0xa1, 0x28, 0xa6, 0x93, 0x1d, 0xec,
	0xc0, 0x1e, 0xe3, 0x66, 0x6a, 0x6f, 0xcc, 0xbe, 0x11, 0x1e, 0x6e, 0x8c, 0x03, 0x99, 0xe0, 0x21,
	0xbc, 0x26, 0x22, 0xa3, 0xe8, 0x0a, 0xdd, 0x9c, 0xad, 0x5b, 0x41, 0x2e, 0xf1, 0x48, 0xc3, 0x41,
	0x24, 0xb7, 0xf4, 0x9f, 0xc5, 0x9d, 0xfa, 0xe3, 0x0b, 0x3a, 0xe8, 0xf1, 0x85, 0x71, 0x49, 0xb3,
	0x28, 0x10, 0xf4, 0x7f, 0xeb, 0x62, 0x05, 0xb9, 0xc0, 0x83, 0x17, 0x21, 0xe8, 0xd0, 0x32, 0x33,
	0x92, 0x1c, 0x8f, 0xed, 0xc3, 0x1f, 0x62, 0xc8, 0x13, 0x4d, 0x47, 0x66, 0x67, 0xb9, 0x39, 0x56,
	0xae, 0xf3, 0x51, 0xb9, 0xd7, 0xbb, 0x48, 0xef, 0xf3, 0xad, 0x17, 0x40, 0xcc, 0x03, 0x50, 0x31,
	0xa8, 0x6e, 0x99, 0xab, 0xf0, 0xc0, 0x75, 0x99, 0x0a, 0xe5, 0xad, 0x44, 0xf0, 0x55, 0xb9, 0x63,
	0x0d, 0xda, 0x97, 0xf6, 0x03, 0xea, 0xa7, 0x72, 0x49, 0xe9, 0xc7, 0xf2, 0x7e, 0xd6, 0x83, 0xb3,
	0x75, 0x3f, 0x67, 0xf9, 0x78, 0xac, 0x19, 0x3a, 0xd5, 0x0c, 0x7d, 0xd6, 0x0c, 0xbd, 0x35, 0xcc,
	0x39, 0x35, 0xcc, 0x79, 0x6f, 0x98, 0xf3, 0x3c, 0xef, 0x65, 0x3e, 0x75, 0x2d, 0xae, 0x40, 0x6f,
	0x40, 0xf2, 0xae, 0x45, 0x5e, 0x70, 0xd3, 0xb7, 0x8d, 0xdf, 0x8e, 0x6c, 0x7d, 0x77, 0xbf, 0x01,
	0x00, 0x00, 0xff, 0xff, 0xa0, 0x67, 0xd3, 0xde, 0x83, 0x01, 0x00, 0x00,
}

func (m *Share) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *Share) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *Share) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	{
		size := m.ShareAmount.Size()
		i -= size
		if _, err := m.ShareAmount.MarshalTo(dAtA[i:]); err != nil {
			return 0, err
		}
		i = encodeVarintShare(dAtA, i, uint64(size))
	}
	i--
	dAtA[i] = 0x32
	if len(m.Fee) > 0 {
		i -= len(m.Fee)
		copy(dAtA[i:], m.Fee)
		i = encodeVarintShare(dAtA, i, uint64(len(m.Fee)))
		i--
		dAtA[i] = 0x2a
	}
	if len(m.Price) > 0 {
		i -= len(m.Price)
		copy(dAtA[i:], m.Price)
		i = encodeVarintShare(dAtA, i, uint64(len(m.Price)))
		i--
		dAtA[i] = 0x22
	}
	if len(m.Token1) > 0 {
		i -= len(m.Token1)
		copy(dAtA[i:], m.Token1)
		i = encodeVarintShare(dAtA, i, uint64(len(m.Token1)))
		i--
		dAtA[i] = 0x1a
	}
	if len(m.Token0) > 0 {
		i -= len(m.Token0)
		copy(dAtA[i:], m.Token0)
		i = encodeVarintShare(dAtA, i, uint64(len(m.Token0)))
		i--
		dAtA[i] = 0x12
	}
	if len(m.Owner) > 0 {
		i -= len(m.Owner)
		copy(dAtA[i:], m.Owner)
		i = encodeVarintShare(dAtA, i, uint64(len(m.Owner)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func encodeVarintShare(dAtA []byte, offset int, v uint64) int {
	offset -= sovShare(v)
	base := offset
	for v >= 1<<7 {
		dAtA[offset] = uint8(v&0x7f | 0x80)
		v >>= 7
		offset++
	}
	dAtA[offset] = uint8(v)
	return base
}
func (m *Share) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.Owner)
	if l > 0 {
		n += 1 + l + sovShare(uint64(l))
	}
	l = len(m.Token0)
	if l > 0 {
		n += 1 + l + sovShare(uint64(l))
	}
	l = len(m.Token1)
	if l > 0 {
		n += 1 + l + sovShare(uint64(l))
	}
	l = len(m.Price)
	if l > 0 {
		n += 1 + l + sovShare(uint64(l))
	}
	l = len(m.Fee)
	if l > 0 {
		n += 1 + l + sovShare(uint64(l))
	}
	l = m.ShareAmount.Size()
	n += 1 + l + sovShare(uint64(l))
	return n
}

func sovShare(x uint64) (n int) {
	return (math_bits.Len64(x|1) + 6) / 7
}
func sozShare(x uint64) (n int) {
	return sovShare(uint64((x << 1) ^ uint64((int64(x) >> 63))))
}
func (m *Share) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowShare
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: Share: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: Share: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Owner", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowShare
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthShare
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthShare
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Owner = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Token0", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowShare
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthShare
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthShare
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Token0 = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Token1", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowShare
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthShare
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthShare
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Token1 = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Price", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowShare
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthShare
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthShare
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Price = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 5:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Fee", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowShare
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthShare
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthShare
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Fee = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 6:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ShareAmount", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowShare
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthShare
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthShare
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := m.ShareAmount.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipShare(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthShare
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func skipShare(dAtA []byte) (n int, err error) {
	l := len(dAtA)
	iNdEx := 0
	depth := 0
	for iNdEx < l {
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return 0, ErrIntOverflowShare
			}
			if iNdEx >= l {
				return 0, io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		wireType := int(wire & 0x7)
		switch wireType {
		case 0:
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowShare
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				iNdEx++
				if dAtA[iNdEx-1] < 0x80 {
					break
				}
			}
		case 1:
			iNdEx += 8
		case 2:
			var length int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowShare
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				length |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if length < 0 {
				return 0, ErrInvalidLengthShare
			}
			iNdEx += length
		case 3:
			depth++
		case 4:
			if depth == 0 {
				return 0, ErrUnexpectedEndOfGroupShare
			}
			depth--
		case 5:
			iNdEx += 4
		default:
			return 0, fmt.Errorf("proto: illegal wireType %d", wireType)
		}
		if iNdEx < 0 {
			return 0, ErrInvalidLengthShare
		}
		if depth == 0 {
			return iNdEx, nil
		}
	}
	return 0, io.ErrUnexpectedEOF
}

var (
	ErrInvalidLengthShare        = fmt.Errorf("proto: negative length found during unmarshaling")
	ErrIntOverflowShare          = fmt.Errorf("proto: integer overflow")
	ErrUnexpectedEndOfGroupShare = fmt.Errorf("proto: unexpected end of group")
)
