// Code generated by protoc-gen-gogo. DO NOT EDIT.
// source: dex/pair_object.proto

package types

import (
	fmt "fmt"
	proto "github.com/gogo/protobuf/proto"
	io "io"
	math "math"
	math_bits "math/bits"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.GoGoProtoPackageIsVersion3 // please upgrade the proto package

type PairObject struct {
	PairId         string         `protobuf:"bytes,1,opt,name=pairId,proto3" json:"pairId,omitempty"`
	TokenPair      *TokenPairType `protobuf:"bytes,2,opt,name=tokenPair,proto3" json:"tokenPair,omitempty"`
	TotalTickCount int64          `protobuf:"varint,3,opt,name=totalTickCount,proto3" json:"totalTickCount,omitempty"`
}

func (m *PairObject) Reset()         { *m = PairObject{} }
func (m *PairObject) String() string { return proto.CompactTextString(m) }
func (*PairObject) ProtoMessage()    {}
func (*PairObject) Descriptor() ([]byte, []int) {
	return fileDescriptor_61a6219a3f2b6444, []int{0}
}
func (m *PairObject) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *PairObject) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_PairObject.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *PairObject) XXX_Merge(src proto.Message) {
	xxx_messageInfo_PairObject.Merge(m, src)
}
func (m *PairObject) XXX_Size() int {
	return m.Size()
}
func (m *PairObject) XXX_DiscardUnknown() {
	xxx_messageInfo_PairObject.DiscardUnknown(m)
}

var xxx_messageInfo_PairObject proto.InternalMessageInfo

func (m *PairObject) GetPairId() string {
	if m != nil {
		return m.PairId
	}
	return ""
}

func (m *PairObject) GetTokenPair() *TokenPairType {
	if m != nil {
		return m.TokenPair
	}
	return nil
}

func (m *PairObject) GetTotalTickCount() int64 {
	if m != nil {
		return m.TotalTickCount
	}
	return 0
}

func init() {
	proto.RegisterType((*PairObject)(nil), "nicholasdotsol.duality.dex.PairObject")
}

func init() { proto.RegisterFile("dex/pair_object.proto", fileDescriptor_61a6219a3f2b6444) }

var fileDescriptor_61a6219a3f2b6444 = []byte{
	// 247 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0xe2, 0x12, 0x4d, 0x49, 0xad, 0xd0,
	0x2f, 0x48, 0xcc, 0x2c, 0x8a, 0xcf, 0x4f, 0xca, 0x4a, 0x4d, 0x2e, 0xd1, 0x2b, 0x28, 0xca, 0x2f,
	0xc9, 0x17, 0x92, 0xca, 0xcb, 0x4c, 0xce, 0xc8, 0xcf, 0x49, 0x2c, 0x4e, 0xc9, 0x2f, 0x29, 0xce,
	0xcf, 0xd1, 0x4b, 0x29, 0x4d, 0xcc, 0xc9, 0x2c, 0xa9, 0xd4, 0x4b, 0x49, 0xad, 0x90, 0x92, 0x04,
	0x69, 0x29, 0xc9, 0xcf, 0x4e, 0xcd, 0x8b, 0x07, 0x6b, 0x2c, 0xa9, 0x2c, 0x48, 0x85, 0x68, 0x53,
	0x9a, 0xca, 0xc8, 0xc5, 0x15, 0x90, 0x98, 0x59, 0xe4, 0x0f, 0x36, 0x4b, 0x48, 0x8c, 0x8b, 0x0d,
	0xa4, 0xc2, 0x33, 0x45, 0x82, 0x51, 0x81, 0x51, 0x83, 0x33, 0x08, 0xca, 0x13, 0x72, 0xe7, 0xe2,
	0x04, 0xeb, 0x07, 0x29, 0x95, 0x60, 0x52, 0x60, 0xd4, 0xe0, 0x36, 0xd2, 0xd4, 0xc3, 0x6d, 0xa3,
	0x5e, 0x08, 0x4c, 0x71, 0x48, 0x65, 0x41, 0x6a, 0x10, 0x42, 0xaf, 0x90, 0x1a, 0x17, 0x5f, 0x49,
	0x7e, 0x49, 0x62, 0x4e, 0x48, 0x66, 0x72, 0xb6, 0x73, 0x7e, 0x69, 0x5e, 0x89, 0x04, 0xb3, 0x02,
	0xa3, 0x06, 0x73, 0x10, 0x9a, 0xa8, 0x93, 0xfb, 0x89, 0x47, 0x72, 0x8c, 0x17, 0x1e, 0xc9, 0x31,
	0x3e, 0x78, 0x24, 0xc7, 0x38, 0xe1, 0xb1, 0x1c, 0xc3, 0x85, 0xc7, 0x72, 0x0c, 0x37, 0x1e, 0xcb,
	0x31, 0x44, 0xe9, 0xa6, 0x67, 0x96, 0x64, 0x94, 0x26, 0xe9, 0x25, 0xe7, 0xe7, 0xea, 0xfb, 0x41,
	0x5d, 0xe0, 0x92, 0x5f, 0x12, 0x9c, 0x9f, 0xa3, 0x0f, 0x75, 0x81, 0x7e, 0x85, 0x3e, 0xd8, 0xc3,
	0x95, 0x05, 0xa9, 0xc5, 0x49, 0x6c, 0x60, 0x7f, 0x1a, 0x03, 0x02, 0x00, 0x00, 0xff, 0xff, 0x09,
	0xa0, 0x34, 0x4c, 0x37, 0x01, 0x00, 0x00,
}

func (m *PairObject) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *PairObject) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *PairObject) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.TotalTickCount != 0 {
		i = encodeVarintPairObject(dAtA, i, uint64(m.TotalTickCount))
		i--
		dAtA[i] = 0x18
	}
	if m.TokenPair != nil {
		{
			size, err := m.TokenPair.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintPairObject(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x12
	}
	if len(m.PairId) > 0 {
		i -= len(m.PairId)
		copy(dAtA[i:], m.PairId)
		i = encodeVarintPairObject(dAtA, i, uint64(len(m.PairId)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func encodeVarintPairObject(dAtA []byte, offset int, v uint64) int {
	offset -= sovPairObject(v)
	base := offset
	for v >= 1<<7 {
		dAtA[offset] = uint8(v&0x7f | 0x80)
		v >>= 7
		offset++
	}
	dAtA[offset] = uint8(v)
	return base
}
func (m *PairObject) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.PairId)
	if l > 0 {
		n += 1 + l + sovPairObject(uint64(l))
	}
	if m.TokenPair != nil {
		l = m.TokenPair.Size()
		n += 1 + l + sovPairObject(uint64(l))
	}
	if m.TotalTickCount != 0 {
		n += 1 + sovPairObject(uint64(m.TotalTickCount))
	}
	return n
}

func sovPairObject(x uint64) (n int) {
	return (math_bits.Len64(x|1) + 6) / 7
}
func sozPairObject(x uint64) (n int) {
	return sovPairObject(uint64((x << 1) ^ uint64((int64(x) >> 63))))
}
func (m *PairObject) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowPairObject
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: PairObject: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: PairObject: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field PairId", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPairObject
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthPairObject
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthPairObject
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.PairId = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field TokenPair", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPairObject
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthPairObject
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthPairObject
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.TokenPair == nil {
				m.TokenPair = &TokenPairType{}
			}
			if err := m.TokenPair.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 3:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field TotalTickCount", wireType)
			}
			m.TotalTickCount = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPairObject
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.TotalTickCount |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipPairObject(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthPairObject
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func skipPairObject(dAtA []byte) (n int, err error) {
	l := len(dAtA)
	iNdEx := 0
	depth := 0
	for iNdEx < l {
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return 0, ErrIntOverflowPairObject
			}
			if iNdEx >= l {
				return 0, io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		wireType := int(wire & 0x7)
		switch wireType {
		case 0:
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowPairObject
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				iNdEx++
				if dAtA[iNdEx-1] < 0x80 {
					break
				}
			}
		case 1:
			iNdEx += 8
		case 2:
			var length int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowPairObject
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				length |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if length < 0 {
				return 0, ErrInvalidLengthPairObject
			}
			iNdEx += length
		case 3:
			depth++
		case 4:
			if depth == 0 {
				return 0, ErrUnexpectedEndOfGroupPairObject
			}
			depth--
		case 5:
			iNdEx += 4
		default:
			return 0, fmt.Errorf("proto: illegal wireType %d", wireType)
		}
		if iNdEx < 0 {
			return 0, ErrInvalidLengthPairObject
		}
		if depth == 0 {
			return iNdEx, nil
		}
	}
	return 0, io.ErrUnexpectedEOF
}

var (
	ErrInvalidLengthPairObject        = fmt.Errorf("proto: negative length found during unmarshaling")
	ErrIntOverflowPairObject          = fmt.Errorf("proto: integer overflow")
	ErrUnexpectedEndOfGroupPairObject = fmt.Errorf("proto: unexpected end of group")
)
