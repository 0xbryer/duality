// Code generated by protoc-gen-gogo. DO NOT EDIT.
// source: dex/limit_order_pool_user_share_map.proto

package types

import (
	fmt "fmt"
	github_com_cosmos_cosmos_sdk_types "github.com/cosmos/cosmos-sdk/types"
	_ "github.com/gogo/protobuf/gogoproto"
	proto "github.com/gogo/protobuf/proto"
	io "io"
	math "math"
	math_bits "math/bits"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.GoGoProtoPackageIsVersion3 // please upgrade the proto package

type LimitOrderPoolUserShareMap struct {
	Count       uint64                                 `protobuf:"varint,1,opt,name=count,proto3" json:"count,omitempty"`
	Address     string                                 `protobuf:"bytes,2,opt,name=address,proto3" json:"address,omitempty"`
	SharesOwned github_com_cosmos_cosmos_sdk_types.Dec `protobuf:"bytes,3,opt,name=sharesOwned,proto3,customtype=github.com/cosmos/cosmos-sdk/types.Dec" json:"sharesOwned" yaml:"sharesOwned"`
}

func (m *LimitOrderPoolUserShareMap) Reset()         { *m = LimitOrderPoolUserShareMap{} }
func (m *LimitOrderPoolUserShareMap) String() string { return proto.CompactTextString(m) }
func (*LimitOrderPoolUserShareMap) ProtoMessage()    {}
func (*LimitOrderPoolUserShareMap) Descriptor() ([]byte, []int) {
	return fileDescriptor_948654eb44426d87, []int{0}
}
func (m *LimitOrderPoolUserShareMap) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *LimitOrderPoolUserShareMap) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_LimitOrderPoolUserShareMap.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *LimitOrderPoolUserShareMap) XXX_Merge(src proto.Message) {
	xxx_messageInfo_LimitOrderPoolUserShareMap.Merge(m, src)
}
func (m *LimitOrderPoolUserShareMap) XXX_Size() int {
	return m.Size()
}
func (m *LimitOrderPoolUserShareMap) XXX_DiscardUnknown() {
	xxx_messageInfo_LimitOrderPoolUserShareMap.DiscardUnknown(m)
}

var xxx_messageInfo_LimitOrderPoolUserShareMap proto.InternalMessageInfo

func (m *LimitOrderPoolUserShareMap) GetCount() uint64 {
	if m != nil {
		return m.Count
	}
	return 0
}

func (m *LimitOrderPoolUserShareMap) GetAddress() string {
	if m != nil {
		return m.Address
	}
	return ""
}

func init() {
	proto.RegisterType((*LimitOrderPoolUserShareMap)(nil), "nicholasdotsol.duality.dex.LimitOrderPoolUserShareMap")
}

func init() {
	proto.RegisterFile("dex/limit_order_pool_user_share_map.proto", fileDescriptor_948654eb44426d87)
}

var fileDescriptor_948654eb44426d87 = []byte{
	// 302 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0x4c, 0x90, 0xbd, 0x4e, 0xc3, 0x30,
	0x14, 0x85, 0x63, 0x7e, 0x45, 0xd8, 0xa2, 0x0e, 0x51, 0x07, 0xa7, 0xea, 0x80, 0xca, 0xd0, 0x78,
	0x60, 0x63, 0xac, 0x2a, 0xb1, 0x00, 0x45, 0xad, 0x58, 0x58, 0x22, 0x37, 0xb6, 0xda, 0x08, 0xa7,
	0x37, 0xf2, 0x75, 0x44, 0xf3, 0x16, 0xbc, 0x13, 0x4b, 0xc7, 0x8e, 0x88, 0x21, 0x42, 0xc9, 0xc6,
	0xc8, 0x13, 0x20, 0xa7, 0x41, 0xca, 0x64, 0x5f, 0xfb, 0xf8, 0x3b, 0xd6, 0xe7, 0x5e, 0x0b, 0xb9,
	0x65, 0x2a, 0x49, 0x13, 0x13, 0x81, 0x16, 0x52, 0x47, 0x19, 0x80, 0x8a, 0x72, 0x94, 0x3a, 0xc2,
	0x35, 0xd7, 0x32, 0x4a, 0x79, 0x16, 0x66, 0x1a, 0x0c, 0x78, 0xfd, 0x4d, 0x12, 0xaf, 0x41, 0x71,
	0x14, 0x60, 0x10, 0x54, 0x28, 0x72, 0xae, 0x12, 0x53, 0x84, 0x42, 0x6e, 0xfb, 0xbd, 0x15, 0xac,
	0xa0, 0x89, 0x31, 0xbb, 0x3b, 0xbc, 0x18, 0x7e, 0x10, 0xb7, 0x7f, 0x6f, 0xd9, 0x33, 0x8b, 0x7e,
	0x02, 0x50, 0xcf, 0x28, 0xf5, 0xc2, 0x72, 0x1f, 0x78, 0xe6, 0xf5, 0xdc, 0xd3, 0x18, 0xf2, 0x8d,
	0xf1, 0xc9, 0x80, 0x8c, 0x4e, 0xe6, 0x87, 0xc1, 0xf3, 0xdd, 0x73, 0x2e, 0x84, 0x96, 0x88, 0xfe,
	0xd1, 0x80, 0x8c, 0x2e, 0xe6, 0xff, 0xa3, 0x97, 0xbb, 0x97, 0xcd, 0x9f, 0x70, 0xf6, 0xb6, 0x91,
	0xc2, 0x3f, 0xb6, 0xb7, 0x93, 0xc5, 0xae, 0x0c, 0x9c, 0xaf, 0x32, 0xb8, 0x5a, 0x25, 0x66, 0x9d,
	0x2f, 0xc3, 0x18, 0x52, 0x16, 0x03, 0xa6, 0x80, 0xed, 0x32, 0x46, 0xf1, 0xca, 0x4c, 0x91, 0x49,
	0x0c, 0xa7, 0x32, 0xfe, 0x29, 0x83, 0x2e, 0xe4, 0xb7, 0x0c, 0xbc, 0x82, 0xa7, 0xea, 0x76, 0xd8,
	0x39, 0x1c, 0xce, 0xbb, 0x91, 0xc9, 0xdd, 0xae, 0xa2, 0x64, 0x5f, 0x51, 0xf2, 0x5d, 0x51, 0xf2,
	0x5e, 0x53, 0x67, 0x5f, 0x53, 0xe7, 0xb3, 0xa6, 0xce, 0xcb, 0xb8, 0xd3, 0xf9, 0xd8, 0xca, 0x99,
	0x82, 0x59, 0x80, 0x62, 0xad, 0x1c, 0xb6, 0x65, 0x56, 0x70, 0x53, 0xbf, 0x3c, 0x6b, 0xac, 0xdc,
	0xfc, 0x05, 0x00, 0x00, 0xff, 0xff, 0x49, 0x51, 0x40, 0x51, 0x74, 0x01, 0x00, 0x00,
}

func (m *LimitOrderPoolUserShareMap) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *LimitOrderPoolUserShareMap) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *LimitOrderPoolUserShareMap) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	{
		size := m.SharesOwned.Size()
		i -= size
		if _, err := m.SharesOwned.MarshalTo(dAtA[i:]); err != nil {
			return 0, err
		}
		i = encodeVarintLimitOrderPoolUserShareMap(dAtA, i, uint64(size))
	}
	i--
	dAtA[i] = 0x1a
	if len(m.Address) > 0 {
		i -= len(m.Address)
		copy(dAtA[i:], m.Address)
		i = encodeVarintLimitOrderPoolUserShareMap(dAtA, i, uint64(len(m.Address)))
		i--
		dAtA[i] = 0x12
	}
	if m.Count != 0 {
		i = encodeVarintLimitOrderPoolUserShareMap(dAtA, i, uint64(m.Count))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func encodeVarintLimitOrderPoolUserShareMap(dAtA []byte, offset int, v uint64) int {
	offset -= sovLimitOrderPoolUserShareMap(v)
	base := offset
	for v >= 1<<7 {
		dAtA[offset] = uint8(v&0x7f | 0x80)
		v >>= 7
		offset++
	}
	dAtA[offset] = uint8(v)
	return base
}
func (m *LimitOrderPoolUserShareMap) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Count != 0 {
		n += 1 + sovLimitOrderPoolUserShareMap(uint64(m.Count))
	}
	l = len(m.Address)
	if l > 0 {
		n += 1 + l + sovLimitOrderPoolUserShareMap(uint64(l))
	}
	l = m.SharesOwned.Size()
	n += 1 + l + sovLimitOrderPoolUserShareMap(uint64(l))
	return n
}

func sovLimitOrderPoolUserShareMap(x uint64) (n int) {
	return (math_bits.Len64(x|1) + 6) / 7
}
func sozLimitOrderPoolUserShareMap(x uint64) (n int) {
	return sovLimitOrderPoolUserShareMap(uint64((x << 1) ^ uint64((int64(x) >> 63))))
}
func (m *LimitOrderPoolUserShareMap) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowLimitOrderPoolUserShareMap
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: LimitOrderPoolUserShareMap: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: LimitOrderPoolUserShareMap: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Count", wireType)
			}
			m.Count = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowLimitOrderPoolUserShareMap
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Count |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Address", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowLimitOrderPoolUserShareMap
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthLimitOrderPoolUserShareMap
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthLimitOrderPoolUserShareMap
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Address = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field SharesOwned", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowLimitOrderPoolUserShareMap
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthLimitOrderPoolUserShareMap
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthLimitOrderPoolUserShareMap
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := m.SharesOwned.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipLimitOrderPoolUserShareMap(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthLimitOrderPoolUserShareMap
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func skipLimitOrderPoolUserShareMap(dAtA []byte) (n int, err error) {
	l := len(dAtA)
	iNdEx := 0
	depth := 0
	for iNdEx < l {
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return 0, ErrIntOverflowLimitOrderPoolUserShareMap
			}
			if iNdEx >= l {
				return 0, io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		wireType := int(wire & 0x7)
		switch wireType {
		case 0:
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowLimitOrderPoolUserShareMap
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				iNdEx++
				if dAtA[iNdEx-1] < 0x80 {
					break
				}
			}
		case 1:
			iNdEx += 8
		case 2:
			var length int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowLimitOrderPoolUserShareMap
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				length |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if length < 0 {
				return 0, ErrInvalidLengthLimitOrderPoolUserShareMap
			}
			iNdEx += length
		case 3:
			depth++
		case 4:
			if depth == 0 {
				return 0, ErrUnexpectedEndOfGroupLimitOrderPoolUserShareMap
			}
			depth--
		case 5:
			iNdEx += 4
		default:
			return 0, fmt.Errorf("proto: illegal wireType %d", wireType)
		}
		if iNdEx < 0 {
			return 0, ErrInvalidLengthLimitOrderPoolUserShareMap
		}
		if depth == 0 {
			return iNdEx, nil
		}
	}
	return 0, io.ErrUnexpectedEOF
}

var (
	ErrInvalidLengthLimitOrderPoolUserShareMap        = fmt.Errorf("proto: negative length found during unmarshaling")
	ErrIntOverflowLimitOrderPoolUserShareMap          = fmt.Errorf("proto: integer overflow")
	ErrUnexpectedEndOfGroupLimitOrderPoolUserShareMap = fmt.Errorf("proto: unexpected end of group")
)
