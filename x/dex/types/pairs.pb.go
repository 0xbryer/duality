// Code generated by protoc-gen-gogo. DO NOT EDIT.
// source: dex/pairs.proto

package types

import (
	fmt "fmt"
	proto "github.com/gogo/protobuf/proto"
	io "io"
	math "math"
	math_bits "math/bits"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.GoGoProtoPackageIsVersion3 // please upgrade the proto package

type Pairs struct {
	Token0       string      `protobuf:"bytes,1,opt,name=token0,proto3" json:"token0,omitempty"`
	Token1       string      `protobuf:"bytes,2,opt,name=token1,proto3" json:"token1,omitempty"`
	TickSpacing  int64       `protobuf:"varint,3,opt,name=tickSpacing,proto3" json:"tickSpacing,omitempty"`
	CurrentIndex int32       `protobuf:"varint,4,opt,name=currentIndex,proto3" json:"currentIndex,omitempty"`
	Tickmap      *Ticks      `protobuf:"bytes,5,opt,name=tickmap,proto3" json:"tickmap,omitempty"`
	IndexMap     *IndexQueue `protobuf:"bytes,6,opt,name=IndexMap,proto3" json:"IndexMap,omitempty"`
}

func (m *Pairs) Reset()         { *m = Pairs{} }
func (m *Pairs) String() string { return proto.CompactTextString(m) }
func (*Pairs) ProtoMessage()    {}
func (*Pairs) Descriptor() ([]byte, []int) {
	return fileDescriptor_c56cd091ef666eff, []int{0}
}
func (m *Pairs) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *Pairs) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_Pairs.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *Pairs) XXX_Merge(src proto.Message) {
	xxx_messageInfo_Pairs.Merge(m, src)
}
func (m *Pairs) XXX_Size() int {
	return m.Size()
}
func (m *Pairs) XXX_DiscardUnknown() {
	xxx_messageInfo_Pairs.DiscardUnknown(m)
}

var xxx_messageInfo_Pairs proto.InternalMessageInfo

func (m *Pairs) GetToken0() string {
	if m != nil {
		return m.Token0
	}
	return ""
}

func (m *Pairs) GetToken1() string {
	if m != nil {
		return m.Token1
	}
	return ""
}

func (m *Pairs) GetTickSpacing() int64 {
	if m != nil {
		return m.TickSpacing
	}
	return 0
}

func (m *Pairs) GetCurrentIndex() int32 {
	if m != nil {
		return m.CurrentIndex
	}
	return 0
}

func (m *Pairs) GetTickmap() *Ticks {
	if m != nil {
		return m.Tickmap
	}
	return nil
}

func (m *Pairs) GetIndexMap() *IndexQueue {
	if m != nil {
		return m.IndexMap
	}
	return nil
}

func init() {
	proto.RegisterType((*Pairs)(nil), "nicholasdotsol.duality.dex.Pairs")
}

func init() { proto.RegisterFile("dex/pairs.proto", fileDescriptor_c56cd091ef666eff) }

var fileDescriptor_c56cd091ef666eff = []byte{
	// 293 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0x7c, 0x90, 0xc1, 0x4a, 0xc3, 0x30,
	0x1c, 0xc6, 0x1b, 0x67, 0xab, 0x66, 0x82, 0x10, 0x50, 0x42, 0x0f, 0xa1, 0xee, 0x20, 0xbd, 0x98,
	0x3a, 0x3d, 0x7a, 0x1b, 0x82, 0x78, 0x50, 0xb4, 0xf3, 0xe4, 0x45, 0xb2, 0x36, 0x6c, 0x61, 0x5d,
	0x13, 0xdb, 0x14, 0xba, 0xb7, 0xf0, 0xb1, 0x3c, 0xee, 0xe8, 0x51, 0xda, 0xf7, 0x10, 0x49, 0xac,
	0x63, 0x1e, 0xf4, 0x98, 0x1f, 0xdf, 0xf7, 0x0b, 0xdf, 0x1f, 0x1e, 0xa4, 0xbc, 0x8e, 0x14, 0x13,
	0x45, 0x49, 0x55, 0x21, 0xb5, 0x44, 0x7e, 0x2e, 0x92, 0x99, 0xcc, 0x58, 0x99, 0x4a, 0x5d, 0xca,
	0x8c, 0xa6, 0x15, 0xcb, 0x84, 0x5e, 0xd2, 0x94, 0xd7, 0xbe, 0x0d, 0x6b, 0x91, 0xcc, 0xbb, 0xb0,
	0x7f, 0x68, 0x80, 0xc8, 0x53, 0x5e, 0x3f, 0xbf, 0x54, 0xbc, 0xe2, 0xdf, 0x78, 0xf0, 0x09, 0xa0,
	0x7b, 0x6f, 0x9c, 0xe8, 0x08, 0x7a, 0x5a, 0xce, 0x79, 0x7e, 0x86, 0x41, 0x00, 0xc2, 0xbd, 0xb8,
	0x7b, 0xad, 0xf9, 0x10, 0x6f, 0x6d, 0xf0, 0x21, 0x0a, 0x60, 0xdf, 0xf8, 0xc7, 0x8a, 0x25, 0x22,
	0x9f, 0xe2, 0x5e, 0x00, 0xc2, 0x5e, 0xbc, 0x89, 0xd0, 0x00, 0xee, 0x27, 0x55, 0x51, 0xf0, 0x5c,
	0xdf, 0x98, 0x7f, 0xf1, 0x76, 0x00, 0x42, 0x37, 0xfe, 0xc5, 0xd0, 0x25, 0xdc, 0x31, 0x95, 0x05,
	0x53, 0xd8, 0x0d, 0x40, 0xd8, 0x3f, 0x3f, 0xa6, 0x7f, 0xaf, 0xa2, 0x8f, 0x66, 0x50, 0xfc, 0xd3,
	0x40, 0x23, 0xb8, 0x6b, 0x2d, 0xb7, 0x4c, 0x61, 0xcf, 0xb6, 0x4f, 0xfe, 0x6b, 0xdb, 0xec, 0x83,
	0x19, 0x1f, 0xaf, 0x7b, 0xa3, 0xeb, 0xb7, 0x86, 0x80, 0x55, 0x43, 0xc0, 0x47, 0x43, 0xc0, 0x6b,
	0x4b, 0x9c, 0x55, 0x4b, 0x9c, 0xf7, 0x96, 0x38, 0x4f, 0xa7, 0x53, 0xa1, 0x67, 0xd5, 0x84, 0x26,
	0x72, 0x11, 0xdd, 0x75, 0xd6, 0x2b, 0xa9, 0xc7, 0x32, 0x8b, 0x3a, 0x6b, 0x54, 0x47, 0xf6, 0xcc,
	0x4b, 0xc5, 0xcb, 0x89, 0x67, 0x0f, 0x7a, 0xf1, 0x15, 0x00, 0x00, 0xff, 0xff, 0x29, 0xb0, 0x67,
	0x44, 0xa7, 0x01, 0x00, 0x00,
}

func (m *Pairs) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *Pairs) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *Pairs) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.IndexMap != nil {
		{
			size, err := m.IndexMap.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintPairs(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x32
	}
	if m.Tickmap != nil {
		{
			size, err := m.Tickmap.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintPairs(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x2a
	}
	if m.CurrentIndex != 0 {
		i = encodeVarintPairs(dAtA, i, uint64(m.CurrentIndex))
		i--
		dAtA[i] = 0x20
	}
	if m.TickSpacing != 0 {
		i = encodeVarintPairs(dAtA, i, uint64(m.TickSpacing))
		i--
		dAtA[i] = 0x18
	}
	if len(m.Token1) > 0 {
		i -= len(m.Token1)
		copy(dAtA[i:], m.Token1)
		i = encodeVarintPairs(dAtA, i, uint64(len(m.Token1)))
		i--
		dAtA[i] = 0x12
	}
	if len(m.Token0) > 0 {
		i -= len(m.Token0)
		copy(dAtA[i:], m.Token0)
		i = encodeVarintPairs(dAtA, i, uint64(len(m.Token0)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func encodeVarintPairs(dAtA []byte, offset int, v uint64) int {
	offset -= sovPairs(v)
	base := offset
	for v >= 1<<7 {
		dAtA[offset] = uint8(v&0x7f | 0x80)
		v >>= 7
		offset++
	}
	dAtA[offset] = uint8(v)
	return base
}
func (m *Pairs) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.Token0)
	if l > 0 {
		n += 1 + l + sovPairs(uint64(l))
	}
	l = len(m.Token1)
	if l > 0 {
		n += 1 + l + sovPairs(uint64(l))
	}
	if m.TickSpacing != 0 {
		n += 1 + sovPairs(uint64(m.TickSpacing))
	}
	if m.CurrentIndex != 0 {
		n += 1 + sovPairs(uint64(m.CurrentIndex))
	}
	if m.Tickmap != nil {
		l = m.Tickmap.Size()
		n += 1 + l + sovPairs(uint64(l))
	}
	if m.IndexMap != nil {
		l = m.IndexMap.Size()
		n += 1 + l + sovPairs(uint64(l))
	}
	return n
}

func sovPairs(x uint64) (n int) {
	return (math_bits.Len64(x|1) + 6) / 7
}
func sozPairs(x uint64) (n int) {
	return sovPairs(uint64((x << 1) ^ uint64((int64(x) >> 63))))
}
func (m *Pairs) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowPairs
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: Pairs: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: Pairs: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Token0", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPairs
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthPairs
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthPairs
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Token0 = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Token1", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPairs
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthPairs
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthPairs
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Token1 = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 3:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field TickSpacing", wireType)
			}
			m.TickSpacing = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPairs
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.TickSpacing |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 4:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field CurrentIndex", wireType)
			}
			m.CurrentIndex = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPairs
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.CurrentIndex |= int32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 5:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Tickmap", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPairs
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthPairs
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthPairs
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Tickmap == nil {
				m.Tickmap = &Ticks{}
			}
			if err := m.Tickmap.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 6:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field IndexMap", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPairs
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthPairs
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthPairs
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.IndexMap == nil {
				m.IndexMap = &IndexQueue{}
			}
			if err := m.IndexMap.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipPairs(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthPairs
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func skipPairs(dAtA []byte) (n int, err error) {
	l := len(dAtA)
	iNdEx := 0
	depth := 0
	for iNdEx < l {
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return 0, ErrIntOverflowPairs
			}
			if iNdEx >= l {
				return 0, io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		wireType := int(wire & 0x7)
		switch wireType {
		case 0:
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowPairs
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				iNdEx++
				if dAtA[iNdEx-1] < 0x80 {
					break
				}
			}
		case 1:
			iNdEx += 8
		case 2:
			var length int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowPairs
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				length |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if length < 0 {
				return 0, ErrInvalidLengthPairs
			}
			iNdEx += length
		case 3:
			depth++
		case 4:
			if depth == 0 {
				return 0, ErrUnexpectedEndOfGroupPairs
			}
			depth--
		case 5:
			iNdEx += 4
		default:
			return 0, fmt.Errorf("proto: illegal wireType %d", wireType)
		}
		if iNdEx < 0 {
			return 0, ErrInvalidLengthPairs
		}
		if depth == 0 {
			return iNdEx, nil
		}
	}
	return 0, io.ErrUnexpectedEOF
}

var (
	ErrInvalidLengthPairs        = fmt.Errorf("proto: negative length found during unmarshaling")
	ErrIntOverflowPairs          = fmt.Errorf("proto: integer overflow")
	ErrUnexpectedEndOfGroupPairs = fmt.Errorf("proto: unexpected end of group")
)
