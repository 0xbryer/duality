// Code generated by protoc-gen-gogo. DO NOT EDIT.
// source: dex/limit_order_pool_total_shares_map.proto

package types

import (
	fmt "fmt"
	github_com_cosmos_cosmos_sdk_types "github.com/cosmos/cosmos-sdk/types"
	_ "github.com/gogo/protobuf/gogoproto"
	proto "github.com/gogo/protobuf/proto"
	io "io"
	math "math"
	math_bits "math/bits"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.GoGoProtoPackageIsVersion3 // please upgrade the proto package

type LimitOrderPoolTotalSharesMap struct {
	Token       string                                 `protobuf:"bytes,1,opt,name=token,proto3" json:"token,omitempty"`
	TickIndex   int64                                  `protobuf:"varint,2,opt,name=tickIndex,proto3" json:"tickIndex,omitempty"`
	Count       uint64                                 `protobuf:"varint,3,opt,name=count,proto3" json:"count,omitempty"`
	TotalShares github_com_cosmos_cosmos_sdk_types.Dec `protobuf:"bytes,4,opt,name=totalShares,proto3,customtype=github.com/cosmos/cosmos-sdk/types.Dec" json:"totalShares" yaml:"totalShares"`
}

func (m *LimitOrderPoolTotalSharesMap) Reset()         { *m = LimitOrderPoolTotalSharesMap{} }
func (m *LimitOrderPoolTotalSharesMap) String() string { return proto.CompactTextString(m) }
func (*LimitOrderPoolTotalSharesMap) ProtoMessage()    {}
func (*LimitOrderPoolTotalSharesMap) Descriptor() ([]byte, []int) {
	return fileDescriptor_da0d15e5c08e1bd4, []int{0}
}
func (m *LimitOrderPoolTotalSharesMap) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *LimitOrderPoolTotalSharesMap) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_LimitOrderPoolTotalSharesMap.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *LimitOrderPoolTotalSharesMap) XXX_Merge(src proto.Message) {
	xxx_messageInfo_LimitOrderPoolTotalSharesMap.Merge(m, src)
}
func (m *LimitOrderPoolTotalSharesMap) XXX_Size() int {
	return m.Size()
}
func (m *LimitOrderPoolTotalSharesMap) XXX_DiscardUnknown() {
	xxx_messageInfo_LimitOrderPoolTotalSharesMap.DiscardUnknown(m)
}

var xxx_messageInfo_LimitOrderPoolTotalSharesMap proto.InternalMessageInfo

func (m *LimitOrderPoolTotalSharesMap) GetToken() string {
	if m != nil {
		return m.Token
	}
	return ""
}

func (m *LimitOrderPoolTotalSharesMap) GetTickIndex() int64 {
	if m != nil {
		return m.TickIndex
	}
	return 0
}

func (m *LimitOrderPoolTotalSharesMap) GetCount() uint64 {
	if m != nil {
		return m.Count
	}
	return 0
}

func init() {
	proto.RegisterType((*LimitOrderPoolTotalSharesMap)(nil), "nicholasdotsol.duality.dex.LimitOrderPoolTotalSharesMap")
}

func init() {
	proto.RegisterFile("dex/limit_order_pool_total_shares_map.proto", fileDescriptor_da0d15e5c08e1bd4)
}

var fileDescriptor_da0d15e5c08e1bd4 = []byte{
	// 314 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0x4c, 0x90, 0xbd, 0x6a, 0xf3, 0x30,
	0x14, 0x86, 0xad, 0x2f, 0xf9, 0x0a, 0x71, 0x37, 0x93, 0xc1, 0x84, 0x60, 0x87, 0x0c, 0x25, 0x50,
	0x62, 0x0d, 0xdd, 0x3a, 0x86, 0x40, 0x29, 0xf4, 0x0f, 0xa7, 0x53, 0x17, 0xa3, 0x58, 0x22, 0x11,
	0x91, 0x7d, 0x8c, 0x75, 0x0c, 0xce, 0x5d, 0xf4, 0xb2, 0x32, 0x66, 0x2c, 0x1d, 0xdc, 0x92, 0x6c,
	0x1d, 0x7b, 0x05, 0x45, 0x8e, 0x21, 0x9e, 0xa4, 0x73, 0x38, 0xef, 0xf3, 0xc2, 0x63, 0x5f, 0x73,
	0x51, 0x52, 0x25, 0x13, 0x89, 0x11, 0xe4, 0x5c, 0xe4, 0x51, 0x06, 0xa0, 0x22, 0x04, 0x64, 0x2a,
	0xd2, 0x6b, 0x96, 0x0b, 0x1d, 0x25, 0x2c, 0x0b, 0xb2, 0x1c, 0x10, 0x9c, 0x41, 0x2a, 0xe3, 0x35,
	0x28, 0xa6, 0x39, 0xa0, 0x06, 0x15, 0xf0, 0x82, 0x29, 0x89, 0xdb, 0x80, 0x8b, 0x72, 0xd0, 0x5f,
	0xc1, 0x0a, 0xea, 0x33, 0x6a, 0x7e, 0xa7, 0xc4, 0xf8, 0x8b, 0xd8, 0xc3, 0x07, 0x43, 0x7f, 0x36,
	0xf0, 0x17, 0x00, 0xf5, 0x6a, 0xd0, 0x8b, 0x9a, 0xfc, 0xc8, 0x32, 0xa7, 0x6f, 0xff, 0x47, 0xd8,
	0x88, 0xd4, 0x25, 0x23, 0x32, 0xe9, 0x85, 0xa7, 0xc1, 0x19, 0xda, 0x3d, 0x94, 0xf1, 0xe6, 0x3e,
	0xe5, 0xa2, 0x74, 0xff, 0x8d, 0xc8, 0xa4, 0x13, 0x9e, 0x17, 0x26, 0x13, 0x43, 0x91, 0xa2, 0xdb,
	0x19, 0x91, 0x49, 0x37, 0x3c, 0x0d, 0x4e, 0x61, 0x5f, 0xe2, 0x99, 0xed, 0x76, 0x0d, 0x6f, 0xb6,
	0xd8, 0x55, 0xbe, 0xf5, 0x59, 0xf9, 0x57, 0x2b, 0x89, 0xeb, 0x62, 0x19, 0xc4, 0x90, 0xd0, 0x18,
	0x74, 0x02, 0xba, 0x79, 0xa6, 0x9a, 0x6f, 0x28, 0x6e, 0x33, 0xa1, 0x83, 0xb9, 0x88, 0x7f, 0x2a,
	0xbf, 0x0d, 0xf9, 0xad, 0x7c, 0x67, 0xcb, 0x12, 0x75, 0x3b, 0x6e, 0x2d, 0xc7, 0x61, 0xfb, 0x64,
	0x76, 0xb7, 0x3b, 0x78, 0x64, 0x7f, 0xf0, 0xc8, 0xf7, 0xc1, 0x23, 0xef, 0x47, 0xcf, 0xda, 0x1f,
	0x3d, 0xeb, 0xe3, 0xe8, 0x59, 0x6f, 0xd3, 0x56, 0xe7, 0x53, 0x23, 0x6e, 0x0e, 0xb8, 0x00, 0x45,
	0x1b, 0x71, 0xb4, 0xa4, 0x46, 0x7f, 0x5d, 0xbf, 0xbc, 0xa8, 0x8d, 0xdd, 0xfc, 0x05, 0x00, 0x00,
	0xff, 0xff, 0x06, 0x2f, 0xba, 0x2a, 0x92, 0x01, 0x00, 0x00,
}

func (m *LimitOrderPoolTotalSharesMap) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *LimitOrderPoolTotalSharesMap) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *LimitOrderPoolTotalSharesMap) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	{
		size := m.TotalShares.Size()
		i -= size
		if _, err := m.TotalShares.MarshalTo(dAtA[i:]); err != nil {
			return 0, err
		}
		i = encodeVarintLimitOrderPoolTotalSharesMap(dAtA, i, uint64(size))
	}
	i--
	dAtA[i] = 0x22
	if m.Count != 0 {
		i = encodeVarintLimitOrderPoolTotalSharesMap(dAtA, i, uint64(m.Count))
		i--
		dAtA[i] = 0x18
	}
	if m.TickIndex != 0 {
		i = encodeVarintLimitOrderPoolTotalSharesMap(dAtA, i, uint64(m.TickIndex))
		i--
		dAtA[i] = 0x10
	}
	if len(m.Token) > 0 {
		i -= len(m.Token)
		copy(dAtA[i:], m.Token)
		i = encodeVarintLimitOrderPoolTotalSharesMap(dAtA, i, uint64(len(m.Token)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func encodeVarintLimitOrderPoolTotalSharesMap(dAtA []byte, offset int, v uint64) int {
	offset -= sovLimitOrderPoolTotalSharesMap(v)
	base := offset
	for v >= 1<<7 {
		dAtA[offset] = uint8(v&0x7f | 0x80)
		v >>= 7
		offset++
	}
	dAtA[offset] = uint8(v)
	return base
}
func (m *LimitOrderPoolTotalSharesMap) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.Token)
	if l > 0 {
		n += 1 + l + sovLimitOrderPoolTotalSharesMap(uint64(l))
	}
	if m.TickIndex != 0 {
		n += 1 + sovLimitOrderPoolTotalSharesMap(uint64(m.TickIndex))
	}
	if m.Count != 0 {
		n += 1 + sovLimitOrderPoolTotalSharesMap(uint64(m.Count))
	}
	l = m.TotalShares.Size()
	n += 1 + l + sovLimitOrderPoolTotalSharesMap(uint64(l))
	return n
}

func sovLimitOrderPoolTotalSharesMap(x uint64) (n int) {
	return (math_bits.Len64(x|1) + 6) / 7
}
func sozLimitOrderPoolTotalSharesMap(x uint64) (n int) {
	return sovLimitOrderPoolTotalSharesMap(uint64((x << 1) ^ uint64((int64(x) >> 63))))
}
func (m *LimitOrderPoolTotalSharesMap) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowLimitOrderPoolTotalSharesMap
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: LimitOrderPoolTotalSharesMap: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: LimitOrderPoolTotalSharesMap: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Token", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowLimitOrderPoolTotalSharesMap
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthLimitOrderPoolTotalSharesMap
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthLimitOrderPoolTotalSharesMap
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Token = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field TickIndex", wireType)
			}
			m.TickIndex = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowLimitOrderPoolTotalSharesMap
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.TickIndex |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 3:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Count", wireType)
			}
			m.Count = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowLimitOrderPoolTotalSharesMap
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Count |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field TotalShares", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowLimitOrderPoolTotalSharesMap
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthLimitOrderPoolTotalSharesMap
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthLimitOrderPoolTotalSharesMap
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := m.TotalShares.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipLimitOrderPoolTotalSharesMap(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthLimitOrderPoolTotalSharesMap
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func skipLimitOrderPoolTotalSharesMap(dAtA []byte) (n int, err error) {
	l := len(dAtA)
	iNdEx := 0
	depth := 0
	for iNdEx < l {
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return 0, ErrIntOverflowLimitOrderPoolTotalSharesMap
			}
			if iNdEx >= l {
				return 0, io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		wireType := int(wire & 0x7)
		switch wireType {
		case 0:
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowLimitOrderPoolTotalSharesMap
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				iNdEx++
				if dAtA[iNdEx-1] < 0x80 {
					break
				}
			}
		case 1:
			iNdEx += 8
		case 2:
			var length int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowLimitOrderPoolTotalSharesMap
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				length |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if length < 0 {
				return 0, ErrInvalidLengthLimitOrderPoolTotalSharesMap
			}
			iNdEx += length
		case 3:
			depth++
		case 4:
			if depth == 0 {
				return 0, ErrUnexpectedEndOfGroupLimitOrderPoolTotalSharesMap
			}
			depth--
		case 5:
			iNdEx += 4
		default:
			return 0, fmt.Errorf("proto: illegal wireType %d", wireType)
		}
		if iNdEx < 0 {
			return 0, ErrInvalidLengthLimitOrderPoolTotalSharesMap
		}
		if depth == 0 {
			return iNdEx, nil
		}
	}
	return 0, io.ErrUnexpectedEOF
}

var (
	ErrInvalidLengthLimitOrderPoolTotalSharesMap        = fmt.Errorf("proto: negative length found during unmarshaling")
	ErrIntOverflowLimitOrderPoolTotalSharesMap          = fmt.Errorf("proto: integer overflow")
	ErrUnexpectedEndOfGroupLimitOrderPoolTotalSharesMap = fmt.Errorf("proto: unexpected end of group")
)
