// Code generated by protoc-gen-gogo. DO NOT EDIT.
// source: dex/token_pair_type.proto

package types

import (
	fmt "fmt"
	proto "github.com/gogo/protobuf/proto"
	io "io"
	math "math"
	math_bits "math/bits"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.GoGoProtoPackageIsVersion3 // please upgrade the proto package

type TokenPairType struct {
	CurrentTick0To1 int64 `protobuf:"varint,1,opt,name=currentTick0To1,proto3" json:"currentTick0To1,omitempty"`
	CurrentTick1To0 int64 `protobuf:"varint,2,opt,name=currentTick1To0,proto3" json:"currentTick1To0,omitempty"`
}

func (m *TokenPairType) Reset()         { *m = TokenPairType{} }
func (m *TokenPairType) String() string { return proto.CompactTextString(m) }
func (*TokenPairType) ProtoMessage()    {}
func (*TokenPairType) Descriptor() ([]byte, []int) {
	return fileDescriptor_bb81393245482d3a, []int{0}
}
func (m *TokenPairType) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *TokenPairType) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_TokenPairType.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *TokenPairType) XXX_Merge(src proto.Message) {
	xxx_messageInfo_TokenPairType.Merge(m, src)
}
func (m *TokenPairType) XXX_Size() int {
	return m.Size()
}
func (m *TokenPairType) XXX_DiscardUnknown() {
	xxx_messageInfo_TokenPairType.DiscardUnknown(m)
}

var xxx_messageInfo_TokenPairType proto.InternalMessageInfo

func (m *TokenPairType) GetCurrentTick0To1() int64 {
	if m != nil {
		return m.CurrentTick0To1
	}
	return 0
}

func (m *TokenPairType) GetCurrentTick1To0() int64 {
	if m != nil {
		return m.CurrentTick1To0
	}
	return 0
}

func init() {
	proto.RegisterType((*TokenPairType)(nil), "nicholasdotsol.duality.dex.TokenPairType")
}

func init() { proto.RegisterFile("dex/token_pair_type.proto", fileDescriptor_bb81393245482d3a) }

var fileDescriptor_bb81393245482d3a = []byte{
	// 202 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0xe2, 0x92, 0x4c, 0x49, 0xad, 0xd0,
	0x2f, 0xc9, 0xcf, 0x4e, 0xcd, 0x8b, 0x2f, 0x48, 0xcc, 0x2c, 0x8a, 0x2f, 0xa9, 0x2c, 0x48, 0xd5,
	0x2b, 0x28, 0xca, 0x2f, 0xc9, 0x17, 0x92, 0xca, 0xcb, 0x4c, 0xce, 0xc8, 0xcf, 0x49, 0x2c, 0x4e,
	0xc9, 0x2f, 0x29, 0xce, 0xcf, 0xd1, 0x4b, 0x29, 0x4d, 0xcc, 0xc9, 0x2c, 0xa9, 0xd4, 0x4b, 0x49,
	0xad, 0x50, 0x4a, 0xe6, 0xe2, 0x0d, 0x01, 0x69, 0x0a, 0x48, 0xcc, 0x2c, 0x0a, 0xa9, 0x2c, 0x48,
	0x15, 0xd2, 0xe0, 0xe2, 0x4f, 0x2e, 0x2d, 0x2a, 0x4a, 0xcd, 0x2b, 0x09, 0xc9, 0x4c, 0xce, 0x36,
	0x08, 0xc9, 0x37, 0x94, 0x60, 0x54, 0x60, 0xd4, 0x60, 0x0e, 0x42, 0x17, 0x46, 0x53, 0x69, 0x18,
	0x92, 0x6f, 0x20, 0xc1, 0x84, 0xa1, 0x12, 0x24, 0xec, 0xe4, 0x7e, 0xe2, 0x91, 0x1c, 0xe3, 0x85,
	0x47, 0x72, 0x8c, 0x0f, 0x1e, 0xc9, 0x31, 0x4e, 0x78, 0x2c, 0xc7, 0x70, 0xe1, 0xb1, 0x1c, 0xc3,
	0x8d, 0xc7, 0x72, 0x0c, 0x51, 0xba, 0xe9, 0x99, 0x25, 0x19, 0xa5, 0x49, 0x7a, 0xc9, 0xf9, 0xb9,
	0xfa, 0x7e, 0x50, 0x57, 0xba, 0xe4, 0x97, 0x04, 0xe7, 0xe7, 0xe8, 0x43, 0x5d, 0xa9, 0x5f, 0xa1,
	0x0f, 0xf6, 0x59, 0x65, 0x41, 0x6a, 0x71, 0x12, 0x1b, 0xd8, 0x43, 0xc6, 0x80, 0x00, 0x00, 0x00,
	0xff, 0xff, 0xa8, 0x97, 0x44, 0xd4, 0xed, 0x00, 0x00, 0x00,
}

func (m *TokenPairType) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *TokenPairType) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *TokenPairType) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.CurrentTick1To0 != 0 {
		i = encodeVarintTokenPairType(dAtA, i, uint64(m.CurrentTick1To0))
		i--
		dAtA[i] = 0x10
	}
	if m.CurrentTick0To1 != 0 {
		i = encodeVarintTokenPairType(dAtA, i, uint64(m.CurrentTick0To1))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func encodeVarintTokenPairType(dAtA []byte, offset int, v uint64) int {
	offset -= sovTokenPairType(v)
	base := offset
	for v >= 1<<7 {
		dAtA[offset] = uint8(v&0x7f | 0x80)
		v >>= 7
		offset++
	}
	dAtA[offset] = uint8(v)
	return base
}
func (m *TokenPairType) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.CurrentTick0To1 != 0 {
		n += 1 + sovTokenPairType(uint64(m.CurrentTick0To1))
	}
	if m.CurrentTick1To0 != 0 {
		n += 1 + sovTokenPairType(uint64(m.CurrentTick1To0))
	}
	return n
}

func sovTokenPairType(x uint64) (n int) {
	return (math_bits.Len64(x|1) + 6) / 7
}
func sozTokenPairType(x uint64) (n int) {
	return sovTokenPairType(uint64((x << 1) ^ uint64((int64(x) >> 63))))
}
func (m *TokenPairType) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowTokenPairType
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: TokenPairType: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: TokenPairType: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field CurrentTick0To1", wireType)
			}
			m.CurrentTick0To1 = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTokenPairType
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.CurrentTick0To1 |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field CurrentTick1To0", wireType)
			}
			m.CurrentTick1To0 = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTokenPairType
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.CurrentTick1To0 |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipTokenPairType(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthTokenPairType
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func skipTokenPairType(dAtA []byte) (n int, err error) {
	l := len(dAtA)
	iNdEx := 0
	depth := 0
	for iNdEx < l {
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return 0, ErrIntOverflowTokenPairType
			}
			if iNdEx >= l {
				return 0, io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		wireType := int(wire & 0x7)
		switch wireType {
		case 0:
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowTokenPairType
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				iNdEx++
				if dAtA[iNdEx-1] < 0x80 {
					break
				}
			}
		case 1:
			iNdEx += 8
		case 2:
			var length int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowTokenPairType
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				length |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if length < 0 {
				return 0, ErrInvalidLengthTokenPairType
			}
			iNdEx += length
		case 3:
			depth++
		case 4:
			if depth == 0 {
				return 0, ErrUnexpectedEndOfGroupTokenPairType
			}
			depth--
		case 5:
			iNdEx += 4
		default:
			return 0, fmt.Errorf("proto: illegal wireType %d", wireType)
		}
		if iNdEx < 0 {
			return 0, ErrInvalidLengthTokenPairType
		}
		if depth == 0 {
			return iNdEx, nil
		}
	}
	return 0, io.ErrUnexpectedEOF
}

var (
	ErrInvalidLengthTokenPairType        = fmt.Errorf("proto: negative length found during unmarshaling")
	ErrIntOverflowTokenPairType          = fmt.Errorf("proto: integer overflow")
	ErrUnexpectedEndOfGroupTokenPairType = fmt.Errorf("proto: unexpected end of group")
)
