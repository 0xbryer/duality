// Code generated by protoc-gen-gogo. DO NOT EDIT.
// source: dex/index_queue_type.proto

package types

import (
	fmt "fmt"
	github_com_cosmos_cosmos_sdk_types "github.com/cosmos/cosmos-sdk/types"
	_ "github.com/gogo/protobuf/gogoproto"
	proto "github.com/gogo/protobuf/proto"
	io "io"
	math "math"
	math_bits "math/bits"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.GoGoProtoPackageIsVersion3 // please upgrade the proto package

type IndexQueueType struct {
	Price       github_com_cosmos_cosmos_sdk_types.Dec `protobuf:"bytes,1,opt,name=price,proto3,customtype=github.com/cosmos/cosmos-sdk/types.Dec" json:"price" yaml:"price"`
	Fee         github_com_cosmos_cosmos_sdk_types.Dec `protobuf:"bytes,2,opt,name=fee,proto3,customtype=github.com/cosmos/cosmos-sdk/types.Dec" json:"fee" yaml:"fee"`
	Orderparams *OrderParams                           `protobuf:"bytes,3,opt,name=orderparams,proto3" json:"orderparams,omitempty"`
}

func (m *IndexQueueType) Reset()         { *m = IndexQueueType{} }
func (m *IndexQueueType) String() string { return proto.CompactTextString(m) }
func (*IndexQueueType) ProtoMessage()    {}
func (*IndexQueueType) Descriptor() ([]byte, []int) {
	return fileDescriptor_677945149d43c0b0, []int{0}
}
func (m *IndexQueueType) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *IndexQueueType) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_IndexQueueType.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *IndexQueueType) XXX_Merge(src proto.Message) {
	xxx_messageInfo_IndexQueueType.Merge(m, src)
}
func (m *IndexQueueType) XXX_Size() int {
	return m.Size()
}
func (m *IndexQueueType) XXX_DiscardUnknown() {
	xxx_messageInfo_IndexQueueType.DiscardUnknown(m)
}

var xxx_messageInfo_IndexQueueType proto.InternalMessageInfo

func (m *IndexQueueType) GetOrderparams() *OrderParams {
	if m != nil {
		return m.Orderparams
	}
	return nil
}

func init() {
	proto.RegisterType((*IndexQueueType)(nil), "nicholasdotsol.duality.dex.IndexQueueType")
}

func init() { proto.RegisterFile("dex/index_queue_type.proto", fileDescriptor_677945149d43c0b0) }

var fileDescriptor_677945149d43c0b0 = []byte{
	// 321 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0xe2, 0x92, 0x4a, 0x49, 0xad, 0xd0,
	0xcf, 0xcc, 0x4b, 0x49, 0xad, 0x88, 0x2f, 0x2c, 0x4d, 0x2d, 0x4d, 0x8d, 0x2f, 0xa9, 0x2c, 0x48,
	0xd5, 0x2b, 0x28, 0xca, 0x2f, 0xc9, 0x17, 0x92, 0xca, 0xcb, 0x4c, 0xce, 0xc8, 0xcf, 0x49, 0x2c,
	0x4e, 0xc9, 0x2f, 0x29, 0xce, 0xcf, 0xd1, 0x4b, 0x29, 0x4d, 0xcc, 0xc9, 0x2c, 0xa9, 0xd4, 0x4b,
	0x49, 0xad, 0x90, 0x12, 0x49, 0xcf, 0x4f, 0xcf, 0x07, 0x2b, 0xd3, 0x07, 0xb1, 0x20, 0x3a, 0xa4,
	0xc4, 0x40, 0xa6, 0xe5, 0x17, 0xa5, 0xa4, 0x16, 0xc5, 0x17, 0x24, 0x16, 0x25, 0xe6, 0x16, 0x43,
	0xc4, 0x95, 0x26, 0x32, 0x71, 0xf1, 0x79, 0x82, 0x2c, 0x09, 0x04, 0xd9, 0x11, 0x52, 0x59, 0x90,
	0x2a, 0x14, 0xcb, 0xc5, 0x5a, 0x50, 0x94, 0x99, 0x9c, 0x2a, 0xc1, 0xa8, 0xc0, 0xa8, 0xc1, 0xe9,
	0xe4, 0x7e, 0xe2, 0x9e, 0x3c, 0xc3, 0xad, 0x7b, 0xf2, 0x6a, 0xe9, 0x99, 0x25, 0x19, 0xa5, 0x49,
	0x7a, 0xc9, 0xf9, 0xb9, 0xfa, 0xc9, 0xf9, 0xc5, 0xb9, 0xf9, 0xc5, 0x50, 0x4a, 0xb7, 0x38, 0x25,
	0x5b, 0x1f, 0xe4, 0xb8, 0x62, 0x3d, 0x97, 0xd4, 0xe4, 0x57, 0xf7, 0xe4, 0x21, 0xda, 0x3f, 0xdd,
	0x93, 0xe7, 0xa9, 0x4c, 0xcc, 0xcd, 0xb1, 0x52, 0x02, 0x73, 0x95, 0x82, 0x20, 0xc2, 0x42, 0xa1,
	0x5c, 0xcc, 0x69, 0xa9, 0xa9, 0x12, 0x4c, 0x60, 0xc3, 0x9d, 0x49, 0x36, 0x1c, 0xa4, 0xf9, 0xd3,
	0x3d, 0x79, 0x2e, 0x88, 0xd1, 0x69, 0xa9, 0xa9, 0x4a, 0x41, 0x20, 0x21, 0x21, 0x4f, 0x2e, 0x6e,
	0xb0, 0xf7, 0x20, 0xbe, 0x93, 0x60, 0x56, 0x60, 0xd4, 0xe0, 0x36, 0x52, 0xd7, 0xc3, 0x1d, 0x50,
	0x7a, 0xfe, 0x20, 0xe5, 0x01, 0x60, 0xe5, 0x41, 0xc8, 0x7a, 0x9d, 0xdc, 0x4f, 0x3c, 0x92, 0x63,
	0xbc, 0xf0, 0x48, 0x8e, 0xf1, 0xc1, 0x23, 0x39, 0xc6, 0x09, 0x8f, 0xe5, 0x18, 0x2e, 0x3c, 0x96,
	0x63, 0xb8, 0xf1, 0x58, 0x8e, 0x21, 0x4a, 0x17, 0xc9, 0x99, 0x7e, 0x50, 0x93, 0x5d, 0xf2, 0x4b,
	0x82, 0xf3, 0x73, 0xf4, 0xa1, 0x26, 0xeb, 0x57, 0xe8, 0x83, 0x42, 0x1a, 0xec, 0xe2, 0x24, 0x36,
	0x70, 0x18, 0x1b, 0x03, 0x02, 0x00, 0x00, 0xff, 0xff, 0x7b, 0xea, 0x26, 0x48, 0xcb, 0x01, 0x00,
	0x00,
}

func (m *IndexQueueType) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *IndexQueueType) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *IndexQueueType) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.Orderparams != nil {
		{
			size, err := m.Orderparams.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintIndexQueueType(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x1a
	}
	{
		size := m.Fee.Size()
		i -= size
		if _, err := m.Fee.MarshalTo(dAtA[i:]); err != nil {
			return 0, err
		}
		i = encodeVarintIndexQueueType(dAtA, i, uint64(size))
	}
	i--
	dAtA[i] = 0x12
	{
		size := m.Price.Size()
		i -= size
		if _, err := m.Price.MarshalTo(dAtA[i:]); err != nil {
			return 0, err
		}
		i = encodeVarintIndexQueueType(dAtA, i, uint64(size))
	}
	i--
	dAtA[i] = 0xa
	return len(dAtA) - i, nil
}

func encodeVarintIndexQueueType(dAtA []byte, offset int, v uint64) int {
	offset -= sovIndexQueueType(v)
	base := offset
	for v >= 1<<7 {
		dAtA[offset] = uint8(v&0x7f | 0x80)
		v >>= 7
		offset++
	}
	dAtA[offset] = uint8(v)
	return base
}
func (m *IndexQueueType) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = m.Price.Size()
	n += 1 + l + sovIndexQueueType(uint64(l))
	l = m.Fee.Size()
	n += 1 + l + sovIndexQueueType(uint64(l))
	if m.Orderparams != nil {
		l = m.Orderparams.Size()
		n += 1 + l + sovIndexQueueType(uint64(l))
	}
	return n
}

func sovIndexQueueType(x uint64) (n int) {
	return (math_bits.Len64(x|1) + 6) / 7
}
func sozIndexQueueType(x uint64) (n int) {
	return sovIndexQueueType(uint64((x << 1) ^ uint64((int64(x) >> 63))))
}
func (m *IndexQueueType) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowIndexQueueType
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: IndexQueueType: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: IndexQueueType: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Price", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowIndexQueueType
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthIndexQueueType
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthIndexQueueType
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := m.Price.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Fee", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowIndexQueueType
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthIndexQueueType
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthIndexQueueType
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := m.Fee.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Orderparams", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowIndexQueueType
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthIndexQueueType
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthIndexQueueType
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Orderparams == nil {
				m.Orderparams = &OrderParams{}
			}
			if err := m.Orderparams.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipIndexQueueType(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthIndexQueueType
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func skipIndexQueueType(dAtA []byte) (n int, err error) {
	l := len(dAtA)
	iNdEx := 0
	depth := 0
	for iNdEx < l {
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return 0, ErrIntOverflowIndexQueueType
			}
			if iNdEx >= l {
				return 0, io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		wireType := int(wire & 0x7)
		switch wireType {
		case 0:
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowIndexQueueType
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				iNdEx++
				if dAtA[iNdEx-1] < 0x80 {
					break
				}
			}
		case 1:
			iNdEx += 8
		case 2:
			var length int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowIndexQueueType
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				length |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if length < 0 {
				return 0, ErrInvalidLengthIndexQueueType
			}
			iNdEx += length
		case 3:
			depth++
		case 4:
			if depth == 0 {
				return 0, ErrUnexpectedEndOfGroupIndexQueueType
			}
			depth--
		case 5:
			iNdEx += 4
		default:
			return 0, fmt.Errorf("proto: illegal wireType %d", wireType)
		}
		if iNdEx < 0 {
			return 0, ErrInvalidLengthIndexQueueType
		}
		if depth == 0 {
			return iNdEx, nil
		}
	}
	return 0, io.ErrUnexpectedEOF
}

var (
	ErrInvalidLengthIndexQueueType        = fmt.Errorf("proto: negative length found during unmarshaling")
	ErrIntOverflowIndexQueueType          = fmt.Errorf("proto: integer overflow")
	ErrUnexpectedEndOfGroupIndexQueueType = fmt.Errorf("proto: unexpected end of group")
)
