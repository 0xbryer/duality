// Code generated by protoc-gen-gogo. DO NOT EDIT.
// source: dex/query.proto

package types

import (
	context "context"
	fmt "fmt"
	query "github.com/cosmos/cosmos-sdk/types/query"
	_ "github.com/gogo/protobuf/gogoproto"
	grpc1 "github.com/gogo/protobuf/grpc"
	proto "github.com/gogo/protobuf/proto"
	_ "google.golang.org/genproto/googleapis/api/annotations"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
	io "io"
	math "math"
	math_bits "math/bits"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.GoGoProtoPackageIsVersion3 // please upgrade the proto package

// QueryParamsRequest is request type for the Query/Params RPC method.
type QueryParamsRequest struct {
}

func (m *QueryParamsRequest) Reset()         { *m = QueryParamsRequest{} }
func (m *QueryParamsRequest) String() string { return proto.CompactTextString(m) }
func (*QueryParamsRequest) ProtoMessage()    {}
func (*QueryParamsRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_d8e98105e6e08a59, []int{0}
}
func (m *QueryParamsRequest) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *QueryParamsRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_QueryParamsRequest.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *QueryParamsRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_QueryParamsRequest.Merge(m, src)
}
func (m *QueryParamsRequest) XXX_Size() int {
	return m.Size()
}
func (m *QueryParamsRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_QueryParamsRequest.DiscardUnknown(m)
}

var xxx_messageInfo_QueryParamsRequest proto.InternalMessageInfo

// QueryParamsResponse is response type for the Query/Params RPC method.
type QueryParamsResponse struct {
	// params holds all the parameters of this module.
	Params Params `protobuf:"bytes,1,opt,name=params,proto3" json:"params"`
}

func (m *QueryParamsResponse) Reset()         { *m = QueryParamsResponse{} }
func (m *QueryParamsResponse) String() string { return proto.CompactTextString(m) }
func (*QueryParamsResponse) ProtoMessage()    {}
func (*QueryParamsResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_d8e98105e6e08a59, []int{1}
}
func (m *QueryParamsResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *QueryParamsResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_QueryParamsResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *QueryParamsResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_QueryParamsResponse.Merge(m, src)
}
func (m *QueryParamsResponse) XXX_Size() int {
	return m.Size()
}
func (m *QueryParamsResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_QueryParamsResponse.DiscardUnknown(m)
}

var xxx_messageInfo_QueryParamsResponse proto.InternalMessageInfo

func (m *QueryParamsResponse) GetParams() Params {
	if m != nil {
		return m.Params
	}
	return Params{}
}

type QueryGetTickObjectRequest struct {
	TickIndex int64  `protobuf:"varint,1,opt,name=tickIndex,proto3" json:"tickIndex,omitempty"`
	PairId    string `protobuf:"bytes,2,opt,name=pairId,proto3" json:"pairId,omitempty"`
}

func (m *QueryGetTickObjectRequest) Reset()         { *m = QueryGetTickObjectRequest{} }
func (m *QueryGetTickObjectRequest) String() string { return proto.CompactTextString(m) }
func (*QueryGetTickObjectRequest) ProtoMessage()    {}
func (*QueryGetTickObjectRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_d8e98105e6e08a59, []int{2}
}
func (m *QueryGetTickObjectRequest) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *QueryGetTickObjectRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_QueryGetTickObjectRequest.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *QueryGetTickObjectRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_QueryGetTickObjectRequest.Merge(m, src)
}
func (m *QueryGetTickObjectRequest) XXX_Size() int {
	return m.Size()
}
func (m *QueryGetTickObjectRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_QueryGetTickObjectRequest.DiscardUnknown(m)
}

var xxx_messageInfo_QueryGetTickObjectRequest proto.InternalMessageInfo

func (m *QueryGetTickObjectRequest) GetTickIndex() int64 {
	if m != nil {
		return m.TickIndex
	}
	return 0
}

func (m *QueryGetTickObjectRequest) GetPairId() string {
	if m != nil {
		return m.PairId
	}
	return ""
}

type QueryGetTickObjectResponse struct {
	TickObject TickObject `protobuf:"bytes,1,opt,name=tickObject,proto3" json:"tickObject"`
}

func (m *QueryGetTickObjectResponse) Reset()         { *m = QueryGetTickObjectResponse{} }
func (m *QueryGetTickObjectResponse) String() string { return proto.CompactTextString(m) }
func (*QueryGetTickObjectResponse) ProtoMessage()    {}
func (*QueryGetTickObjectResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_d8e98105e6e08a59, []int{3}
}
func (m *QueryGetTickObjectResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *QueryGetTickObjectResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_QueryGetTickObjectResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *QueryGetTickObjectResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_QueryGetTickObjectResponse.Merge(m, src)
}
func (m *QueryGetTickObjectResponse) XXX_Size() int {
	return m.Size()
}
func (m *QueryGetTickObjectResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_QueryGetTickObjectResponse.DiscardUnknown(m)
}

var xxx_messageInfo_QueryGetTickObjectResponse proto.InternalMessageInfo

func (m *QueryGetTickObjectResponse) GetTickObject() TickObject {
	if m != nil {
		return m.TickObject
	}
	return TickObject{}
}

type QueryAllTickObjectRequest struct {
	Pagination *query.PageRequest `protobuf:"bytes,1,opt,name=pagination,proto3" json:"pagination,omitempty"`
}

func (m *QueryAllTickObjectRequest) Reset()         { *m = QueryAllTickObjectRequest{} }
func (m *QueryAllTickObjectRequest) String() string { return proto.CompactTextString(m) }
func (*QueryAllTickObjectRequest) ProtoMessage()    {}
func (*QueryAllTickObjectRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_d8e98105e6e08a59, []int{4}
}
func (m *QueryAllTickObjectRequest) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *QueryAllTickObjectRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_QueryAllTickObjectRequest.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *QueryAllTickObjectRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_QueryAllTickObjectRequest.Merge(m, src)
}
func (m *QueryAllTickObjectRequest) XXX_Size() int {
	return m.Size()
}
func (m *QueryAllTickObjectRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_QueryAllTickObjectRequest.DiscardUnknown(m)
}

var xxx_messageInfo_QueryAllTickObjectRequest proto.InternalMessageInfo

func (m *QueryAllTickObjectRequest) GetPagination() *query.PageRequest {
	if m != nil {
		return m.Pagination
	}
	return nil
}

type QueryAllTickObjectResponse struct {
	TickObject []TickObject        `protobuf:"bytes,1,rep,name=tickObject,proto3" json:"tickObject"`
	Pagination *query.PageResponse `protobuf:"bytes,2,opt,name=pagination,proto3" json:"pagination,omitempty"`
}

func (m *QueryAllTickObjectResponse) Reset()         { *m = QueryAllTickObjectResponse{} }
func (m *QueryAllTickObjectResponse) String() string { return proto.CompactTextString(m) }
func (*QueryAllTickObjectResponse) ProtoMessage()    {}
func (*QueryAllTickObjectResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_d8e98105e6e08a59, []int{5}
}
func (m *QueryAllTickObjectResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *QueryAllTickObjectResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_QueryAllTickObjectResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *QueryAllTickObjectResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_QueryAllTickObjectResponse.Merge(m, src)
}
func (m *QueryAllTickObjectResponse) XXX_Size() int {
	return m.Size()
}
func (m *QueryAllTickObjectResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_QueryAllTickObjectResponse.DiscardUnknown(m)
}

var xxx_messageInfo_QueryAllTickObjectResponse proto.InternalMessageInfo

func (m *QueryAllTickObjectResponse) GetTickObject() []TickObject {
	if m != nil {
		return m.TickObject
	}
	return nil
}

func (m *QueryAllTickObjectResponse) GetPagination() *query.PageResponse {
	if m != nil {
		return m.Pagination
	}
	return nil
}

type QueryGetPairMapRequest struct {
	PairId string `protobuf:"bytes,1,opt,name=pairId,proto3" json:"pairId,omitempty"`
}

func (m *QueryGetPairMapRequest) Reset()         { *m = QueryGetPairMapRequest{} }
func (m *QueryGetPairMapRequest) String() string { return proto.CompactTextString(m) }
func (*QueryGetPairMapRequest) ProtoMessage()    {}
func (*QueryGetPairMapRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_d8e98105e6e08a59, []int{6}
}
func (m *QueryGetPairMapRequest) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *QueryGetPairMapRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_QueryGetPairMapRequest.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *QueryGetPairMapRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_QueryGetPairMapRequest.Merge(m, src)
}
func (m *QueryGetPairMapRequest) XXX_Size() int {
	return m.Size()
}
func (m *QueryGetPairMapRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_QueryGetPairMapRequest.DiscardUnknown(m)
}

var xxx_messageInfo_QueryGetPairMapRequest proto.InternalMessageInfo

func (m *QueryGetPairMapRequest) GetPairId() string {
	if m != nil {
		return m.PairId
	}
	return ""
}

type QueryGetPairMapResponse struct {
	PairMap PairMap `protobuf:"bytes,1,opt,name=pairMap,proto3" json:"pairMap"`
}

func (m *QueryGetPairMapResponse) Reset()         { *m = QueryGetPairMapResponse{} }
func (m *QueryGetPairMapResponse) String() string { return proto.CompactTextString(m) }
func (*QueryGetPairMapResponse) ProtoMessage()    {}
func (*QueryGetPairMapResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_d8e98105e6e08a59, []int{7}
}
func (m *QueryGetPairMapResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *QueryGetPairMapResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_QueryGetPairMapResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *QueryGetPairMapResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_QueryGetPairMapResponse.Merge(m, src)
}
func (m *QueryGetPairMapResponse) XXX_Size() int {
	return m.Size()
}
func (m *QueryGetPairMapResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_QueryGetPairMapResponse.DiscardUnknown(m)
}

var xxx_messageInfo_QueryGetPairMapResponse proto.InternalMessageInfo

func (m *QueryGetPairMapResponse) GetPairMap() PairMap {
	if m != nil {
		return m.PairMap
	}
	return PairMap{}
}

type QueryAllPairMapRequest struct {
	Pagination *query.PageRequest `protobuf:"bytes,1,opt,name=pagination,proto3" json:"pagination,omitempty"`
}

func (m *QueryAllPairMapRequest) Reset()         { *m = QueryAllPairMapRequest{} }
func (m *QueryAllPairMapRequest) String() string { return proto.CompactTextString(m) }
func (*QueryAllPairMapRequest) ProtoMessage()    {}
func (*QueryAllPairMapRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_d8e98105e6e08a59, []int{8}
}
func (m *QueryAllPairMapRequest) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *QueryAllPairMapRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_QueryAllPairMapRequest.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *QueryAllPairMapRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_QueryAllPairMapRequest.Merge(m, src)
}
func (m *QueryAllPairMapRequest) XXX_Size() int {
	return m.Size()
}
func (m *QueryAllPairMapRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_QueryAllPairMapRequest.DiscardUnknown(m)
}

var xxx_messageInfo_QueryAllPairMapRequest proto.InternalMessageInfo

func (m *QueryAllPairMapRequest) GetPagination() *query.PageRequest {
	if m != nil {
		return m.Pagination
	}
	return nil
}

type QueryAllPairMapResponse struct {
	PairMap    []PairMap           `protobuf:"bytes,1,rep,name=pairMap,proto3" json:"pairMap"`
	Pagination *query.PageResponse `protobuf:"bytes,2,opt,name=pagination,proto3" json:"pagination,omitempty"`
}

func (m *QueryAllPairMapResponse) Reset()         { *m = QueryAllPairMapResponse{} }
func (m *QueryAllPairMapResponse) String() string { return proto.CompactTextString(m) }
func (*QueryAllPairMapResponse) ProtoMessage()    {}
func (*QueryAllPairMapResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_d8e98105e6e08a59, []int{9}
}
func (m *QueryAllPairMapResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *QueryAllPairMapResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_QueryAllPairMapResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *QueryAllPairMapResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_QueryAllPairMapResponse.Merge(m, src)
}
func (m *QueryAllPairMapResponse) XXX_Size() int {
	return m.Size()
}
func (m *QueryAllPairMapResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_QueryAllPairMapResponse.DiscardUnknown(m)
}

var xxx_messageInfo_QueryAllPairMapResponse proto.InternalMessageInfo

func (m *QueryAllPairMapResponse) GetPairMap() []PairMap {
	if m != nil {
		return m.PairMap
	}
	return nil
}

func (m *QueryAllPairMapResponse) GetPagination() *query.PageResponse {
	if m != nil {
		return m.Pagination
	}
	return nil
}

type QueryGetTokensRequest struct {
	Id uint64 `protobuf:"varint,1,opt,name=id,proto3" json:"id,omitempty"`
}

func (m *QueryGetTokensRequest) Reset()         { *m = QueryGetTokensRequest{} }
func (m *QueryGetTokensRequest) String() string { return proto.CompactTextString(m) }
func (*QueryGetTokensRequest) ProtoMessage()    {}
func (*QueryGetTokensRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_d8e98105e6e08a59, []int{10}
}
func (m *QueryGetTokensRequest) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *QueryGetTokensRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_QueryGetTokensRequest.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *QueryGetTokensRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_QueryGetTokensRequest.Merge(m, src)
}
func (m *QueryGetTokensRequest) XXX_Size() int {
	return m.Size()
}
func (m *QueryGetTokensRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_QueryGetTokensRequest.DiscardUnknown(m)
}

var xxx_messageInfo_QueryGetTokensRequest proto.InternalMessageInfo

func (m *QueryGetTokensRequest) GetId() uint64 {
	if m != nil {
		return m.Id
	}
	return 0
}

type QueryGetTokensResponse struct {
	Tokens Tokens `protobuf:"bytes,1,opt,name=Tokens,proto3" json:"Tokens"`
}

func (m *QueryGetTokensResponse) Reset()         { *m = QueryGetTokensResponse{} }
func (m *QueryGetTokensResponse) String() string { return proto.CompactTextString(m) }
func (*QueryGetTokensResponse) ProtoMessage()    {}
func (*QueryGetTokensResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_d8e98105e6e08a59, []int{11}
}
func (m *QueryGetTokensResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *QueryGetTokensResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_QueryGetTokensResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *QueryGetTokensResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_QueryGetTokensResponse.Merge(m, src)
}
func (m *QueryGetTokensResponse) XXX_Size() int {
	return m.Size()
}
func (m *QueryGetTokensResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_QueryGetTokensResponse.DiscardUnknown(m)
}

var xxx_messageInfo_QueryGetTokensResponse proto.InternalMessageInfo

func (m *QueryGetTokensResponse) GetTokens() Tokens {
	if m != nil {
		return m.Tokens
	}
	return Tokens{}
}

type QueryAllTokensRequest struct {
	Pagination *query.PageRequest `protobuf:"bytes,1,opt,name=pagination,proto3" json:"pagination,omitempty"`
}

func (m *QueryAllTokensRequest) Reset()         { *m = QueryAllTokensRequest{} }
func (m *QueryAllTokensRequest) String() string { return proto.CompactTextString(m) }
func (*QueryAllTokensRequest) ProtoMessage()    {}
func (*QueryAllTokensRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_d8e98105e6e08a59, []int{12}
}
func (m *QueryAllTokensRequest) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *QueryAllTokensRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_QueryAllTokensRequest.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *QueryAllTokensRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_QueryAllTokensRequest.Merge(m, src)
}
func (m *QueryAllTokensRequest) XXX_Size() int {
	return m.Size()
}
func (m *QueryAllTokensRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_QueryAllTokensRequest.DiscardUnknown(m)
}

var xxx_messageInfo_QueryAllTokensRequest proto.InternalMessageInfo

func (m *QueryAllTokensRequest) GetPagination() *query.PageRequest {
	if m != nil {
		return m.Pagination
	}
	return nil
}

type QueryAllTokensResponse struct {
	Tokens     []Tokens            `protobuf:"bytes,1,rep,name=Tokens,proto3" json:"Tokens"`
	Pagination *query.PageResponse `protobuf:"bytes,2,opt,name=pagination,proto3" json:"pagination,omitempty"`
}

func (m *QueryAllTokensResponse) Reset()         { *m = QueryAllTokensResponse{} }
func (m *QueryAllTokensResponse) String() string { return proto.CompactTextString(m) }
func (*QueryAllTokensResponse) ProtoMessage()    {}
func (*QueryAllTokensResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_d8e98105e6e08a59, []int{13}
}
func (m *QueryAllTokensResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *QueryAllTokensResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_QueryAllTokensResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *QueryAllTokensResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_QueryAllTokensResponse.Merge(m, src)
}
func (m *QueryAllTokensResponse) XXX_Size() int {
	return m.Size()
}
func (m *QueryAllTokensResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_QueryAllTokensResponse.DiscardUnknown(m)
}

var xxx_messageInfo_QueryAllTokensResponse proto.InternalMessageInfo

func (m *QueryAllTokensResponse) GetTokens() []Tokens {
	if m != nil {
		return m.Tokens
	}
	return nil
}

func (m *QueryAllTokensResponse) GetPagination() *query.PageResponse {
	if m != nil {
		return m.Pagination
	}
	return nil
}

type QueryGetTokenObjectRequest struct {
	Address string `protobuf:"bytes,1,opt,name=address,proto3" json:"address,omitempty"`
}

func (m *QueryGetTokenObjectRequest) Reset()         { *m = QueryGetTokenObjectRequest{} }
func (m *QueryGetTokenObjectRequest) String() string { return proto.CompactTextString(m) }
func (*QueryGetTokenObjectRequest) ProtoMessage()    {}
func (*QueryGetTokenObjectRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_d8e98105e6e08a59, []int{14}
}
func (m *QueryGetTokenObjectRequest) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *QueryGetTokenObjectRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_QueryGetTokenObjectRequest.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *QueryGetTokenObjectRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_QueryGetTokenObjectRequest.Merge(m, src)
}
func (m *QueryGetTokenObjectRequest) XXX_Size() int {
	return m.Size()
}
func (m *QueryGetTokenObjectRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_QueryGetTokenObjectRequest.DiscardUnknown(m)
}

var xxx_messageInfo_QueryGetTokenObjectRequest proto.InternalMessageInfo

func (m *QueryGetTokenObjectRequest) GetAddress() string {
	if m != nil {
		return m.Address
	}
	return ""
}

type QueryGetTokenObjectResponse struct {
	TokenObject TokenObject `protobuf:"bytes,1,opt,name=tokenObject,proto3" json:"tokenObject"`
}

func (m *QueryGetTokenObjectResponse) Reset()         { *m = QueryGetTokenObjectResponse{} }
func (m *QueryGetTokenObjectResponse) String() string { return proto.CompactTextString(m) }
func (*QueryGetTokenObjectResponse) ProtoMessage()    {}
func (*QueryGetTokenObjectResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_d8e98105e6e08a59, []int{15}
}
func (m *QueryGetTokenObjectResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *QueryGetTokenObjectResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_QueryGetTokenObjectResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *QueryGetTokenObjectResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_QueryGetTokenObjectResponse.Merge(m, src)
}
func (m *QueryGetTokenObjectResponse) XXX_Size() int {
	return m.Size()
}
func (m *QueryGetTokenObjectResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_QueryGetTokenObjectResponse.DiscardUnknown(m)
}

var xxx_messageInfo_QueryGetTokenObjectResponse proto.InternalMessageInfo

func (m *QueryGetTokenObjectResponse) GetTokenObject() TokenObject {
	if m != nil {
		return m.TokenObject
	}
	return TokenObject{}
}

type QueryAllTokenObjectRequest struct {
	Pagination *query.PageRequest `protobuf:"bytes,1,opt,name=pagination,proto3" json:"pagination,omitempty"`
}

func (m *QueryAllTokenObjectRequest) Reset()         { *m = QueryAllTokenObjectRequest{} }
func (m *QueryAllTokenObjectRequest) String() string { return proto.CompactTextString(m) }
func (*QueryAllTokenObjectRequest) ProtoMessage()    {}
func (*QueryAllTokenObjectRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_d8e98105e6e08a59, []int{16}
}
func (m *QueryAllTokenObjectRequest) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *QueryAllTokenObjectRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_QueryAllTokenObjectRequest.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *QueryAllTokenObjectRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_QueryAllTokenObjectRequest.Merge(m, src)
}
func (m *QueryAllTokenObjectRequest) XXX_Size() int {
	return m.Size()
}
func (m *QueryAllTokenObjectRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_QueryAllTokenObjectRequest.DiscardUnknown(m)
}

var xxx_messageInfo_QueryAllTokenObjectRequest proto.InternalMessageInfo

func (m *QueryAllTokenObjectRequest) GetPagination() *query.PageRequest {
	if m != nil {
		return m.Pagination
	}
	return nil
}

type QueryAllTokenObjectResponse struct {
	TokenObject []TokenObject       `protobuf:"bytes,1,rep,name=tokenObject,proto3" json:"tokenObject"`
	Pagination  *query.PageResponse `protobuf:"bytes,2,opt,name=pagination,proto3" json:"pagination,omitempty"`
}

func (m *QueryAllTokenObjectResponse) Reset()         { *m = QueryAllTokenObjectResponse{} }
func (m *QueryAllTokenObjectResponse) String() string { return proto.CompactTextString(m) }
func (*QueryAllTokenObjectResponse) ProtoMessage()    {}
func (*QueryAllTokenObjectResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_d8e98105e6e08a59, []int{17}
}
func (m *QueryAllTokenObjectResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *QueryAllTokenObjectResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_QueryAllTokenObjectResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *QueryAllTokenObjectResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_QueryAllTokenObjectResponse.Merge(m, src)
}
func (m *QueryAllTokenObjectResponse) XXX_Size() int {
	return m.Size()
}
func (m *QueryAllTokenObjectResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_QueryAllTokenObjectResponse.DiscardUnknown(m)
}

var xxx_messageInfo_QueryAllTokenObjectResponse proto.InternalMessageInfo

func (m *QueryAllTokenObjectResponse) GetTokenObject() []TokenObject {
	if m != nil {
		return m.TokenObject
	}
	return nil
}

func (m *QueryAllTokenObjectResponse) GetPagination() *query.PageResponse {
	if m != nil {
		return m.Pagination
	}
	return nil
}

type QueryGetSharesRequest struct {
	Address   string `protobuf:"bytes,1,opt,name=address,proto3" json:"address,omitempty"`
	PairId    string `protobuf:"bytes,2,opt,name=pairId,proto3" json:"pairId,omitempty"`
	TickIndex int64  `protobuf:"varint,3,opt,name=tickIndex,proto3" json:"tickIndex,omitempty"`
	Fee       uint64 `protobuf:"varint,4,opt,name=fee,proto3" json:"fee,omitempty"`
}

func (m *QueryGetSharesRequest) Reset()         { *m = QueryGetSharesRequest{} }
func (m *QueryGetSharesRequest) String() string { return proto.CompactTextString(m) }
func (*QueryGetSharesRequest) ProtoMessage()    {}
func (*QueryGetSharesRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_d8e98105e6e08a59, []int{18}
}
func (m *QueryGetSharesRequest) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *QueryGetSharesRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_QueryGetSharesRequest.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *QueryGetSharesRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_QueryGetSharesRequest.Merge(m, src)
}
func (m *QueryGetSharesRequest) XXX_Size() int {
	return m.Size()
}
func (m *QueryGetSharesRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_QueryGetSharesRequest.DiscardUnknown(m)
}

var xxx_messageInfo_QueryGetSharesRequest proto.InternalMessageInfo

func (m *QueryGetSharesRequest) GetAddress() string {
	if m != nil {
		return m.Address
	}
	return ""
}

func (m *QueryGetSharesRequest) GetPairId() string {
	if m != nil {
		return m.PairId
	}
	return ""
}

func (m *QueryGetSharesRequest) GetTickIndex() int64 {
	if m != nil {
		return m.TickIndex
	}
	return 0
}

func (m *QueryGetSharesRequest) GetFee() uint64 {
	if m != nil {
		return m.Fee
	}
	return 0
}

type QueryGetSharesResponse struct {
	Shares Shares `protobuf:"bytes,1,opt,name=shares,proto3" json:"shares"`
}

func (m *QueryGetSharesResponse) Reset()         { *m = QueryGetSharesResponse{} }
func (m *QueryGetSharesResponse) String() string { return proto.CompactTextString(m) }
func (*QueryGetSharesResponse) ProtoMessage()    {}
func (*QueryGetSharesResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_d8e98105e6e08a59, []int{19}
}
func (m *QueryGetSharesResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *QueryGetSharesResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_QueryGetSharesResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *QueryGetSharesResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_QueryGetSharesResponse.Merge(m, src)
}
func (m *QueryGetSharesResponse) XXX_Size() int {
	return m.Size()
}
func (m *QueryGetSharesResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_QueryGetSharesResponse.DiscardUnknown(m)
}

var xxx_messageInfo_QueryGetSharesResponse proto.InternalMessageInfo

func (m *QueryGetSharesResponse) GetShares() Shares {
	if m != nil {
		return m.Shares
	}
	return Shares{}
}

type QueryAllSharesRequest struct {
	Pagination *query.PageRequest `protobuf:"bytes,1,opt,name=pagination,proto3" json:"pagination,omitempty"`
}

func (m *QueryAllSharesRequest) Reset()         { *m = QueryAllSharesRequest{} }
func (m *QueryAllSharesRequest) String() string { return proto.CompactTextString(m) }
func (*QueryAllSharesRequest) ProtoMessage()    {}
func (*QueryAllSharesRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_d8e98105e6e08a59, []int{20}
}
func (m *QueryAllSharesRequest) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *QueryAllSharesRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_QueryAllSharesRequest.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *QueryAllSharesRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_QueryAllSharesRequest.Merge(m, src)
}
func (m *QueryAllSharesRequest) XXX_Size() int {
	return m.Size()
}
func (m *QueryAllSharesRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_QueryAllSharesRequest.DiscardUnknown(m)
}

var xxx_messageInfo_QueryAllSharesRequest proto.InternalMessageInfo

func (m *QueryAllSharesRequest) GetPagination() *query.PageRequest {
	if m != nil {
		return m.Pagination
	}
	return nil
}

type QueryAllSharesResponse struct {
	Shares     []Shares            `protobuf:"bytes,1,rep,name=shares,proto3" json:"shares"`
	Pagination *query.PageResponse `protobuf:"bytes,2,opt,name=pagination,proto3" json:"pagination,omitempty"`
}

func (m *QueryAllSharesResponse) Reset()         { *m = QueryAllSharesResponse{} }
func (m *QueryAllSharesResponse) String() string { return proto.CompactTextString(m) }
func (*QueryAllSharesResponse) ProtoMessage()    {}
func (*QueryAllSharesResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_d8e98105e6e08a59, []int{21}
}
func (m *QueryAllSharesResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *QueryAllSharesResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_QueryAllSharesResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *QueryAllSharesResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_QueryAllSharesResponse.Merge(m, src)
}
func (m *QueryAllSharesResponse) XXX_Size() int {
	return m.Size()
}
func (m *QueryAllSharesResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_QueryAllSharesResponse.DiscardUnknown(m)
}

var xxx_messageInfo_QueryAllSharesResponse proto.InternalMessageInfo

func (m *QueryAllSharesResponse) GetShares() []Shares {
	if m != nil {
		return m.Shares
	}
	return nil
}

func (m *QueryAllSharesResponse) GetPagination() *query.PageResponse {
	if m != nil {
		return m.Pagination
	}
	return nil
}

type QueryGetFeeListRequest struct {
	Id uint64 `protobuf:"varint,1,opt,name=id,proto3" json:"id,omitempty"`
}

func (m *QueryGetFeeListRequest) Reset()         { *m = QueryGetFeeListRequest{} }
func (m *QueryGetFeeListRequest) String() string { return proto.CompactTextString(m) }
func (*QueryGetFeeListRequest) ProtoMessage()    {}
func (*QueryGetFeeListRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_d8e98105e6e08a59, []int{22}
}
func (m *QueryGetFeeListRequest) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *QueryGetFeeListRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_QueryGetFeeListRequest.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *QueryGetFeeListRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_QueryGetFeeListRequest.Merge(m, src)
}
func (m *QueryGetFeeListRequest) XXX_Size() int {
	return m.Size()
}
func (m *QueryGetFeeListRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_QueryGetFeeListRequest.DiscardUnknown(m)
}

var xxx_messageInfo_QueryGetFeeListRequest proto.InternalMessageInfo

func (m *QueryGetFeeListRequest) GetId() uint64 {
	if m != nil {
		return m.Id
	}
	return 0
}

type QueryGetFeeListResponse struct {
	FeeList FeeList `protobuf:"bytes,1,opt,name=FeeList,proto3" json:"FeeList"`
}

func (m *QueryGetFeeListResponse) Reset()         { *m = QueryGetFeeListResponse{} }
func (m *QueryGetFeeListResponse) String() string { return proto.CompactTextString(m) }
func (*QueryGetFeeListResponse) ProtoMessage()    {}
func (*QueryGetFeeListResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_d8e98105e6e08a59, []int{23}
}
func (m *QueryGetFeeListResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *QueryGetFeeListResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_QueryGetFeeListResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *QueryGetFeeListResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_QueryGetFeeListResponse.Merge(m, src)
}
func (m *QueryGetFeeListResponse) XXX_Size() int {
	return m.Size()
}
func (m *QueryGetFeeListResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_QueryGetFeeListResponse.DiscardUnknown(m)
}

var xxx_messageInfo_QueryGetFeeListResponse proto.InternalMessageInfo

func (m *QueryGetFeeListResponse) GetFeeList() FeeList {
	if m != nil {
		return m.FeeList
	}
	return FeeList{}
}

type QueryAllFeeListRequest struct {
	Pagination *query.PageRequest `protobuf:"bytes,1,opt,name=pagination,proto3" json:"pagination,omitempty"`
}

func (m *QueryAllFeeListRequest) Reset()         { *m = QueryAllFeeListRequest{} }
func (m *QueryAllFeeListRequest) String() string { return proto.CompactTextString(m) }
func (*QueryAllFeeListRequest) ProtoMessage()    {}
func (*QueryAllFeeListRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_d8e98105e6e08a59, []int{24}
}
func (m *QueryAllFeeListRequest) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *QueryAllFeeListRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_QueryAllFeeListRequest.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *QueryAllFeeListRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_QueryAllFeeListRequest.Merge(m, src)
}
func (m *QueryAllFeeListRequest) XXX_Size() int {
	return m.Size()
}
func (m *QueryAllFeeListRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_QueryAllFeeListRequest.DiscardUnknown(m)
}

var xxx_messageInfo_QueryAllFeeListRequest proto.InternalMessageInfo

func (m *QueryAllFeeListRequest) GetPagination() *query.PageRequest {
	if m != nil {
		return m.Pagination
	}
	return nil
}

type QueryAllFeeListResponse struct {
	FeeList    []FeeList           `protobuf:"bytes,1,rep,name=FeeList,proto3" json:"FeeList"`
	Pagination *query.PageResponse `protobuf:"bytes,2,opt,name=pagination,proto3" json:"pagination,omitempty"`
}

func (m *QueryAllFeeListResponse) Reset()         { *m = QueryAllFeeListResponse{} }
func (m *QueryAllFeeListResponse) String() string { return proto.CompactTextString(m) }
func (*QueryAllFeeListResponse) ProtoMessage()    {}
func (*QueryAllFeeListResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_d8e98105e6e08a59, []int{25}
}
func (m *QueryAllFeeListResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *QueryAllFeeListResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_QueryAllFeeListResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *QueryAllFeeListResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_QueryAllFeeListResponse.Merge(m, src)
}
func (m *QueryAllFeeListResponse) XXX_Size() int {
	return m.Size()
}
func (m *QueryAllFeeListResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_QueryAllFeeListResponse.DiscardUnknown(m)
}

var xxx_messageInfo_QueryAllFeeListResponse proto.InternalMessageInfo

func (m *QueryAllFeeListResponse) GetFeeList() []FeeList {
	if m != nil {
		return m.FeeList
	}
	return nil
}

func (m *QueryAllFeeListResponse) GetPagination() *query.PageResponse {
	if m != nil {
		return m.Pagination
	}
	return nil
}

type QueryGetLimitOrderPoolUserShareMapRequest struct {
	PairId    string `protobuf:"bytes,1,opt,name=pairId,proto3" json:"pairId,omitempty"`
	TickIndex int64  `protobuf:"varint,2,opt,name=tickIndex,proto3" json:"tickIndex,omitempty"`
	Token     string `protobuf:"bytes,3,opt,name=token,proto3" json:"token,omitempty"`
	Count     uint64 `protobuf:"varint,4,opt,name=count,proto3" json:"count,omitempty"`
	Address   string `protobuf:"bytes,5,opt,name=address,proto3" json:"address,omitempty"`
}

func (m *QueryGetLimitOrderPoolUserShareMapRequest) Reset() {
	*m = QueryGetLimitOrderPoolUserShareMapRequest{}
}
func (m *QueryGetLimitOrderPoolUserShareMapRequest) String() string {
	return proto.CompactTextString(m)
}
func (*QueryGetLimitOrderPoolUserShareMapRequest) ProtoMessage() {}
func (*QueryGetLimitOrderPoolUserShareMapRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_d8e98105e6e08a59, []int{26}
}
func (m *QueryGetLimitOrderPoolUserShareMapRequest) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *QueryGetLimitOrderPoolUserShareMapRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_QueryGetLimitOrderPoolUserShareMapRequest.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *QueryGetLimitOrderPoolUserShareMapRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_QueryGetLimitOrderPoolUserShareMapRequest.Merge(m, src)
}
func (m *QueryGetLimitOrderPoolUserShareMapRequest) XXX_Size() int {
	return m.Size()
}
func (m *QueryGetLimitOrderPoolUserShareMapRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_QueryGetLimitOrderPoolUserShareMapRequest.DiscardUnknown(m)
}

var xxx_messageInfo_QueryGetLimitOrderPoolUserShareMapRequest proto.InternalMessageInfo

func (m *QueryGetLimitOrderPoolUserShareMapRequest) GetPairId() string {
	if m != nil {
		return m.PairId
	}
	return ""
}

func (m *QueryGetLimitOrderPoolUserShareMapRequest) GetTickIndex() int64 {
	if m != nil {
		return m.TickIndex
	}
	return 0
}

func (m *QueryGetLimitOrderPoolUserShareMapRequest) GetToken() string {
	if m != nil {
		return m.Token
	}
	return ""
}

func (m *QueryGetLimitOrderPoolUserShareMapRequest) GetCount() uint64 {
	if m != nil {
		return m.Count
	}
	return 0
}

func (m *QueryGetLimitOrderPoolUserShareMapRequest) GetAddress() string {
	if m != nil {
		return m.Address
	}
	return ""
}

type QueryGetLimitOrderPoolUserShareMapResponse struct {
	LimitOrderPoolUserShareMap LimitOrderPoolUserShareMap `protobuf:"bytes,1,opt,name=limitOrderPoolUserShareMap,proto3" json:"limitOrderPoolUserShareMap"`
}

func (m *QueryGetLimitOrderPoolUserShareMapResponse) Reset() {
	*m = QueryGetLimitOrderPoolUserShareMapResponse{}
}
func (m *QueryGetLimitOrderPoolUserShareMapResponse) String() string {
	return proto.CompactTextString(m)
}
func (*QueryGetLimitOrderPoolUserShareMapResponse) ProtoMessage() {}
func (*QueryGetLimitOrderPoolUserShareMapResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_d8e98105e6e08a59, []int{27}
}
func (m *QueryGetLimitOrderPoolUserShareMapResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *QueryGetLimitOrderPoolUserShareMapResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_QueryGetLimitOrderPoolUserShareMapResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *QueryGetLimitOrderPoolUserShareMapResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_QueryGetLimitOrderPoolUserShareMapResponse.Merge(m, src)
}
func (m *QueryGetLimitOrderPoolUserShareMapResponse) XXX_Size() int {
	return m.Size()
}
func (m *QueryGetLimitOrderPoolUserShareMapResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_QueryGetLimitOrderPoolUserShareMapResponse.DiscardUnknown(m)
}

var xxx_messageInfo_QueryGetLimitOrderPoolUserShareMapResponse proto.InternalMessageInfo

func (m *QueryGetLimitOrderPoolUserShareMapResponse) GetLimitOrderPoolUserShareMap() LimitOrderPoolUserShareMap {
	if m != nil {
		return m.LimitOrderPoolUserShareMap
	}
	return LimitOrderPoolUserShareMap{}
}

type QueryAllLimitOrderPoolUserShareMapRequest struct {
	Pagination *query.PageRequest `protobuf:"bytes,1,opt,name=pagination,proto3" json:"pagination,omitempty"`
}

func (m *QueryAllLimitOrderPoolUserShareMapRequest) Reset() {
	*m = QueryAllLimitOrderPoolUserShareMapRequest{}
}
func (m *QueryAllLimitOrderPoolUserShareMapRequest) String() string {
	return proto.CompactTextString(m)
}
func (*QueryAllLimitOrderPoolUserShareMapRequest) ProtoMessage() {}
func (*QueryAllLimitOrderPoolUserShareMapRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_d8e98105e6e08a59, []int{28}
}
func (m *QueryAllLimitOrderPoolUserShareMapRequest) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *QueryAllLimitOrderPoolUserShareMapRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_QueryAllLimitOrderPoolUserShareMapRequest.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *QueryAllLimitOrderPoolUserShareMapRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_QueryAllLimitOrderPoolUserShareMapRequest.Merge(m, src)
}
func (m *QueryAllLimitOrderPoolUserShareMapRequest) XXX_Size() int {
	return m.Size()
}
func (m *QueryAllLimitOrderPoolUserShareMapRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_QueryAllLimitOrderPoolUserShareMapRequest.DiscardUnknown(m)
}

var xxx_messageInfo_QueryAllLimitOrderPoolUserShareMapRequest proto.InternalMessageInfo

func (m *QueryAllLimitOrderPoolUserShareMapRequest) GetPagination() *query.PageRequest {
	if m != nil {
		return m.Pagination
	}
	return nil
}

type QueryAllLimitOrderPoolUserShareMapResponse struct {
	LimitOrderPoolUserShareMap []LimitOrderPoolUserShareMap `protobuf:"bytes,1,rep,name=limitOrderPoolUserShareMap,proto3" json:"limitOrderPoolUserShareMap"`
	Pagination                 *query.PageResponse          `protobuf:"bytes,2,opt,name=pagination,proto3" json:"pagination,omitempty"`
}

func (m *QueryAllLimitOrderPoolUserShareMapResponse) Reset() {
	*m = QueryAllLimitOrderPoolUserShareMapResponse{}
}
func (m *QueryAllLimitOrderPoolUserShareMapResponse) String() string {
	return proto.CompactTextString(m)
}
func (*QueryAllLimitOrderPoolUserShareMapResponse) ProtoMessage() {}
func (*QueryAllLimitOrderPoolUserShareMapResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_d8e98105e6e08a59, []int{29}
}
func (m *QueryAllLimitOrderPoolUserShareMapResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *QueryAllLimitOrderPoolUserShareMapResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_QueryAllLimitOrderPoolUserShareMapResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *QueryAllLimitOrderPoolUserShareMapResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_QueryAllLimitOrderPoolUserShareMapResponse.Merge(m, src)
}
func (m *QueryAllLimitOrderPoolUserShareMapResponse) XXX_Size() int {
	return m.Size()
}
func (m *QueryAllLimitOrderPoolUserShareMapResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_QueryAllLimitOrderPoolUserShareMapResponse.DiscardUnknown(m)
}

var xxx_messageInfo_QueryAllLimitOrderPoolUserShareMapResponse proto.InternalMessageInfo

func (m *QueryAllLimitOrderPoolUserShareMapResponse) GetLimitOrderPoolUserShareMap() []LimitOrderPoolUserShareMap {
	if m != nil {
		return m.LimitOrderPoolUserShareMap
	}
	return nil
}

func (m *QueryAllLimitOrderPoolUserShareMapResponse) GetPagination() *query.PageResponse {
	if m != nil {
		return m.Pagination
	}
	return nil
}

type QueryGetLimitOrderPoolUserSharesWithdrawnRequest struct {
	PairId    string `protobuf:"bytes,1,opt,name=pairId,proto3" json:"pairId,omitempty"`
	TickIndex int64  `protobuf:"varint,2,opt,name=tickIndex,proto3" json:"tickIndex,omitempty"`
	Token     string `protobuf:"bytes,3,opt,name=token,proto3" json:"token,omitempty"`
	Count     uint64 `protobuf:"varint,4,opt,name=count,proto3" json:"count,omitempty"`
	Address   string `protobuf:"bytes,5,opt,name=address,proto3" json:"address,omitempty"`
}

func (m *QueryGetLimitOrderPoolUserSharesWithdrawnRequest) Reset() {
	*m = QueryGetLimitOrderPoolUserSharesWithdrawnRequest{}
}
func (m *QueryGetLimitOrderPoolUserSharesWithdrawnRequest) String() string {
	return proto.CompactTextString(m)
}
func (*QueryGetLimitOrderPoolUserSharesWithdrawnRequest) ProtoMessage() {}
func (*QueryGetLimitOrderPoolUserSharesWithdrawnRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_d8e98105e6e08a59, []int{30}
}
func (m *QueryGetLimitOrderPoolUserSharesWithdrawnRequest) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *QueryGetLimitOrderPoolUserSharesWithdrawnRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_QueryGetLimitOrderPoolUserSharesWithdrawnRequest.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *QueryGetLimitOrderPoolUserSharesWithdrawnRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_QueryGetLimitOrderPoolUserSharesWithdrawnRequest.Merge(m, src)
}
func (m *QueryGetLimitOrderPoolUserSharesWithdrawnRequest) XXX_Size() int {
	return m.Size()
}
func (m *QueryGetLimitOrderPoolUserSharesWithdrawnRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_QueryGetLimitOrderPoolUserSharesWithdrawnRequest.DiscardUnknown(m)
}

var xxx_messageInfo_QueryGetLimitOrderPoolUserSharesWithdrawnRequest proto.InternalMessageInfo

func (m *QueryGetLimitOrderPoolUserSharesWithdrawnRequest) GetPairId() string {
	if m != nil {
		return m.PairId
	}
	return ""
}

func (m *QueryGetLimitOrderPoolUserSharesWithdrawnRequest) GetTickIndex() int64 {
	if m != nil {
		return m.TickIndex
	}
	return 0
}

func (m *QueryGetLimitOrderPoolUserSharesWithdrawnRequest) GetToken() string {
	if m != nil {
		return m.Token
	}
	return ""
}

func (m *QueryGetLimitOrderPoolUserSharesWithdrawnRequest) GetCount() uint64 {
	if m != nil {
		return m.Count
	}
	return 0
}

func (m *QueryGetLimitOrderPoolUserSharesWithdrawnRequest) GetAddress() string {
	if m != nil {
		return m.Address
	}
	return ""
}

type QueryGetLimitOrderPoolUserSharesWithdrawnResponse struct {
	LimitOrderPoolUserSharesWithdrawn LimitOrderPoolUserSharesWithdrawn `protobuf:"bytes,1,opt,name=limitOrderPoolUserSharesWithdrawn,proto3" json:"limitOrderPoolUserSharesWithdrawn"`
}

func (m *QueryGetLimitOrderPoolUserSharesWithdrawnResponse) Reset() {
	*m = QueryGetLimitOrderPoolUserSharesWithdrawnResponse{}
}
func (m *QueryGetLimitOrderPoolUserSharesWithdrawnResponse) String() string {
	return proto.CompactTextString(m)
}
func (*QueryGetLimitOrderPoolUserSharesWithdrawnResponse) ProtoMessage() {}
func (*QueryGetLimitOrderPoolUserSharesWithdrawnResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_d8e98105e6e08a59, []int{31}
}
func (m *QueryGetLimitOrderPoolUserSharesWithdrawnResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *QueryGetLimitOrderPoolUserSharesWithdrawnResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_QueryGetLimitOrderPoolUserSharesWithdrawnResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *QueryGetLimitOrderPoolUserSharesWithdrawnResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_QueryGetLimitOrderPoolUserSharesWithdrawnResponse.Merge(m, src)
}
func (m *QueryGetLimitOrderPoolUserSharesWithdrawnResponse) XXX_Size() int {
	return m.Size()
}
func (m *QueryGetLimitOrderPoolUserSharesWithdrawnResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_QueryGetLimitOrderPoolUserSharesWithdrawnResponse.DiscardUnknown(m)
}

var xxx_messageInfo_QueryGetLimitOrderPoolUserSharesWithdrawnResponse proto.InternalMessageInfo

func (m *QueryGetLimitOrderPoolUserSharesWithdrawnResponse) GetLimitOrderPoolUserSharesWithdrawn() LimitOrderPoolUserSharesWithdrawn {
	if m != nil {
		return m.LimitOrderPoolUserSharesWithdrawn
	}
	return LimitOrderPoolUserSharesWithdrawn{}
}

type QueryAllLimitOrderPoolUserSharesWithdrawnRequest struct {
	Pagination *query.PageRequest `protobuf:"bytes,1,opt,name=pagination,proto3" json:"pagination,omitempty"`
}

func (m *QueryAllLimitOrderPoolUserSharesWithdrawnRequest) Reset() {
	*m = QueryAllLimitOrderPoolUserSharesWithdrawnRequest{}
}
func (m *QueryAllLimitOrderPoolUserSharesWithdrawnRequest) String() string {
	return proto.CompactTextString(m)
}
func (*QueryAllLimitOrderPoolUserSharesWithdrawnRequest) ProtoMessage() {}
func (*QueryAllLimitOrderPoolUserSharesWithdrawnRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_d8e98105e6e08a59, []int{32}
}
func (m *QueryAllLimitOrderPoolUserSharesWithdrawnRequest) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *QueryAllLimitOrderPoolUserSharesWithdrawnRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_QueryAllLimitOrderPoolUserSharesWithdrawnRequest.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *QueryAllLimitOrderPoolUserSharesWithdrawnRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_QueryAllLimitOrderPoolUserSharesWithdrawnRequest.Merge(m, src)
}
func (m *QueryAllLimitOrderPoolUserSharesWithdrawnRequest) XXX_Size() int {
	return m.Size()
}
func (m *QueryAllLimitOrderPoolUserSharesWithdrawnRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_QueryAllLimitOrderPoolUserSharesWithdrawnRequest.DiscardUnknown(m)
}

var xxx_messageInfo_QueryAllLimitOrderPoolUserSharesWithdrawnRequest proto.InternalMessageInfo

func (m *QueryAllLimitOrderPoolUserSharesWithdrawnRequest) GetPagination() *query.PageRequest {
	if m != nil {
		return m.Pagination
	}
	return nil
}

type QueryAllLimitOrderPoolUserSharesWithdrawnResponse struct {
	LimitOrderPoolUserSharesWithdrawn []LimitOrderPoolUserSharesWithdrawn `protobuf:"bytes,1,rep,name=limitOrderPoolUserSharesWithdrawn,proto3" json:"limitOrderPoolUserSharesWithdrawn"`
	Pagination                        *query.PageResponse                 `protobuf:"bytes,2,opt,name=pagination,proto3" json:"pagination,omitempty"`
}

func (m *QueryAllLimitOrderPoolUserSharesWithdrawnResponse) Reset() {
	*m = QueryAllLimitOrderPoolUserSharesWithdrawnResponse{}
}
func (m *QueryAllLimitOrderPoolUserSharesWithdrawnResponse) String() string {
	return proto.CompactTextString(m)
}
func (*QueryAllLimitOrderPoolUserSharesWithdrawnResponse) ProtoMessage() {}
func (*QueryAllLimitOrderPoolUserSharesWithdrawnResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_d8e98105e6e08a59, []int{33}
}
func (m *QueryAllLimitOrderPoolUserSharesWithdrawnResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *QueryAllLimitOrderPoolUserSharesWithdrawnResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_QueryAllLimitOrderPoolUserSharesWithdrawnResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *QueryAllLimitOrderPoolUserSharesWithdrawnResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_QueryAllLimitOrderPoolUserSharesWithdrawnResponse.Merge(m, src)
}
func (m *QueryAllLimitOrderPoolUserSharesWithdrawnResponse) XXX_Size() int {
	return m.Size()
}
func (m *QueryAllLimitOrderPoolUserSharesWithdrawnResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_QueryAllLimitOrderPoolUserSharesWithdrawnResponse.DiscardUnknown(m)
}

var xxx_messageInfo_QueryAllLimitOrderPoolUserSharesWithdrawnResponse proto.InternalMessageInfo

func (m *QueryAllLimitOrderPoolUserSharesWithdrawnResponse) GetLimitOrderPoolUserSharesWithdrawn() []LimitOrderPoolUserSharesWithdrawn {
	if m != nil {
		return m.LimitOrderPoolUserSharesWithdrawn
	}
	return nil
}

func (m *QueryAllLimitOrderPoolUserSharesWithdrawnResponse) GetPagination() *query.PageResponse {
	if m != nil {
		return m.Pagination
	}
	return nil
}

type QueryGetLimitOrderPoolTotalSharesMapRequest struct {
	PairId    string `protobuf:"bytes,1,opt,name=pairId,proto3" json:"pairId,omitempty"`
	TickIndex int64  `protobuf:"varint,2,opt,name=tickIndex,proto3" json:"tickIndex,omitempty"`
	Token     string `protobuf:"bytes,3,opt,name=token,proto3" json:"token,omitempty"`
	Count     uint64 `protobuf:"varint,4,opt,name=count,proto3" json:"count,omitempty"`
}

func (m *QueryGetLimitOrderPoolTotalSharesMapRequest) Reset() {
	*m = QueryGetLimitOrderPoolTotalSharesMapRequest{}
}
func (m *QueryGetLimitOrderPoolTotalSharesMapRequest) String() string {
	return proto.CompactTextString(m)
}
func (*QueryGetLimitOrderPoolTotalSharesMapRequest) ProtoMessage() {}
func (*QueryGetLimitOrderPoolTotalSharesMapRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_d8e98105e6e08a59, []int{34}
}
func (m *QueryGetLimitOrderPoolTotalSharesMapRequest) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *QueryGetLimitOrderPoolTotalSharesMapRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_QueryGetLimitOrderPoolTotalSharesMapRequest.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *QueryGetLimitOrderPoolTotalSharesMapRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_QueryGetLimitOrderPoolTotalSharesMapRequest.Merge(m, src)
}
func (m *QueryGetLimitOrderPoolTotalSharesMapRequest) XXX_Size() int {
	return m.Size()
}
func (m *QueryGetLimitOrderPoolTotalSharesMapRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_QueryGetLimitOrderPoolTotalSharesMapRequest.DiscardUnknown(m)
}

var xxx_messageInfo_QueryGetLimitOrderPoolTotalSharesMapRequest proto.InternalMessageInfo

func (m *QueryGetLimitOrderPoolTotalSharesMapRequest) GetPairId() string {
	if m != nil {
		return m.PairId
	}
	return ""
}

func (m *QueryGetLimitOrderPoolTotalSharesMapRequest) GetTickIndex() int64 {
	if m != nil {
		return m.TickIndex
	}
	return 0
}

func (m *QueryGetLimitOrderPoolTotalSharesMapRequest) GetToken() string {
	if m != nil {
		return m.Token
	}
	return ""
}

func (m *QueryGetLimitOrderPoolTotalSharesMapRequest) GetCount() uint64 {
	if m != nil {
		return m.Count
	}
	return 0
}

type QueryGetLimitOrderPoolTotalSharesMapResponse struct {
	LimitOrderPoolTotalSharesMap LimitOrderPoolTotalSharesMap `protobuf:"bytes,1,opt,name=limitOrderPoolTotalSharesMap,proto3" json:"limitOrderPoolTotalSharesMap"`
}

func (m *QueryGetLimitOrderPoolTotalSharesMapResponse) Reset() {
	*m = QueryGetLimitOrderPoolTotalSharesMapResponse{}
}
func (m *QueryGetLimitOrderPoolTotalSharesMapResponse) String() string {
	return proto.CompactTextString(m)
}
func (*QueryGetLimitOrderPoolTotalSharesMapResponse) ProtoMessage() {}
func (*QueryGetLimitOrderPoolTotalSharesMapResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_d8e98105e6e08a59, []int{35}
}
func (m *QueryGetLimitOrderPoolTotalSharesMapResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *QueryGetLimitOrderPoolTotalSharesMapResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_QueryGetLimitOrderPoolTotalSharesMapResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *QueryGetLimitOrderPoolTotalSharesMapResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_QueryGetLimitOrderPoolTotalSharesMapResponse.Merge(m, src)
}
func (m *QueryGetLimitOrderPoolTotalSharesMapResponse) XXX_Size() int {
	return m.Size()
}
func (m *QueryGetLimitOrderPoolTotalSharesMapResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_QueryGetLimitOrderPoolTotalSharesMapResponse.DiscardUnknown(m)
}

var xxx_messageInfo_QueryGetLimitOrderPoolTotalSharesMapResponse proto.InternalMessageInfo

func (m *QueryGetLimitOrderPoolTotalSharesMapResponse) GetLimitOrderPoolTotalSharesMap() LimitOrderPoolTotalSharesMap {
	if m != nil {
		return m.LimitOrderPoolTotalSharesMap
	}
	return LimitOrderPoolTotalSharesMap{}
}

type QueryAllLimitOrderPoolTotalSharesMapRequest struct {
	Pagination *query.PageRequest `protobuf:"bytes,1,opt,name=pagination,proto3" json:"pagination,omitempty"`
}

func (m *QueryAllLimitOrderPoolTotalSharesMapRequest) Reset() {
	*m = QueryAllLimitOrderPoolTotalSharesMapRequest{}
}
func (m *QueryAllLimitOrderPoolTotalSharesMapRequest) String() string {
	return proto.CompactTextString(m)
}
func (*QueryAllLimitOrderPoolTotalSharesMapRequest) ProtoMessage() {}
func (*QueryAllLimitOrderPoolTotalSharesMapRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_d8e98105e6e08a59, []int{36}
}
func (m *QueryAllLimitOrderPoolTotalSharesMapRequest) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *QueryAllLimitOrderPoolTotalSharesMapRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_QueryAllLimitOrderPoolTotalSharesMapRequest.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *QueryAllLimitOrderPoolTotalSharesMapRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_QueryAllLimitOrderPoolTotalSharesMapRequest.Merge(m, src)
}
func (m *QueryAllLimitOrderPoolTotalSharesMapRequest) XXX_Size() int {
	return m.Size()
}
func (m *QueryAllLimitOrderPoolTotalSharesMapRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_QueryAllLimitOrderPoolTotalSharesMapRequest.DiscardUnknown(m)
}

var xxx_messageInfo_QueryAllLimitOrderPoolTotalSharesMapRequest proto.InternalMessageInfo

func (m *QueryAllLimitOrderPoolTotalSharesMapRequest) GetPagination() *query.PageRequest {
	if m != nil {
		return m.Pagination
	}
	return nil
}

type QueryAllLimitOrderPoolTotalSharesMapResponse struct {
	LimitOrderPoolTotalSharesMap []LimitOrderPoolTotalSharesMap `protobuf:"bytes,1,rep,name=limitOrderPoolTotalSharesMap,proto3" json:"limitOrderPoolTotalSharesMap"`
	Pagination                   *query.PageResponse            `protobuf:"bytes,2,opt,name=pagination,proto3" json:"pagination,omitempty"`
}

func (m *QueryAllLimitOrderPoolTotalSharesMapResponse) Reset() {
	*m = QueryAllLimitOrderPoolTotalSharesMapResponse{}
}
func (m *QueryAllLimitOrderPoolTotalSharesMapResponse) String() string {
	return proto.CompactTextString(m)
}
func (*QueryAllLimitOrderPoolTotalSharesMapResponse) ProtoMessage() {}
func (*QueryAllLimitOrderPoolTotalSharesMapResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_d8e98105e6e08a59, []int{37}
}
func (m *QueryAllLimitOrderPoolTotalSharesMapResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *QueryAllLimitOrderPoolTotalSharesMapResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_QueryAllLimitOrderPoolTotalSharesMapResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *QueryAllLimitOrderPoolTotalSharesMapResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_QueryAllLimitOrderPoolTotalSharesMapResponse.Merge(m, src)
}
func (m *QueryAllLimitOrderPoolTotalSharesMapResponse) XXX_Size() int {
	return m.Size()
}
func (m *QueryAllLimitOrderPoolTotalSharesMapResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_QueryAllLimitOrderPoolTotalSharesMapResponse.DiscardUnknown(m)
}

var xxx_messageInfo_QueryAllLimitOrderPoolTotalSharesMapResponse proto.InternalMessageInfo

func (m *QueryAllLimitOrderPoolTotalSharesMapResponse) GetLimitOrderPoolTotalSharesMap() []LimitOrderPoolTotalSharesMap {
	if m != nil {
		return m.LimitOrderPoolTotalSharesMap
	}
	return nil
}

func (m *QueryAllLimitOrderPoolTotalSharesMapResponse) GetPagination() *query.PageResponse {
	if m != nil {
		return m.Pagination
	}
	return nil
}

type QueryGetLimitOrderPoolReserveMapRequest struct {
	PairId    string `protobuf:"bytes,1,opt,name=pairId,proto3" json:"pairId,omitempty"`
	TickIndex int64  `protobuf:"varint,2,opt,name=tickIndex,proto3" json:"tickIndex,omitempty"`
	Token     string `protobuf:"bytes,3,opt,name=token,proto3" json:"token,omitempty"`
	Count     uint64 `protobuf:"varint,4,opt,name=count,proto3" json:"count,omitempty"`
}

func (m *QueryGetLimitOrderPoolReserveMapRequest) Reset() {
	*m = QueryGetLimitOrderPoolReserveMapRequest{}
}
func (m *QueryGetLimitOrderPoolReserveMapRequest) String() string { return proto.CompactTextString(m) }
func (*QueryGetLimitOrderPoolReserveMapRequest) ProtoMessage()    {}
func (*QueryGetLimitOrderPoolReserveMapRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_d8e98105e6e08a59, []int{38}
}
func (m *QueryGetLimitOrderPoolReserveMapRequest) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *QueryGetLimitOrderPoolReserveMapRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_QueryGetLimitOrderPoolReserveMapRequest.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *QueryGetLimitOrderPoolReserveMapRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_QueryGetLimitOrderPoolReserveMapRequest.Merge(m, src)
}
func (m *QueryGetLimitOrderPoolReserveMapRequest) XXX_Size() int {
	return m.Size()
}
func (m *QueryGetLimitOrderPoolReserveMapRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_QueryGetLimitOrderPoolReserveMapRequest.DiscardUnknown(m)
}

var xxx_messageInfo_QueryGetLimitOrderPoolReserveMapRequest proto.InternalMessageInfo

func (m *QueryGetLimitOrderPoolReserveMapRequest) GetPairId() string {
	if m != nil {
		return m.PairId
	}
	return ""
}

func (m *QueryGetLimitOrderPoolReserveMapRequest) GetTickIndex() int64 {
	if m != nil {
		return m.TickIndex
	}
	return 0
}

func (m *QueryGetLimitOrderPoolReserveMapRequest) GetToken() string {
	if m != nil {
		return m.Token
	}
	return ""
}

func (m *QueryGetLimitOrderPoolReserveMapRequest) GetCount() uint64 {
	if m != nil {
		return m.Count
	}
	return 0
}

type QueryGetLimitOrderPoolReserveMapResponse struct {
	LimitOrderPoolReserveMap LimitOrderPoolReserveMap `protobuf:"bytes,1,opt,name=limitOrderPoolReserveMap,proto3" json:"limitOrderPoolReserveMap"`
}

func (m *QueryGetLimitOrderPoolReserveMapResponse) Reset() {
	*m = QueryGetLimitOrderPoolReserveMapResponse{}
}
func (m *QueryGetLimitOrderPoolReserveMapResponse) String() string { return proto.CompactTextString(m) }
func (*QueryGetLimitOrderPoolReserveMapResponse) ProtoMessage()    {}
func (*QueryGetLimitOrderPoolReserveMapResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_d8e98105e6e08a59, []int{39}
}
func (m *QueryGetLimitOrderPoolReserveMapResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *QueryGetLimitOrderPoolReserveMapResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_QueryGetLimitOrderPoolReserveMapResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *QueryGetLimitOrderPoolReserveMapResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_QueryGetLimitOrderPoolReserveMapResponse.Merge(m, src)
}
func (m *QueryGetLimitOrderPoolReserveMapResponse) XXX_Size() int {
	return m.Size()
}
func (m *QueryGetLimitOrderPoolReserveMapResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_QueryGetLimitOrderPoolReserveMapResponse.DiscardUnknown(m)
}

var xxx_messageInfo_QueryGetLimitOrderPoolReserveMapResponse proto.InternalMessageInfo

func (m *QueryGetLimitOrderPoolReserveMapResponse) GetLimitOrderPoolReserveMap() LimitOrderPoolReserveMap {
	if m != nil {
		return m.LimitOrderPoolReserveMap
	}
	return LimitOrderPoolReserveMap{}
}

type QueryAllLimitOrderPoolReserveMapRequest struct {
	Pagination *query.PageRequest `protobuf:"bytes,1,opt,name=pagination,proto3" json:"pagination,omitempty"`
}

func (m *QueryAllLimitOrderPoolReserveMapRequest) Reset() {
	*m = QueryAllLimitOrderPoolReserveMapRequest{}
}
func (m *QueryAllLimitOrderPoolReserveMapRequest) String() string { return proto.CompactTextString(m) }
func (*QueryAllLimitOrderPoolReserveMapRequest) ProtoMessage()    {}
func (*QueryAllLimitOrderPoolReserveMapRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_d8e98105e6e08a59, []int{40}
}
func (m *QueryAllLimitOrderPoolReserveMapRequest) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *QueryAllLimitOrderPoolReserveMapRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_QueryAllLimitOrderPoolReserveMapRequest.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *QueryAllLimitOrderPoolReserveMapRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_QueryAllLimitOrderPoolReserveMapRequest.Merge(m, src)
}
func (m *QueryAllLimitOrderPoolReserveMapRequest) XXX_Size() int {
	return m.Size()
}
func (m *QueryAllLimitOrderPoolReserveMapRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_QueryAllLimitOrderPoolReserveMapRequest.DiscardUnknown(m)
}

var xxx_messageInfo_QueryAllLimitOrderPoolReserveMapRequest proto.InternalMessageInfo

func (m *QueryAllLimitOrderPoolReserveMapRequest) GetPagination() *query.PageRequest {
	if m != nil {
		return m.Pagination
	}
	return nil
}

type QueryAllLimitOrderPoolReserveMapResponse struct {
	LimitOrderPoolReserveMap []LimitOrderPoolReserveMap `protobuf:"bytes,1,rep,name=limitOrderPoolReserveMap,proto3" json:"limitOrderPoolReserveMap"`
	Pagination               *query.PageResponse        `protobuf:"bytes,2,opt,name=pagination,proto3" json:"pagination,omitempty"`
}

func (m *QueryAllLimitOrderPoolReserveMapResponse) Reset() {
	*m = QueryAllLimitOrderPoolReserveMapResponse{}
}
func (m *QueryAllLimitOrderPoolReserveMapResponse) String() string { return proto.CompactTextString(m) }
func (*QueryAllLimitOrderPoolReserveMapResponse) ProtoMessage()    {}
func (*QueryAllLimitOrderPoolReserveMapResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_d8e98105e6e08a59, []int{41}
}
func (m *QueryAllLimitOrderPoolReserveMapResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *QueryAllLimitOrderPoolReserveMapResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_QueryAllLimitOrderPoolReserveMapResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *QueryAllLimitOrderPoolReserveMapResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_QueryAllLimitOrderPoolReserveMapResponse.Merge(m, src)
}
func (m *QueryAllLimitOrderPoolReserveMapResponse) XXX_Size() int {
	return m.Size()
}
func (m *QueryAllLimitOrderPoolReserveMapResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_QueryAllLimitOrderPoolReserveMapResponse.DiscardUnknown(m)
}

var xxx_messageInfo_QueryAllLimitOrderPoolReserveMapResponse proto.InternalMessageInfo

func (m *QueryAllLimitOrderPoolReserveMapResponse) GetLimitOrderPoolReserveMap() []LimitOrderPoolReserveMap {
	if m != nil {
		return m.LimitOrderPoolReserveMap
	}
	return nil
}

func (m *QueryAllLimitOrderPoolReserveMapResponse) GetPagination() *query.PageResponse {
	if m != nil {
		return m.Pagination
	}
	return nil
}

type QueryGetLimitOrderPoolFillMapRequest struct {
	PairId    string `protobuf:"bytes,1,opt,name=pairId,proto3" json:"pairId,omitempty"`
	TickIndex int64  `protobuf:"varint,2,opt,name=tickIndex,proto3" json:"tickIndex,omitempty"`
	Token     string `protobuf:"bytes,3,opt,name=token,proto3" json:"token,omitempty"`
	Count     uint64 `protobuf:"varint,4,opt,name=count,proto3" json:"count,omitempty"`
}

func (m *QueryGetLimitOrderPoolFillMapRequest) Reset()         { *m = QueryGetLimitOrderPoolFillMapRequest{} }
func (m *QueryGetLimitOrderPoolFillMapRequest) String() string { return proto.CompactTextString(m) }
func (*QueryGetLimitOrderPoolFillMapRequest) ProtoMessage()    {}
func (*QueryGetLimitOrderPoolFillMapRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_d8e98105e6e08a59, []int{42}
}
func (m *QueryGetLimitOrderPoolFillMapRequest) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *QueryGetLimitOrderPoolFillMapRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_QueryGetLimitOrderPoolFillMapRequest.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *QueryGetLimitOrderPoolFillMapRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_QueryGetLimitOrderPoolFillMapRequest.Merge(m, src)
}
func (m *QueryGetLimitOrderPoolFillMapRequest) XXX_Size() int {
	return m.Size()
}
func (m *QueryGetLimitOrderPoolFillMapRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_QueryGetLimitOrderPoolFillMapRequest.DiscardUnknown(m)
}

var xxx_messageInfo_QueryGetLimitOrderPoolFillMapRequest proto.InternalMessageInfo

func (m *QueryGetLimitOrderPoolFillMapRequest) GetPairId() string {
	if m != nil {
		return m.PairId
	}
	return ""
}

func (m *QueryGetLimitOrderPoolFillMapRequest) GetTickIndex() int64 {
	if m != nil {
		return m.TickIndex
	}
	return 0
}

func (m *QueryGetLimitOrderPoolFillMapRequest) GetToken() string {
	if m != nil {
		return m.Token
	}
	return ""
}

func (m *QueryGetLimitOrderPoolFillMapRequest) GetCount() uint64 {
	if m != nil {
		return m.Count
	}
	return 0
}

type QueryGetLimitOrderPoolFillMapResponse struct {
	LimitOrderPoolFillMap LimitOrderPoolFillMap `protobuf:"bytes,1,opt,name=limitOrderPoolFillMap,proto3" json:"limitOrderPoolFillMap"`
}

func (m *QueryGetLimitOrderPoolFillMapResponse) Reset()         { *m = QueryGetLimitOrderPoolFillMapResponse{} }
func (m *QueryGetLimitOrderPoolFillMapResponse) String() string { return proto.CompactTextString(m) }
func (*QueryGetLimitOrderPoolFillMapResponse) ProtoMessage()    {}
func (*QueryGetLimitOrderPoolFillMapResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_d8e98105e6e08a59, []int{43}
}
func (m *QueryGetLimitOrderPoolFillMapResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *QueryGetLimitOrderPoolFillMapResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_QueryGetLimitOrderPoolFillMapResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *QueryGetLimitOrderPoolFillMapResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_QueryGetLimitOrderPoolFillMapResponse.Merge(m, src)
}
func (m *QueryGetLimitOrderPoolFillMapResponse) XXX_Size() int {
	return m.Size()
}
func (m *QueryGetLimitOrderPoolFillMapResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_QueryGetLimitOrderPoolFillMapResponse.DiscardUnknown(m)
}

var xxx_messageInfo_QueryGetLimitOrderPoolFillMapResponse proto.InternalMessageInfo

func (m *QueryGetLimitOrderPoolFillMapResponse) GetLimitOrderPoolFillMap() LimitOrderPoolFillMap {
	if m != nil {
		return m.LimitOrderPoolFillMap
	}
	return LimitOrderPoolFillMap{}
}

type QueryAllLimitOrderPoolFillMapRequest struct {
	Pagination *query.PageRequest `protobuf:"bytes,1,opt,name=pagination,proto3" json:"pagination,omitempty"`
}

func (m *QueryAllLimitOrderPoolFillMapRequest) Reset()         { *m = QueryAllLimitOrderPoolFillMapRequest{} }
func (m *QueryAllLimitOrderPoolFillMapRequest) String() string { return proto.CompactTextString(m) }
func (*QueryAllLimitOrderPoolFillMapRequest) ProtoMessage()    {}
func (*QueryAllLimitOrderPoolFillMapRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_d8e98105e6e08a59, []int{44}
}
func (m *QueryAllLimitOrderPoolFillMapRequest) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *QueryAllLimitOrderPoolFillMapRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_QueryAllLimitOrderPoolFillMapRequest.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *QueryAllLimitOrderPoolFillMapRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_QueryAllLimitOrderPoolFillMapRequest.Merge(m, src)
}
func (m *QueryAllLimitOrderPoolFillMapRequest) XXX_Size() int {
	return m.Size()
}
func (m *QueryAllLimitOrderPoolFillMapRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_QueryAllLimitOrderPoolFillMapRequest.DiscardUnknown(m)
}

var xxx_messageInfo_QueryAllLimitOrderPoolFillMapRequest proto.InternalMessageInfo

func (m *QueryAllLimitOrderPoolFillMapRequest) GetPagination() *query.PageRequest {
	if m != nil {
		return m.Pagination
	}
	return nil
}

type QueryAllLimitOrderPoolFillMapResponse struct {
	LimitOrderPoolFillMap []LimitOrderPoolFillMap `protobuf:"bytes,1,rep,name=limitOrderPoolFillMap,proto3" json:"limitOrderPoolFillMap"`
	Pagination            *query.PageResponse     `protobuf:"bytes,2,opt,name=pagination,proto3" json:"pagination,omitempty"`
}

func (m *QueryAllLimitOrderPoolFillMapResponse) Reset()         { *m = QueryAllLimitOrderPoolFillMapResponse{} }
func (m *QueryAllLimitOrderPoolFillMapResponse) String() string { return proto.CompactTextString(m) }
func (*QueryAllLimitOrderPoolFillMapResponse) ProtoMessage()    {}
func (*QueryAllLimitOrderPoolFillMapResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_d8e98105e6e08a59, []int{45}
}
func (m *QueryAllLimitOrderPoolFillMapResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *QueryAllLimitOrderPoolFillMapResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_QueryAllLimitOrderPoolFillMapResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *QueryAllLimitOrderPoolFillMapResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_QueryAllLimitOrderPoolFillMapResponse.Merge(m, src)
}
func (m *QueryAllLimitOrderPoolFillMapResponse) XXX_Size() int {
	return m.Size()
}
func (m *QueryAllLimitOrderPoolFillMapResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_QueryAllLimitOrderPoolFillMapResponse.DiscardUnknown(m)
}

var xxx_messageInfo_QueryAllLimitOrderPoolFillMapResponse proto.InternalMessageInfo

func (m *QueryAllLimitOrderPoolFillMapResponse) GetLimitOrderPoolFillMap() []LimitOrderPoolFillMap {
	if m != nil {
		return m.LimitOrderPoolFillMap
	}
	return nil
}

func (m *QueryAllLimitOrderPoolFillMapResponse) GetPagination() *query.PageResponse {
	if m != nil {
		return m.Pagination
	}
	return nil
}

func init() {
	proto.RegisterType((*QueryParamsRequest)(nil), "nicholasdotsol.duality.dex.QueryParamsRequest")
	proto.RegisterType((*QueryParamsResponse)(nil), "nicholasdotsol.duality.dex.QueryParamsResponse")
	proto.RegisterType((*QueryGetTickObjectRequest)(nil), "nicholasdotsol.duality.dex.QueryGetTickObjectRequest")
	proto.RegisterType((*QueryGetTickObjectResponse)(nil), "nicholasdotsol.duality.dex.QueryGetTickObjectResponse")
	proto.RegisterType((*QueryAllTickObjectRequest)(nil), "nicholasdotsol.duality.dex.QueryAllTickObjectRequest")
	proto.RegisterType((*QueryAllTickObjectResponse)(nil), "nicholasdotsol.duality.dex.QueryAllTickObjectResponse")
	proto.RegisterType((*QueryGetPairMapRequest)(nil), "nicholasdotsol.duality.dex.QueryGetPairMapRequest")
	proto.RegisterType((*QueryGetPairMapResponse)(nil), "nicholasdotsol.duality.dex.QueryGetPairMapResponse")
	proto.RegisterType((*QueryAllPairMapRequest)(nil), "nicholasdotsol.duality.dex.QueryAllPairMapRequest")
	proto.RegisterType((*QueryAllPairMapResponse)(nil), "nicholasdotsol.duality.dex.QueryAllPairMapResponse")
	proto.RegisterType((*QueryGetTokensRequest)(nil), "nicholasdotsol.duality.dex.QueryGetTokensRequest")
	proto.RegisterType((*QueryGetTokensResponse)(nil), "nicholasdotsol.duality.dex.QueryGetTokensResponse")
	proto.RegisterType((*QueryAllTokensRequest)(nil), "nicholasdotsol.duality.dex.QueryAllTokensRequest")
	proto.RegisterType((*QueryAllTokensResponse)(nil), "nicholasdotsol.duality.dex.QueryAllTokensResponse")
	proto.RegisterType((*QueryGetTokenObjectRequest)(nil), "nicholasdotsol.duality.dex.QueryGetTokenObjectRequest")
	proto.RegisterType((*QueryGetTokenObjectResponse)(nil), "nicholasdotsol.duality.dex.QueryGetTokenObjectResponse")
	proto.RegisterType((*QueryAllTokenObjectRequest)(nil), "nicholasdotsol.duality.dex.QueryAllTokenObjectRequest")
	proto.RegisterType((*QueryAllTokenObjectResponse)(nil), "nicholasdotsol.duality.dex.QueryAllTokenObjectResponse")
	proto.RegisterType((*QueryGetSharesRequest)(nil), "nicholasdotsol.duality.dex.QueryGetSharesRequest")
	proto.RegisterType((*QueryGetSharesResponse)(nil), "nicholasdotsol.duality.dex.QueryGetSharesResponse")
	proto.RegisterType((*QueryAllSharesRequest)(nil), "nicholasdotsol.duality.dex.QueryAllSharesRequest")
	proto.RegisterType((*QueryAllSharesResponse)(nil), "nicholasdotsol.duality.dex.QueryAllSharesResponse")
	proto.RegisterType((*QueryGetFeeListRequest)(nil), "nicholasdotsol.duality.dex.QueryGetFeeListRequest")
	proto.RegisterType((*QueryGetFeeListResponse)(nil), "nicholasdotsol.duality.dex.QueryGetFeeListResponse")
	proto.RegisterType((*QueryAllFeeListRequest)(nil), "nicholasdotsol.duality.dex.QueryAllFeeListRequest")
	proto.RegisterType((*QueryAllFeeListResponse)(nil), "nicholasdotsol.duality.dex.QueryAllFeeListResponse")
	proto.RegisterType((*QueryGetLimitOrderPoolUserShareMapRequest)(nil), "nicholasdotsol.duality.dex.QueryGetLimitOrderPoolUserShareMapRequest")
	proto.RegisterType((*QueryGetLimitOrderPoolUserShareMapResponse)(nil), "nicholasdotsol.duality.dex.QueryGetLimitOrderPoolUserShareMapResponse")
	proto.RegisterType((*QueryAllLimitOrderPoolUserShareMapRequest)(nil), "nicholasdotsol.duality.dex.QueryAllLimitOrderPoolUserShareMapRequest")
	proto.RegisterType((*QueryAllLimitOrderPoolUserShareMapResponse)(nil), "nicholasdotsol.duality.dex.QueryAllLimitOrderPoolUserShareMapResponse")
	proto.RegisterType((*QueryGetLimitOrderPoolUserSharesWithdrawnRequest)(nil), "nicholasdotsol.duality.dex.QueryGetLimitOrderPoolUserSharesWithdrawnRequest")
	proto.RegisterType((*QueryGetLimitOrderPoolUserSharesWithdrawnResponse)(nil), "nicholasdotsol.duality.dex.QueryGetLimitOrderPoolUserSharesWithdrawnResponse")
	proto.RegisterType((*QueryAllLimitOrderPoolUserSharesWithdrawnRequest)(nil), "nicholasdotsol.duality.dex.QueryAllLimitOrderPoolUserSharesWithdrawnRequest")
	proto.RegisterType((*QueryAllLimitOrderPoolUserSharesWithdrawnResponse)(nil), "nicholasdotsol.duality.dex.QueryAllLimitOrderPoolUserSharesWithdrawnResponse")
	proto.RegisterType((*QueryGetLimitOrderPoolTotalSharesMapRequest)(nil), "nicholasdotsol.duality.dex.QueryGetLimitOrderPoolTotalSharesMapRequest")
	proto.RegisterType((*QueryGetLimitOrderPoolTotalSharesMapResponse)(nil), "nicholasdotsol.duality.dex.QueryGetLimitOrderPoolTotalSharesMapResponse")
	proto.RegisterType((*QueryAllLimitOrderPoolTotalSharesMapRequest)(nil), "nicholasdotsol.duality.dex.QueryAllLimitOrderPoolTotalSharesMapRequest")
	proto.RegisterType((*QueryAllLimitOrderPoolTotalSharesMapResponse)(nil), "nicholasdotsol.duality.dex.QueryAllLimitOrderPoolTotalSharesMapResponse")
	proto.RegisterType((*QueryGetLimitOrderPoolReserveMapRequest)(nil), "nicholasdotsol.duality.dex.QueryGetLimitOrderPoolReserveMapRequest")
	proto.RegisterType((*QueryGetLimitOrderPoolReserveMapResponse)(nil), "nicholasdotsol.duality.dex.QueryGetLimitOrderPoolReserveMapResponse")
	proto.RegisterType((*QueryAllLimitOrderPoolReserveMapRequest)(nil), "nicholasdotsol.duality.dex.QueryAllLimitOrderPoolReserveMapRequest")
	proto.RegisterType((*QueryAllLimitOrderPoolReserveMapResponse)(nil), "nicholasdotsol.duality.dex.QueryAllLimitOrderPoolReserveMapResponse")
	proto.RegisterType((*QueryGetLimitOrderPoolFillMapRequest)(nil), "nicholasdotsol.duality.dex.QueryGetLimitOrderPoolFillMapRequest")
	proto.RegisterType((*QueryGetLimitOrderPoolFillMapResponse)(nil), "nicholasdotsol.duality.dex.QueryGetLimitOrderPoolFillMapResponse")
	proto.RegisterType((*QueryAllLimitOrderPoolFillMapRequest)(nil), "nicholasdotsol.duality.dex.QueryAllLimitOrderPoolFillMapRequest")
	proto.RegisterType((*QueryAllLimitOrderPoolFillMapResponse)(nil), "nicholasdotsol.duality.dex.QueryAllLimitOrderPoolFillMapResponse")
}

func init() { proto.RegisterFile("dex/query.proto", fileDescriptor_d8e98105e6e08a59) }

var fileDescriptor_d8e98105e6e08a59 = []byte{
	// 1935 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0xcc, 0x5a, 0x4d, 0x6c, 0x14, 0xc9,
	0x15, 0x76, 0xcd, 0x80, 0x91, 0x0b, 0x85, 0xa0, 0x0a, 0x26, 0xce, 0xe0, 0x18, 0x68, 0x8c, 0x7f,
	0xf8, 0x99, 0x66, 0x4c, 0x30, 0x24, 0xc8, 0x8a, 0x8d, 0xc1, 0x0e, 0x91, 0x89, 0xcd, 0x40, 0x84,
	0x84, 0x92, 0x4c, 0xda, 0x33, 0x65, 0xbb, 0x4d, 0x7b, 0x7a, 0xdc, 0xdd, 0x06, 0x3b, 0x8e, 0xa5,
	0x88, 0x53, 0xa4, 0x44, 0x82, 0x28, 0x4a, 0x6e, 0xfb, 0xa3, 0x45, 0x2b, 0xb4, 0x68, 0xb5, 0x5a,
	0x69, 0x0f, 0x1c, 0x56, 0x5a, 0xed, 0x6d, 0x39, 0x22, 0xed, 0x65, 0x4f, 0xec, 0x0a, 0xf6, 0xb4,
	0x7b, 0xe4, 0xb8, 0x7b, 0x58, 0x75, 0xd5, 0xeb, 0xe9, 0xee, 0x99, 0xfe, 0xa9, 0x9e, 0x69, 0x5b,
	0x7b, 0x73, 0x97, 0xeb, 0x55, 0x7d, 0xef, 0xfb, 0xbe, 0x57, 0xdd, 0xf3, 0xba, 0xf1, 0x4f, 0x2b,
	0x74, 0x5d, 0x5e, 0x5d, 0xa3, 0xc6, 0x46, 0xbe, 0x66, 0xe8, 0x96, 0x4e, 0x72, 0x55, 0xb5, 0xbc,
	0xa4, 0x6b, 0x8a, 0x59, 0xd1, 0x2d, 0x53, 0xd7, 0xf2, 0x95, 0x35, 0x45, 0x53, 0xad, 0x8d, 0x7c,
	0x85, 0xae, 0xe7, 0x0e, 0x2c, 0xea, 0x8b, 0x3a, 0x9b, 0x26, 0xdb, 0x7f, 0xf1, 0x88, 0x5c, 0xef,
	0xa2, 0xae, 0x2f, 0x6a, 0x54, 0x56, 0x6a, 0xaa, 0xac, 0x54, 0xab, 0xba, 0xa5, 0x58, 0xaa, 0x5e,
	0x35, 0xe1, 0xbf, 0x27, 0xca, 0xba, 0xb9, 0xa2, 0x9b, 0xf2, 0xbc, 0x62, 0x52, 0xbe, 0x91, 0x7c,
	0xb7, 0x30, 0x4f, 0x2d, 0xa5, 0x20, 0xd7, 0x94, 0x45, 0xb5, 0xca, 0x26, 0xc3, 0xdc, 0xfd, 0x36,
	0x98, 0x9a, 0x62, 0x28, 0x2b, 0x4e, 0x74, 0xb7, 0x3d, 0x62, 0xa9, 0xe5, 0x3b, 0x25, 0x7d, 0x7e,
	0x99, 0x96, 0x2d, 0x18, 0x26, 0x7c, 0xa2, 0x6a, 0x94, 0x56, 0x94, 0x9a, 0x37, 0xd8, 0xd2, 0xef,
	0xd0, 0xfa, 0xd6, 0x07, 0xeb, 0x23, 0xfe, 0x68, 0x36, 0xd3, 0x5c, 0x52, 0x0c, 0x6a, 0x7a, 0xd7,
	0x5b, 0xa0, 0xb4, 0xa4, 0xa9, 0xa6, 0x33, 0x6b, 0xd8, 0x1e, 0xd3, 0xd4, 0x15, 0xd5, 0x2a, 0xe9,
	0x46, 0x85, 0x1a, 0xa5, 0x9a, 0xae, 0x6b, 0xa5, 0x35, 0x93, 0x1a, 0x25, 0x16, 0xeb, 0xd9, 0xfa,
	0x4c, 0xcc, 0x54, 0xb3, 0x74, 0x4f, 0xb5, 0x96, 0x2a, 0x86, 0x72, 0xcf, 0xc9, 0xf4, 0x64, 0x60,
	0x84, 0xa5, 0x5b, 0x8a, 0xe6, 0x84, 0xb8, 0xcb, 0x0f, 0x04, 0x4e, 0x36, 0xa8, 0x49, 0x8d, 0xbb,
	0x5e, 0x18, 0xc7, 0x02, 0xe7, 0x2d, 0xa8, 0x9a, 0xe6, 0x4e, 0x92, 0x0e, 0x60, 0x72, 0xdd, 0x56,
	0x61, 0x8e, 0xd1, 0x5c, 0xa4, 0xab, 0x6b, 0xd4, 0xb4, 0xa4, 0x5b, 0xf8, 0x67, 0xbe, 0x51, 0xb3,
	0xa6, 0x57, 0x4d, 0x4a, 0xc6, 0x71, 0x27, 0x97, 0xa3, 0x07, 0x1d, 0x41, 0x43, 0x7b, 0x47, 0xa4,
	0x7c, 0xb8, 0x3b, 0xf2, 0x3c, 0xf6, 0xd2, 0xae, 0x67, 0x2f, 0x0e, 0x77, 0x14, 0x21, 0x4e, 0xba,
	0x8e, 0x7f, 0xc1, 0x16, 0x9e, 0xa6, 0xd6, 0x4d, 0xb5, 0x7c, 0x67, 0x96, 0xe9, 0x00, 0xbb, 0x92,
	0x5e, 0xdc, 0x65, 0x6b, 0x7b, 0xb5, 0x5a, 0xa1, 0xeb, 0x6c, 0x87, 0x6c, 0xd1, 0x1d, 0x20, 0x07,
	0xed, 0xcd, 0x55, 0xe3, 0x6a, 0xa5, 0x27, 0x73, 0x04, 0x0d, 0x75, 0x15, 0xe1, 0x4a, 0x5a, 0xc6,
	0xb9, 0xa0, 0x25, 0x01, 0xf2, 0x0c, 0xc6, 0x56, 0x7d, 0x14, 0x60, 0x0f, 0x44, 0xc1, 0x76, 0xd7,
	0x00, 0xe8, 0x9e, 0x78, 0xa9, 0x0c, 0xf0, 0x27, 0x34, 0xad, 0x19, 0xfe, 0x14, 0xc6, 0xae, 0x85,
	0xeb, 0x5b, 0x71, 0xbf, 0xe7, 0x6d, 0xbf, 0xe7, 0x79, 0x61, 0x81, 0xdf, 0xf3, 0x73, 0xca, 0x22,
	0x85, 0xd8, 0xa2, 0x27, 0x52, 0xfa, 0x08, 0x41, 0x46, 0x0d, 0xbb, 0x84, 0x64, 0x94, 0x6d, 0x27,
	0x23, 0x32, 0xed, 0x03, 0x9d, 0x61, 0xa0, 0x07, 0x63, 0x41, 0x73, 0x28, 0x3e, 0xd4, 0x67, 0xf0,
	0x41, 0x47, 0x86, 0x39, 0x45, 0x35, 0xae, 0x29, 0x35, 0x87, 0x17, 0x57, 0x38, 0xe4, 0x13, 0xee,
	0x2f, 0xf8, 0xe7, 0x4d, 0x11, 0x90, 0xe3, 0x24, 0xde, 0x53, 0xe3, 0x43, 0xc0, 0xe3, 0xb1, 0x68,
	0xa7, 0xb1, 0xa9, 0x90, 0x9d, 0x13, 0x29, 0xfd, 0x15, 0x10, 0x4d, 0x68, 0x5a, 0x03, 0xa2, 0xb4,
	0x94, 0x7a, 0x8c, 0x20, 0x05, 0xef, 0x16, 0x41, 0x29, 0x64, 0x5b, 0x4b, 0x21, 0x3d, 0x75, 0x06,
	0x71, 0x77, 0xbd, 0x48, 0xd8, 0x99, 0xe8, 0x50, 0xb1, 0x0f, 0x67, 0x54, 0x2e, 0xcc, 0xae, 0x62,
	0x46, 0xad, 0x48, 0xb7, 0x5d, 0x19, 0x9d, 0x89, 0x6e, 0xf1, 0xf3, 0x11, 0x91, 0xe2, 0xe7, 0x33,
	0x9d, 0xe2, 0xe7, 0x57, 0x52, 0x09, 0x40, 0xd8, 0xbe, 0xf6, 0x81, 0x48, 0x4b, 0x8f, 0x47, 0xc8,
	0x95, 0x3c, 0x02, 0x7d, 0xb6, 0x15, 0xf4, 0xe9, 0x69, 0x31, 0xea, 0x39, 0xb0, 0xec, 0xa5, 0xfd,
	0xa7, 0x48, 0x0f, 0xde, 0xa3, 0x54, 0x2a, 0x06, 0x35, 0x4d, 0x28, 0x17, 0xe7, 0x52, 0xaa, 0xe2,
	0x43, 0x81, 0x71, 0x90, 0xe1, 0x2c, 0xde, 0x6b, 0xb9, 0xc3, 0xc0, 0xe2, 0x60, 0x6c, 0x9a, 0xbe,
	0x93, 0xc1, 0xbb, 0x82, 0x54, 0xf1, 0x1c, 0x43, 0xcd, 0x38, 0xd3, 0xd2, 0xec, 0x29, 0x82, 0xb4,
	0x1a, 0xb7, 0x09, 0x4b, 0x2b, 0xdb, 0x5e, 0x5a, 0xe9, 0xe9, 0xb8, 0xe1, 0xd6, 0xd4, 0x0d, 0x76,
	0x8f, 0x8e, 0x95, 0x30, 0xec, 0x1e, 0xe6, 0xbf, 0xf3, 0x65, 0x1b, 0xef, 0x7c, 0xfb, 0x71, 0x76,
	0x81, 0xd2, 0x9e, 0x5d, 0xac, 0x48, 0xed, 0x3f, 0xbd, 0x55, 0xea, 0x6c, 0xed, 0xfa, 0x9c, 0x3f,
	0x30, 0x88, 0x54, 0x29, 0x8f, 0x75, 0x7c, 0xce, 0xe3, 0xbc, 0x55, 0xea, 0x4f, 0x6b, 0x3b, 0xaa,
	0x34, 0x02, 0x7d, 0xb6, 0x15, 0xf4, 0xe9, 0xa9, 0x3b, 0xe4, 0x52, 0x3c, 0x45, 0xe9, 0x8c, 0x6a,
	0x5a, 0x61, 0x47, 0xa6, 0xe7, 0x3e, 0x56, 0x9f, 0xe9, 0xde, 0x04, 0x60, 0x48, 0xe4, 0x3e, 0x06,
	0x53, 0x9d, 0x9b, 0x00, 0x5c, 0x7a, 0xef, 0x63, 0x0d, 0x48, 0xb6, 0xe3, 0x3e, 0x16, 0x99, 0x42,
	0xb6, 0xb5, 0x14, 0xd2, 0x53, 0xe5, 0x31, 0xc2, 0xc3, 0x0e, 0xd9, 0x33, 0xf6, 0xa3, 0xed, 0xac,
	0xfd, 0x64, 0x3b, 0xa7, 0xeb, 0xda, 0x1f, 0x4d, 0x6a, 0x30, 0x47, 0xc4, 0x3f, 0x79, 0xf8, 0xcb,
	0x2d, 0xd3, 0x58, 0x6e, 0x07, 0xf0, 0x6e, 0x76, 0x5e, 0xb0, 0x42, 0xec, 0x2a, 0xf2, 0x0b, 0x7b,
	0xb4, 0xac, 0xaf, 0x55, 0x2d, 0x28, 0x43, 0x7e, 0xe1, 0x2d, 0xf5, 0xdd, 0xfe, 0xd3, 0xfa, 0x09,
	0xc2, 0x27, 0x44, 0x90, 0x02, 0xcd, 0x7f, 0xc7, 0x39, 0x2d, 0x74, 0x16, 0x48, 0x3b, 0x1a, 0xc5,
	0x7c, 0xf8, 0x1e, 0x20, 0x46, 0xc4, 0xfa, 0x92, 0x09, 0xac, 0x4e, 0x68, 0x5a, 0x3c, 0xab, 0x69,
	0xb9, 0xee, 0xb5, 0xc3, 0x50, 0xcc, 0xae, 0x82, 0x0c, 0x65, 0xb7, 0x93, 0xa1, 0xf4, 0x1c, 0xfc,
	0x01, 0xc2, 0x67, 0x62, 0x7c, 0x61, 0xde, 0x72, 0x7e, 0x1e, 0xfe, 0x18, 0x8c, 0xfc, 0x19, 0xc2,
	0x85, 0x04, 0x80, 0x41, 0xad, 0xff, 0x20, 0x7c, 0x54, 0x8b, 0x9b, 0x0d, 0xe6, 0x19, 0x6b, 0x41,
	0x35, 0x77, 0x11, 0x10, 0x2f, 0x7e, 0x37, 0xe9, 0x6f, 0xc0, 0x7c, 0xb8, 0xdf, 0x9a, 0x99, 0x4f,
	0xcb, 0xec, 0x0f, 0x33, 0xc0, 0xa2, 0xd8, 0xe6, 0x09, 0x59, 0xcc, 0xee, 0x1c, 0x8b, 0xe9, 0x55,
	0xc2, 0x03, 0x84, 0x4f, 0x06, 0x1b, 0xeb, 0xa6, 0x6e, 0x29, 0xf0, 0x68, 0xb0, 0x93, 0xa7, 0xb9,
	0xfd, 0xcb, 0xfb, 0x94, 0x18, 0x22, 0xd0, 0xe7, 0x3e, 0xc2, 0xbd, 0x5a, 0xc4, 0x44, 0x30, 0xcc,
	0x05, 0x71, 0x69, 0xfc, 0xf1, 0xa0, 0x4a, 0xe4, 0x1e, 0xd2, 0x1a, 0xd0, 0xd8, 0xe4, 0xac, 0x60,
	0x1a, 0xd3, 0x72, 0xf4, 0xf7, 0x0e, 0x59, 0xb1, 0xfb, 0x8a, 0x93, 0x95, 0xdd, 0x6e, 0xb2, 0xd2,
	0x73, 0xef, 0xbf, 0x10, 0x1e, 0x0c, 0xf6, 0x4a, 0x91, 0x77, 0xe2, 0x76, 0xd4, 0xb9, 0xef, 0x20,
	0x3c, 0x14, 0x8f, 0x06, 0x84, 0xb8, 0x8b, 0x7b, 0xb4, 0x90, 0x39, 0xe0, 0x87, 0x5f, 0x89, 0x6b,
	0xe0, 0xc6, 0x02, 0xff, 0xa1, 0x6b, 0x4b, 0xab, 0xc0, 0x58, 0x93, 0x61, 0x9a, 0x19, 0x4b, 0xcb,
	0xa4, 0xdf, 0x3a, 0xbc, 0x44, 0xee, 0x29, 0xc4, 0x4b, 0x76, 0xbb, 0x78, 0x49, 0xcf, 0x93, 0xff,
	0x44, 0xb8, 0x3f, 0xd8, 0x05, 0x53, 0xaa, 0xa6, 0xed, 0xa8, 0x21, 0xff, 0x8f, 0xf0, 0xf1, 0x18,
	0x28, 0xc0, 0xfa, 0x0a, 0xee, 0xd6, 0x82, 0x26, 0x80, 0xea, 0x05, 0x71, 0xca, 0x21, 0x10, 0xf8,
	0x0e, 0x5e, 0x55, 0xaa, 0x02, 0x45, 0x4d, 0x86, 0x68, 0xa0, 0x28, 0x2d, 0x07, 0x7e, 0xe9, 0x10,
	0x11, 0xbe, 0x61, 0x3c, 0x11, 0xd9, 0xf4, 0x89, 0x48, 0xcd, 0x75, 0x23, 0x4f, 0x06, 0xf0, 0x6e,
	0x96, 0x21, 0xf9, 0x1f, 0xc2, 0x9d, 0xbc, 0xed, 0x4f, 0xf2, 0x51, 0x68, 0x9b, 0xdf, 0x38, 0xe4,
	0x64, 0xe1, 0xf9, 0x1c, 0x81, 0x74, 0xe2, 0xfe, 0xe7, 0x5f, 0xff, 0x37, 0xd3, 0x4f, 0x24, 0xf9,
	0x0f, 0x10, 0x78, 0x59, 0xb7, 0x6e, 0xe8, 0x9a, 0x0c, 0x81, 0xb2, 0xfb, 0xf2, 0x88, 0x7c, 0x82,
	0x30, 0x76, 0xbb, 0xe0, 0xe4, 0x5c, 0xec, 0x5e, 0x41, 0xaf, 0x27, 0x72, 0xa3, 0x49, 0xc3, 0x00,
	0xe9, 0x04, 0x43, 0x7a, 0x91, 0xfc, 0x3a, 0x0a, 0x29, 0x7b, 0xa9, 0xb5, 0xa2, 0xd4, 0xe4, 0x4d,
	0x5e, 0x8a, 0x5b, 0xf2, 0x66, 0xbd, 0xf0, 0xb6, 0xc8, 0xfb, 0x08, 0xff, 0xc4, 0x5d, 0x79, 0x42,
	0xd3, 0x04, 0x72, 0x08, 0x7a, 0x47, 0x21, 0x90, 0x43, 0xe0, 0x4b, 0x07, 0xe9, 0x14, 0xcb, 0x61,
	0x80, 0xf4, 0x8b, 0xe4, 0x40, 0xde, 0x43, 0x78, 0x0f, 0x74, 0xb4, 0xc9, 0x88, 0x08, 0x6b, 0xfe,
	0xfe, 0x7c, 0xee, 0x6c, 0xa2, 0x18, 0x80, 0x78, 0x8e, 0x41, 0x94, 0xc9, 0xe9, 0x68, 0x43, 0xf0,
	0x97, 0x84, 0x75, 0x9a, 0xc9, 0x23, 0x84, 0x31, 0x2c, 0x65, 0xf3, 0x3a, 0x22, 0x42, 0x50, 0x62,
	0xb8, 0xcd, 0xef, 0x07, 0xc4, 0x18, 0x75, 0xe0, 0x92, 0xb7, 0x91, 0xd3, 0xbf, 0x26, 0x05, 0x21,
	0x1b, 0x7a, 0xfb, 0xeb, 0xb9, 0x91, 0x24, 0x21, 0x80, 0x4f, 0x66, 0xf8, 0x86, 0xc9, 0x60, 0xa4,
	0xe2, 0x2c, 0x46, 0xde, 0x54, 0x2b, 0x5b, 0xe4, 0x4d, 0x84, 0xbb, 0xf8, 0x1a, 0x36, 0x8f, 0x05,
	0x21, 0xa3, 0x25, 0x44, 0xd9, 0xd4, 0xd6, 0x17, 0x3b, 0x05, 0x38, 0x4a, 0xf2, 0x14, 0xe1, 0xbd,
	0x9e, 0xde, 0x30, 0x19, 0x15, 0x66, 0xc5, 0x5f, 0x43, 0xe7, 0x13, 0xc7, 0x01, 0xd8, 0xf3, 0x0c,
	0x6c, 0x81, 0xc8, 0xb1, 0x60, 0xb9, 0x45, 0xe1, 0x17, 0xf8, 0x16, 0xf9, 0x10, 0xe1, 0x7d, 0x9e,
	0x05, 0x6d, 0x7e, 0x47, 0x85, 0xc9, 0x4a, 0x0a, 0x3e, 0xb8, 0x0f, 0x2f, 0x9d, 0x66, 0xe0, 0x07,
	0xc9, 0x71, 0x21, 0xf0, 0xe4, 0x53, 0x84, 0x3b, 0xf9, 0x53, 0xb7, 0x98, 0x61, 0x7d, 0xad, 0x66,
	0x31, 0xc3, 0xfa, 0x7b, 0xc7, 0xd2, 0x2c, 0x03, 0x78, 0x95, 0x4c, 0x47, 0x01, 0xe4, 0x5d, 0x62,
	0x97, 0xda, 0xc0, 0xe3, 0x56, 0xde, 0x5c, 0xa0, 0x94, 0x1b, 0x9a, 0xef, 0x21, 0x6c, 0xe8, 0xa4,
	0x59, 0x34, 0x75, 0xc0, 0xc5, 0x0c, 0x0d, 0xbd, 0xee, 0x77, 0x51, 0xbd, 0x37, 0x2b, 0x76, 0xcc,
	0xfa, 0xdb, 0xc7, 0x62, 0xc7, 0x6c, 0x43, 0x3f, 0x58, 0x2a, 0x30, 0x80, 0x27, 0xc9, 0x70, 0x14,
	0x40, 0xe7, 0xdb, 0x09, 0x7e, 0x32, 0xd8, 0x47, 0x2c, 0x2c, 0x23, 0x7c, 0xc4, 0x26, 0x86, 0xda,
	0xdc, 0xba, 0x16, 0x3b, 0x62, 0x1d, 0xa8, 0xe4, 0xad, 0x0c, 0xce, 0x85, 0xb7, 0x08, 0xc9, 0x15,
	0x11, 0xb2, 0x62, 0x9b, 0xa7, 0xb9, 0xa9, 0x76, 0x97, 0x81, 0xdc, 0x0c, 0x96, 0x9b, 0x46, 0x96,
	0xa3, 0x72, 0x8b, 0xf9, 0x5c, 0xc5, 0x6b, 0x7e, 0xbb, 0x70, 0x1b, 0x8a, 0x80, 0x3d, 0xc8, 0x6f,
	0x79, 0x8e, 0xa1, 0xd7, 0x08, 0xff, 0x32, 0x1c, 0x9a, 0x2d, 0xed, 0x15, 0x11, 0x99, 0xd2, 0x20,
	0x49, 0xa8, 0x65, 0x2c, 0x4d, 0x32, 0x92, 0xc6, 0xc8, 0xc5, 0x36, 0x48, 0x22, 0x1f, 0x67, 0xf0,
	0xd1, 0xd8, 0xf6, 0x19, 0x99, 0x69, 0x43, 0xd7, 0xa6, 0xae, 0x63, 0xee, 0x5a, 0x4a, 0xab, 0x01,
	0x0f, 0x1b, 0x8c, 0x07, 0x93, 0xac, 0xb6, 0xc8, 0x83, 0xe7, 0x83, 0xa5, 0xa4, 0x9e, 0x79, 0x90,
	0xc1, 0xfd, 0xb1, 0x40, 0x6d, 0xeb, 0xcc, 0xb4, 0xa1, 0x79, 0x2b, 0x04, 0x26, 0xe9, 0xc3, 0x4a,
	0xbf, 0x67, 0x04, 0x5e, 0x26, 0x97, 0xda, 0x27, 0x90, 0xbc, 0x91, 0xc1, 0xbd, 0x33, 0x91, 0x2d,
	0xaa, 0xe4, 0xe2, 0x07, 0x76, 0xfa, 0x72, 0xbf, 0x6b, 0x7f, 0x21, 0xc8, 0x7f, 0x99, 0xe5, 0x5f,
	0x21, 0xf3, 0x89, 0xf2, 0x6f, 0xfc, 0x7e, 0x4d, 0xc8, 0x3b, 0xe4, 0x3b, 0x84, 0x0f, 0x47, 0x81,
	0xb2, 0xcd, 0x32, 0x9d, 0x5c, 0xde, 0x56, 0x29, 0x12, 0xec, 0x6e, 0x4a, 0x57, 0x18, 0x45, 0xbf,
	0x25, 0x63, 0x6d, 0x51, 0x44, 0xfe, 0x9d, 0xc1, 0x3d, 0x61, 0x8d, 0x24, 0x32, 0x99, 0x5c, 0xd0,
	0xa6, 0xd6, 0x5a, 0xee, 0x72, 0x7b, 0x8b, 0x40, 0xba, 0x94, 0xa5, 0x5b, 0x22, 0x7f, 0x4e, 0x94,
	0xae, 0xe7, 0x23, 0x45, 0x31, 0x33, 0x7c, 0x83, 0xf0, 0xa1, 0x30, 0x2c, 0xb6, 0x11, 0x26, 0x93,
	0xeb, 0xd7, 0x0a, 0x23, 0x02, 0xdd, 0x43, 0x69, 0x9c, 0x31, 0xf2, 0x1b, 0x72, 0xa1, 0x55, 0x46,
	0xc8, 0x3f, 0x32, 0xb8, 0x3b, 0xb0, 0x91, 0x43, 0xc6, 0x93, 0x6b, 0xe6, 0x6f, 0x67, 0xe5, 0x26,
	0xda, 0x58, 0x01, 0x12, 0x9c, 0x67, 0x09, 0xfe, 0x89, 0xdc, 0x4e, 0x94, 0xa0, 0xf3, 0xbd, 0xa9,
	0x98, 0xde, 0x2f, 0x50, 0xa3, 0xfd, 0x01, 0x85, 0x2d, 0xf6, 0x78, 0x72, 0x9d, 0x12, 0xb3, 0x10,
	0xd7, 0xa5, 0x93, 0xc6, 0x18, 0x0b, 0xe7, 0xc9, 0xb9, 0x96, 0x58, 0xb8, 0x34, 0xfd, 0xec, 0x65,
	0x1f, 0x7a, 0xfe, 0xb2, 0x0f, 0x7d, 0xf5, 0xb2, 0x0f, 0x3d, 0x7c, 0xd5, 0xd7, 0xf1, 0xfc, 0x55,
	0x5f, 0xc7, 0x17, 0xaf, 0xfa, 0x3a, 0x6e, 0x9f, 0x5e, 0x54, 0xad, 0xa5, 0xb5, 0xf9, 0x7c, 0x59,
	0x5f, 0x09, 0x5b, 0x7a, 0x9d, 0xff, 0xc8, 0xda, 0xa8, 0x51, 0x73, 0xbe, 0x93, 0x7d, 0xbf, 0x7b,
	0xf6, 0x87, 0x00, 0x00, 0x00, 0xff, 0xff, 0x72, 0x23, 0xa5, 0x83, 0xb2, 0x2d, 0x00, 0x00,
}

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ grpc.ClientConn

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion4

// QueryClient is the client API for Query service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://godoc.org/google.golang.org/grpc#ClientConn.NewStream.
type QueryClient interface {
	// Parameters queries the parameters of the module.
	Params(ctx context.Context, in *QueryParamsRequest, opts ...grpc.CallOption) (*QueryParamsResponse, error)
	// Queries a TickObject by index.
	TickObject(ctx context.Context, in *QueryGetTickObjectRequest, opts ...grpc.CallOption) (*QueryGetTickObjectResponse, error)
	// Queries a list of TickObject items.
	TickObjectAll(ctx context.Context, in *QueryAllTickObjectRequest, opts ...grpc.CallOption) (*QueryAllTickObjectResponse, error)
	// Queries a PairMap by index.
	PairMap(ctx context.Context, in *QueryGetPairMapRequest, opts ...grpc.CallOption) (*QueryGetPairMapResponse, error)
	// Queries a list of PairMap items.
	PairMapAll(ctx context.Context, in *QueryAllPairMapRequest, opts ...grpc.CallOption) (*QueryAllPairMapResponse, error)
	// Queries a Tokens by id.
	Tokens(ctx context.Context, in *QueryGetTokensRequest, opts ...grpc.CallOption) (*QueryGetTokensResponse, error)
	// Queries a list of Tokens items.
	TokensAll(ctx context.Context, in *QueryAllTokensRequest, opts ...grpc.CallOption) (*QueryAllTokensResponse, error)
	// Queries a TokenObject by index.
	TokenObject(ctx context.Context, in *QueryGetTokenObjectRequest, opts ...grpc.CallOption) (*QueryGetTokenObjectResponse, error)
	// Queries a list of TokenObject items.
	TokenObjectAll(ctx context.Context, in *QueryAllTokenObjectRequest, opts ...grpc.CallOption) (*QueryAllTokenObjectResponse, error)
	// Queries a Shares by index.
	Shares(ctx context.Context, in *QueryGetSharesRequest, opts ...grpc.CallOption) (*QueryGetSharesResponse, error)
	// Queries a list of Shares items.
	SharesAll(ctx context.Context, in *QueryAllSharesRequest, opts ...grpc.CallOption) (*QueryAllSharesResponse, error)
	// Queries a FeeList by id.
	FeeList(ctx context.Context, in *QueryGetFeeListRequest, opts ...grpc.CallOption) (*QueryGetFeeListResponse, error)
	// Queries a list of FeeList items.
	FeeListAll(ctx context.Context, in *QueryAllFeeListRequest, opts ...grpc.CallOption) (*QueryAllFeeListResponse, error)
	// Queries a LimitOrderPoolUserShareMap by index.
	LimitOrderPoolUserShareMap(ctx context.Context, in *QueryGetLimitOrderPoolUserShareMapRequest, opts ...grpc.CallOption) (*QueryGetLimitOrderPoolUserShareMapResponse, error)
	// Queries a list of LimitOrderPoolUserShareMap items.
	LimitOrderPoolUserShareMapAll(ctx context.Context, in *QueryAllLimitOrderPoolUserShareMapRequest, opts ...grpc.CallOption) (*QueryAllLimitOrderPoolUserShareMapResponse, error)
	// Queries a LimitOrderPoolUserSharesWithdrawn by index.
	LimitOrderPoolUserSharesWithdrawn(ctx context.Context, in *QueryGetLimitOrderPoolUserSharesWithdrawnRequest, opts ...grpc.CallOption) (*QueryGetLimitOrderPoolUserSharesWithdrawnResponse, error)
	// Queries a list of LimitOrderPoolUserSharesWithdrawn items.
	LimitOrderPoolUserSharesWithdrawnAll(ctx context.Context, in *QueryAllLimitOrderPoolUserSharesWithdrawnRequest, opts ...grpc.CallOption) (*QueryAllLimitOrderPoolUserSharesWithdrawnResponse, error)
	// Queries a LimitOrderPoolTotalSharesMap by index.
	LimitOrderPoolTotalSharesMap(ctx context.Context, in *QueryGetLimitOrderPoolTotalSharesMapRequest, opts ...grpc.CallOption) (*QueryGetLimitOrderPoolTotalSharesMapResponse, error)
	// Queries a list of LimitOrderPoolTotalSharesMap items.
	LimitOrderPoolTotalSharesMapAll(ctx context.Context, in *QueryAllLimitOrderPoolTotalSharesMapRequest, opts ...grpc.CallOption) (*QueryAllLimitOrderPoolTotalSharesMapResponse, error)
	// Queries a LimitOrderPoolReserveMap by index.
	LimitOrderPoolReserveMap(ctx context.Context, in *QueryGetLimitOrderPoolReserveMapRequest, opts ...grpc.CallOption) (*QueryGetLimitOrderPoolReserveMapResponse, error)
	// Queries a list of LimitOrderPoolReserveMap items.
	LimitOrderPoolReserveMapAll(ctx context.Context, in *QueryAllLimitOrderPoolReserveMapRequest, opts ...grpc.CallOption) (*QueryAllLimitOrderPoolReserveMapResponse, error)
	// Queries a LimitOrderPoolFillMap by index.
	LimitOrderPoolFillMap(ctx context.Context, in *QueryGetLimitOrderPoolFillMapRequest, opts ...grpc.CallOption) (*QueryGetLimitOrderPoolFillMapResponse, error)
	// Queries a list of LimitOrderPoolFillMap items.
	LimitOrderPoolFillMapAll(ctx context.Context, in *QueryAllLimitOrderPoolFillMapRequest, opts ...grpc.CallOption) (*QueryAllLimitOrderPoolFillMapResponse, error)
}

type queryClient struct {
	cc grpc1.ClientConn
}

func NewQueryClient(cc grpc1.ClientConn) QueryClient {
	return &queryClient{cc}
}

func (c *queryClient) Params(ctx context.Context, in *QueryParamsRequest, opts ...grpc.CallOption) (*QueryParamsResponse, error) {
	out := new(QueryParamsResponse)
	err := c.cc.Invoke(ctx, "/nicholasdotsol.duality.dex.Query/Params", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *queryClient) TickObject(ctx context.Context, in *QueryGetTickObjectRequest, opts ...grpc.CallOption) (*QueryGetTickObjectResponse, error) {
	out := new(QueryGetTickObjectResponse)
	err := c.cc.Invoke(ctx, "/nicholasdotsol.duality.dex.Query/TickObject", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *queryClient) TickObjectAll(ctx context.Context, in *QueryAllTickObjectRequest, opts ...grpc.CallOption) (*QueryAllTickObjectResponse, error) {
	out := new(QueryAllTickObjectResponse)
	err := c.cc.Invoke(ctx, "/nicholasdotsol.duality.dex.Query/TickObjectAll", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *queryClient) PairMap(ctx context.Context, in *QueryGetPairMapRequest, opts ...grpc.CallOption) (*QueryGetPairMapResponse, error) {
	out := new(QueryGetPairMapResponse)
	err := c.cc.Invoke(ctx, "/nicholasdotsol.duality.dex.Query/PairMap", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *queryClient) PairMapAll(ctx context.Context, in *QueryAllPairMapRequest, opts ...grpc.CallOption) (*QueryAllPairMapResponse, error) {
	out := new(QueryAllPairMapResponse)
	err := c.cc.Invoke(ctx, "/nicholasdotsol.duality.dex.Query/PairMapAll", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *queryClient) Tokens(ctx context.Context, in *QueryGetTokensRequest, opts ...grpc.CallOption) (*QueryGetTokensResponse, error) {
	out := new(QueryGetTokensResponse)
	err := c.cc.Invoke(ctx, "/nicholasdotsol.duality.dex.Query/Tokens", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *queryClient) TokensAll(ctx context.Context, in *QueryAllTokensRequest, opts ...grpc.CallOption) (*QueryAllTokensResponse, error) {
	out := new(QueryAllTokensResponse)
	err := c.cc.Invoke(ctx, "/nicholasdotsol.duality.dex.Query/TokensAll", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *queryClient) TokenObject(ctx context.Context, in *QueryGetTokenObjectRequest, opts ...grpc.CallOption) (*QueryGetTokenObjectResponse, error) {
	out := new(QueryGetTokenObjectResponse)
	err := c.cc.Invoke(ctx, "/nicholasdotsol.duality.dex.Query/TokenObject", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *queryClient) TokenObjectAll(ctx context.Context, in *QueryAllTokenObjectRequest, opts ...grpc.CallOption) (*QueryAllTokenObjectResponse, error) {
	out := new(QueryAllTokenObjectResponse)
	err := c.cc.Invoke(ctx, "/nicholasdotsol.duality.dex.Query/TokenObjectAll", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *queryClient) Shares(ctx context.Context, in *QueryGetSharesRequest, opts ...grpc.CallOption) (*QueryGetSharesResponse, error) {
	out := new(QueryGetSharesResponse)
	err := c.cc.Invoke(ctx, "/nicholasdotsol.duality.dex.Query/Shares", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *queryClient) SharesAll(ctx context.Context, in *QueryAllSharesRequest, opts ...grpc.CallOption) (*QueryAllSharesResponse, error) {
	out := new(QueryAllSharesResponse)
	err := c.cc.Invoke(ctx, "/nicholasdotsol.duality.dex.Query/SharesAll", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *queryClient) FeeList(ctx context.Context, in *QueryGetFeeListRequest, opts ...grpc.CallOption) (*QueryGetFeeListResponse, error) {
	out := new(QueryGetFeeListResponse)
	err := c.cc.Invoke(ctx, "/nicholasdotsol.duality.dex.Query/FeeList", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *queryClient) FeeListAll(ctx context.Context, in *QueryAllFeeListRequest, opts ...grpc.CallOption) (*QueryAllFeeListResponse, error) {
	out := new(QueryAllFeeListResponse)
	err := c.cc.Invoke(ctx, "/nicholasdotsol.duality.dex.Query/FeeListAll", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *queryClient) LimitOrderPoolUserShareMap(ctx context.Context, in *QueryGetLimitOrderPoolUserShareMapRequest, opts ...grpc.CallOption) (*QueryGetLimitOrderPoolUserShareMapResponse, error) {
	out := new(QueryGetLimitOrderPoolUserShareMapResponse)
	err := c.cc.Invoke(ctx, "/nicholasdotsol.duality.dex.Query/LimitOrderPoolUserShareMap", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *queryClient) LimitOrderPoolUserShareMapAll(ctx context.Context, in *QueryAllLimitOrderPoolUserShareMapRequest, opts ...grpc.CallOption) (*QueryAllLimitOrderPoolUserShareMapResponse, error) {
	out := new(QueryAllLimitOrderPoolUserShareMapResponse)
	err := c.cc.Invoke(ctx, "/nicholasdotsol.duality.dex.Query/LimitOrderPoolUserShareMapAll", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *queryClient) LimitOrderPoolUserSharesWithdrawn(ctx context.Context, in *QueryGetLimitOrderPoolUserSharesWithdrawnRequest, opts ...grpc.CallOption) (*QueryGetLimitOrderPoolUserSharesWithdrawnResponse, error) {
	out := new(QueryGetLimitOrderPoolUserSharesWithdrawnResponse)
	err := c.cc.Invoke(ctx, "/nicholasdotsol.duality.dex.Query/LimitOrderPoolUserSharesWithdrawn", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *queryClient) LimitOrderPoolUserSharesWithdrawnAll(ctx context.Context, in *QueryAllLimitOrderPoolUserSharesWithdrawnRequest, opts ...grpc.CallOption) (*QueryAllLimitOrderPoolUserSharesWithdrawnResponse, error) {
	out := new(QueryAllLimitOrderPoolUserSharesWithdrawnResponse)
	err := c.cc.Invoke(ctx, "/nicholasdotsol.duality.dex.Query/LimitOrderPoolUserSharesWithdrawnAll", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *queryClient) LimitOrderPoolTotalSharesMap(ctx context.Context, in *QueryGetLimitOrderPoolTotalSharesMapRequest, opts ...grpc.CallOption) (*QueryGetLimitOrderPoolTotalSharesMapResponse, error) {
	out := new(QueryGetLimitOrderPoolTotalSharesMapResponse)
	err := c.cc.Invoke(ctx, "/nicholasdotsol.duality.dex.Query/LimitOrderPoolTotalSharesMap", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *queryClient) LimitOrderPoolTotalSharesMapAll(ctx context.Context, in *QueryAllLimitOrderPoolTotalSharesMapRequest, opts ...grpc.CallOption) (*QueryAllLimitOrderPoolTotalSharesMapResponse, error) {
	out := new(QueryAllLimitOrderPoolTotalSharesMapResponse)
	err := c.cc.Invoke(ctx, "/nicholasdotsol.duality.dex.Query/LimitOrderPoolTotalSharesMapAll", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *queryClient) LimitOrderPoolReserveMap(ctx context.Context, in *QueryGetLimitOrderPoolReserveMapRequest, opts ...grpc.CallOption) (*QueryGetLimitOrderPoolReserveMapResponse, error) {
	out := new(QueryGetLimitOrderPoolReserveMapResponse)
	err := c.cc.Invoke(ctx, "/nicholasdotsol.duality.dex.Query/LimitOrderPoolReserveMap", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *queryClient) LimitOrderPoolReserveMapAll(ctx context.Context, in *QueryAllLimitOrderPoolReserveMapRequest, opts ...grpc.CallOption) (*QueryAllLimitOrderPoolReserveMapResponse, error) {
	out := new(QueryAllLimitOrderPoolReserveMapResponse)
	err := c.cc.Invoke(ctx, "/nicholasdotsol.duality.dex.Query/LimitOrderPoolReserveMapAll", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *queryClient) LimitOrderPoolFillMap(ctx context.Context, in *QueryGetLimitOrderPoolFillMapRequest, opts ...grpc.CallOption) (*QueryGetLimitOrderPoolFillMapResponse, error) {
	out := new(QueryGetLimitOrderPoolFillMapResponse)
	err := c.cc.Invoke(ctx, "/nicholasdotsol.duality.dex.Query/LimitOrderPoolFillMap", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *queryClient) LimitOrderPoolFillMapAll(ctx context.Context, in *QueryAllLimitOrderPoolFillMapRequest, opts ...grpc.CallOption) (*QueryAllLimitOrderPoolFillMapResponse, error) {
	out := new(QueryAllLimitOrderPoolFillMapResponse)
	err := c.cc.Invoke(ctx, "/nicholasdotsol.duality.dex.Query/LimitOrderPoolFillMapAll", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// QueryServer is the server API for Query service.
type QueryServer interface {
	// Parameters queries the parameters of the module.
	Params(context.Context, *QueryParamsRequest) (*QueryParamsResponse, error)
	// Queries a TickObject by index.
	TickObject(context.Context, *QueryGetTickObjectRequest) (*QueryGetTickObjectResponse, error)
	// Queries a list of TickObject items.
	TickObjectAll(context.Context, *QueryAllTickObjectRequest) (*QueryAllTickObjectResponse, error)
	// Queries a PairMap by index.
	PairMap(context.Context, *QueryGetPairMapRequest) (*QueryGetPairMapResponse, error)
	// Queries a list of PairMap items.
	PairMapAll(context.Context, *QueryAllPairMapRequest) (*QueryAllPairMapResponse, error)
	// Queries a Tokens by id.
	Tokens(context.Context, *QueryGetTokensRequest) (*QueryGetTokensResponse, error)
	// Queries a list of Tokens items.
	TokensAll(context.Context, *QueryAllTokensRequest) (*QueryAllTokensResponse, error)
	// Queries a TokenObject by index.
	TokenObject(context.Context, *QueryGetTokenObjectRequest) (*QueryGetTokenObjectResponse, error)
	// Queries a list of TokenObject items.
	TokenObjectAll(context.Context, *QueryAllTokenObjectRequest) (*QueryAllTokenObjectResponse, error)
	// Queries a Shares by index.
	Shares(context.Context, *QueryGetSharesRequest) (*QueryGetSharesResponse, error)
	// Queries a list of Shares items.
	SharesAll(context.Context, *QueryAllSharesRequest) (*QueryAllSharesResponse, error)
	// Queries a FeeList by id.
	FeeList(context.Context, *QueryGetFeeListRequest) (*QueryGetFeeListResponse, error)
	// Queries a list of FeeList items.
	FeeListAll(context.Context, *QueryAllFeeListRequest) (*QueryAllFeeListResponse, error)
	// Queries a LimitOrderPoolUserShareMap by index.
	LimitOrderPoolUserShareMap(context.Context, *QueryGetLimitOrderPoolUserShareMapRequest) (*QueryGetLimitOrderPoolUserShareMapResponse, error)
	// Queries a list of LimitOrderPoolUserShareMap items.
	LimitOrderPoolUserShareMapAll(context.Context, *QueryAllLimitOrderPoolUserShareMapRequest) (*QueryAllLimitOrderPoolUserShareMapResponse, error)
	// Queries a LimitOrderPoolUserSharesWithdrawn by index.
	LimitOrderPoolUserSharesWithdrawn(context.Context, *QueryGetLimitOrderPoolUserSharesWithdrawnRequest) (*QueryGetLimitOrderPoolUserSharesWithdrawnResponse, error)
	// Queries a list of LimitOrderPoolUserSharesWithdrawn items.
	LimitOrderPoolUserSharesWithdrawnAll(context.Context, *QueryAllLimitOrderPoolUserSharesWithdrawnRequest) (*QueryAllLimitOrderPoolUserSharesWithdrawnResponse, error)
	// Queries a LimitOrderPoolTotalSharesMap by index.
	LimitOrderPoolTotalSharesMap(context.Context, *QueryGetLimitOrderPoolTotalSharesMapRequest) (*QueryGetLimitOrderPoolTotalSharesMapResponse, error)
	// Queries a list of LimitOrderPoolTotalSharesMap items.
	LimitOrderPoolTotalSharesMapAll(context.Context, *QueryAllLimitOrderPoolTotalSharesMapRequest) (*QueryAllLimitOrderPoolTotalSharesMapResponse, error)
	// Queries a LimitOrderPoolReserveMap by index.
	LimitOrderPoolReserveMap(context.Context, *QueryGetLimitOrderPoolReserveMapRequest) (*QueryGetLimitOrderPoolReserveMapResponse, error)
	// Queries a list of LimitOrderPoolReserveMap items.
	LimitOrderPoolReserveMapAll(context.Context, *QueryAllLimitOrderPoolReserveMapRequest) (*QueryAllLimitOrderPoolReserveMapResponse, error)
	// Queries a LimitOrderPoolFillMap by index.
	LimitOrderPoolFillMap(context.Context, *QueryGetLimitOrderPoolFillMapRequest) (*QueryGetLimitOrderPoolFillMapResponse, error)
	// Queries a list of LimitOrderPoolFillMap items.
	LimitOrderPoolFillMapAll(context.Context, *QueryAllLimitOrderPoolFillMapRequest) (*QueryAllLimitOrderPoolFillMapResponse, error)
}

// UnimplementedQueryServer can be embedded to have forward compatible implementations.
type UnimplementedQueryServer struct {
}

func (*UnimplementedQueryServer) Params(ctx context.Context, req *QueryParamsRequest) (*QueryParamsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Params not implemented")
}
func (*UnimplementedQueryServer) TickObject(ctx context.Context, req *QueryGetTickObjectRequest) (*QueryGetTickObjectResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method TickObject not implemented")
}
func (*UnimplementedQueryServer) TickObjectAll(ctx context.Context, req *QueryAllTickObjectRequest) (*QueryAllTickObjectResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method TickObjectAll not implemented")
}
func (*UnimplementedQueryServer) PairMap(ctx context.Context, req *QueryGetPairMapRequest) (*QueryGetPairMapResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method PairMap not implemented")
}
func (*UnimplementedQueryServer) PairMapAll(ctx context.Context, req *QueryAllPairMapRequest) (*QueryAllPairMapResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method PairMapAll not implemented")
}
func (*UnimplementedQueryServer) Tokens(ctx context.Context, req *QueryGetTokensRequest) (*QueryGetTokensResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Tokens not implemented")
}
func (*UnimplementedQueryServer) TokensAll(ctx context.Context, req *QueryAllTokensRequest) (*QueryAllTokensResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method TokensAll not implemented")
}
func (*UnimplementedQueryServer) TokenObject(ctx context.Context, req *QueryGetTokenObjectRequest) (*QueryGetTokenObjectResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method TokenObject not implemented")
}
func (*UnimplementedQueryServer) TokenObjectAll(ctx context.Context, req *QueryAllTokenObjectRequest) (*QueryAllTokenObjectResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method TokenObjectAll not implemented")
}
func (*UnimplementedQueryServer) Shares(ctx context.Context, req *QueryGetSharesRequest) (*QueryGetSharesResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Shares not implemented")
}
func (*UnimplementedQueryServer) SharesAll(ctx context.Context, req *QueryAllSharesRequest) (*QueryAllSharesResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method SharesAll not implemented")
}
func (*UnimplementedQueryServer) FeeList(ctx context.Context, req *QueryGetFeeListRequest) (*QueryGetFeeListResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method FeeList not implemented")
}
func (*UnimplementedQueryServer) FeeListAll(ctx context.Context, req *QueryAllFeeListRequest) (*QueryAllFeeListResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method FeeListAll not implemented")
}
func (*UnimplementedQueryServer) LimitOrderPoolUserShareMap(ctx context.Context, req *QueryGetLimitOrderPoolUserShareMapRequest) (*QueryGetLimitOrderPoolUserShareMapResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method LimitOrderPoolUserShareMap not implemented")
}
func (*UnimplementedQueryServer) LimitOrderPoolUserShareMapAll(ctx context.Context, req *QueryAllLimitOrderPoolUserShareMapRequest) (*QueryAllLimitOrderPoolUserShareMapResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method LimitOrderPoolUserShareMapAll not implemented")
}
func (*UnimplementedQueryServer) LimitOrderPoolUserSharesWithdrawn(ctx context.Context, req *QueryGetLimitOrderPoolUserSharesWithdrawnRequest) (*QueryGetLimitOrderPoolUserSharesWithdrawnResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method LimitOrderPoolUserSharesWithdrawn not implemented")
}
func (*UnimplementedQueryServer) LimitOrderPoolUserSharesWithdrawnAll(ctx context.Context, req *QueryAllLimitOrderPoolUserSharesWithdrawnRequest) (*QueryAllLimitOrderPoolUserSharesWithdrawnResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method LimitOrderPoolUserSharesWithdrawnAll not implemented")
}
func (*UnimplementedQueryServer) LimitOrderPoolTotalSharesMap(ctx context.Context, req *QueryGetLimitOrderPoolTotalSharesMapRequest) (*QueryGetLimitOrderPoolTotalSharesMapResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method LimitOrderPoolTotalSharesMap not implemented")
}
func (*UnimplementedQueryServer) LimitOrderPoolTotalSharesMapAll(ctx context.Context, req *QueryAllLimitOrderPoolTotalSharesMapRequest) (*QueryAllLimitOrderPoolTotalSharesMapResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method LimitOrderPoolTotalSharesMapAll not implemented")
}
func (*UnimplementedQueryServer) LimitOrderPoolReserveMap(ctx context.Context, req *QueryGetLimitOrderPoolReserveMapRequest) (*QueryGetLimitOrderPoolReserveMapResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method LimitOrderPoolReserveMap not implemented")
}
func (*UnimplementedQueryServer) LimitOrderPoolReserveMapAll(ctx context.Context, req *QueryAllLimitOrderPoolReserveMapRequest) (*QueryAllLimitOrderPoolReserveMapResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method LimitOrderPoolReserveMapAll not implemented")
}
func (*UnimplementedQueryServer) LimitOrderPoolFillMap(ctx context.Context, req *QueryGetLimitOrderPoolFillMapRequest) (*QueryGetLimitOrderPoolFillMapResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method LimitOrderPoolFillMap not implemented")
}
func (*UnimplementedQueryServer) LimitOrderPoolFillMapAll(ctx context.Context, req *QueryAllLimitOrderPoolFillMapRequest) (*QueryAllLimitOrderPoolFillMapResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method LimitOrderPoolFillMapAll not implemented")
}

func RegisterQueryServer(s grpc1.Server, srv QueryServer) {
	s.RegisterService(&_Query_serviceDesc, srv)
}

func _Query_Params_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(QueryParamsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(QueryServer).Params(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/nicholasdotsol.duality.dex.Query/Params",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(QueryServer).Params(ctx, req.(*QueryParamsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Query_TickObject_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(QueryGetTickObjectRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(QueryServer).TickObject(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/nicholasdotsol.duality.dex.Query/TickObject",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(QueryServer).TickObject(ctx, req.(*QueryGetTickObjectRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Query_TickObjectAll_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(QueryAllTickObjectRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(QueryServer).TickObjectAll(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/nicholasdotsol.duality.dex.Query/TickObjectAll",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(QueryServer).TickObjectAll(ctx, req.(*QueryAllTickObjectRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Query_PairMap_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(QueryGetPairMapRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(QueryServer).PairMap(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/nicholasdotsol.duality.dex.Query/PairMap",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(QueryServer).PairMap(ctx, req.(*QueryGetPairMapRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Query_PairMapAll_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(QueryAllPairMapRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(QueryServer).PairMapAll(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/nicholasdotsol.duality.dex.Query/PairMapAll",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(QueryServer).PairMapAll(ctx, req.(*QueryAllPairMapRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Query_Tokens_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(QueryGetTokensRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(QueryServer).Tokens(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/nicholasdotsol.duality.dex.Query/Tokens",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(QueryServer).Tokens(ctx, req.(*QueryGetTokensRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Query_TokensAll_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(QueryAllTokensRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(QueryServer).TokensAll(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/nicholasdotsol.duality.dex.Query/TokensAll",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(QueryServer).TokensAll(ctx, req.(*QueryAllTokensRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Query_TokenObject_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(QueryGetTokenObjectRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(QueryServer).TokenObject(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/nicholasdotsol.duality.dex.Query/TokenObject",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(QueryServer).TokenObject(ctx, req.(*QueryGetTokenObjectRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Query_TokenObjectAll_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(QueryAllTokenObjectRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(QueryServer).TokenObjectAll(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/nicholasdotsol.duality.dex.Query/TokenObjectAll",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(QueryServer).TokenObjectAll(ctx, req.(*QueryAllTokenObjectRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Query_Shares_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(QueryGetSharesRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(QueryServer).Shares(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/nicholasdotsol.duality.dex.Query/Shares",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(QueryServer).Shares(ctx, req.(*QueryGetSharesRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Query_SharesAll_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(QueryAllSharesRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(QueryServer).SharesAll(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/nicholasdotsol.duality.dex.Query/SharesAll",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(QueryServer).SharesAll(ctx, req.(*QueryAllSharesRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Query_FeeList_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(QueryGetFeeListRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(QueryServer).FeeList(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/nicholasdotsol.duality.dex.Query/FeeList",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(QueryServer).FeeList(ctx, req.(*QueryGetFeeListRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Query_FeeListAll_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(QueryAllFeeListRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(QueryServer).FeeListAll(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/nicholasdotsol.duality.dex.Query/FeeListAll",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(QueryServer).FeeListAll(ctx, req.(*QueryAllFeeListRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Query_LimitOrderPoolUserShareMap_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(QueryGetLimitOrderPoolUserShareMapRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(QueryServer).LimitOrderPoolUserShareMap(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/nicholasdotsol.duality.dex.Query/LimitOrderPoolUserShareMap",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(QueryServer).LimitOrderPoolUserShareMap(ctx, req.(*QueryGetLimitOrderPoolUserShareMapRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Query_LimitOrderPoolUserShareMapAll_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(QueryAllLimitOrderPoolUserShareMapRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(QueryServer).LimitOrderPoolUserShareMapAll(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/nicholasdotsol.duality.dex.Query/LimitOrderPoolUserShareMapAll",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(QueryServer).LimitOrderPoolUserShareMapAll(ctx, req.(*QueryAllLimitOrderPoolUserShareMapRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Query_LimitOrderPoolUserSharesWithdrawn_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(QueryGetLimitOrderPoolUserSharesWithdrawnRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(QueryServer).LimitOrderPoolUserSharesWithdrawn(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/nicholasdotsol.duality.dex.Query/LimitOrderPoolUserSharesWithdrawn",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(QueryServer).LimitOrderPoolUserSharesWithdrawn(ctx, req.(*QueryGetLimitOrderPoolUserSharesWithdrawnRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Query_LimitOrderPoolUserSharesWithdrawnAll_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(QueryAllLimitOrderPoolUserSharesWithdrawnRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(QueryServer).LimitOrderPoolUserSharesWithdrawnAll(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/nicholasdotsol.duality.dex.Query/LimitOrderPoolUserSharesWithdrawnAll",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(QueryServer).LimitOrderPoolUserSharesWithdrawnAll(ctx, req.(*QueryAllLimitOrderPoolUserSharesWithdrawnRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Query_LimitOrderPoolTotalSharesMap_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(QueryGetLimitOrderPoolTotalSharesMapRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(QueryServer).LimitOrderPoolTotalSharesMap(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/nicholasdotsol.duality.dex.Query/LimitOrderPoolTotalSharesMap",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(QueryServer).LimitOrderPoolTotalSharesMap(ctx, req.(*QueryGetLimitOrderPoolTotalSharesMapRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Query_LimitOrderPoolTotalSharesMapAll_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(QueryAllLimitOrderPoolTotalSharesMapRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(QueryServer).LimitOrderPoolTotalSharesMapAll(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/nicholasdotsol.duality.dex.Query/LimitOrderPoolTotalSharesMapAll",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(QueryServer).LimitOrderPoolTotalSharesMapAll(ctx, req.(*QueryAllLimitOrderPoolTotalSharesMapRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Query_LimitOrderPoolReserveMap_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(QueryGetLimitOrderPoolReserveMapRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(QueryServer).LimitOrderPoolReserveMap(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/nicholasdotsol.duality.dex.Query/LimitOrderPoolReserveMap",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(QueryServer).LimitOrderPoolReserveMap(ctx, req.(*QueryGetLimitOrderPoolReserveMapRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Query_LimitOrderPoolReserveMapAll_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(QueryAllLimitOrderPoolReserveMapRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(QueryServer).LimitOrderPoolReserveMapAll(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/nicholasdotsol.duality.dex.Query/LimitOrderPoolReserveMapAll",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(QueryServer).LimitOrderPoolReserveMapAll(ctx, req.(*QueryAllLimitOrderPoolReserveMapRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Query_LimitOrderPoolFillMap_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(QueryGetLimitOrderPoolFillMapRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(QueryServer).LimitOrderPoolFillMap(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/nicholasdotsol.duality.dex.Query/LimitOrderPoolFillMap",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(QueryServer).LimitOrderPoolFillMap(ctx, req.(*QueryGetLimitOrderPoolFillMapRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Query_LimitOrderPoolFillMapAll_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(QueryAllLimitOrderPoolFillMapRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(QueryServer).LimitOrderPoolFillMapAll(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/nicholasdotsol.duality.dex.Query/LimitOrderPoolFillMapAll",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(QueryServer).LimitOrderPoolFillMapAll(ctx, req.(*QueryAllLimitOrderPoolFillMapRequest))
	}
	return interceptor(ctx, in, info, handler)
}

var _Query_serviceDesc = grpc.ServiceDesc{
	ServiceName: "nicholasdotsol.duality.dex.Query",
	HandlerType: (*QueryServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "Params",
			Handler:    _Query_Params_Handler,
		},
		{
			MethodName: "TickObject",
			Handler:    _Query_TickObject_Handler,
		},
		{
			MethodName: "TickObjectAll",
			Handler:    _Query_TickObjectAll_Handler,
		},
		{
			MethodName: "PairMap",
			Handler:    _Query_PairMap_Handler,
		},
		{
			MethodName: "PairMapAll",
			Handler:    _Query_PairMapAll_Handler,
		},
		{
			MethodName: "Tokens",
			Handler:    _Query_Tokens_Handler,
		},
		{
			MethodName: "TokensAll",
			Handler:    _Query_TokensAll_Handler,
		},
		{
			MethodName: "TokenObject",
			Handler:    _Query_TokenObject_Handler,
		},
		{
			MethodName: "TokenObjectAll",
			Handler:    _Query_TokenObjectAll_Handler,
		},
		{
			MethodName: "Shares",
			Handler:    _Query_Shares_Handler,
		},
		{
			MethodName: "SharesAll",
			Handler:    _Query_SharesAll_Handler,
		},
		{
			MethodName: "FeeList",
			Handler:    _Query_FeeList_Handler,
		},
		{
			MethodName: "FeeListAll",
			Handler:    _Query_FeeListAll_Handler,
		},
		{
			MethodName: "LimitOrderPoolUserShareMap",
			Handler:    _Query_LimitOrderPoolUserShareMap_Handler,
		},
		{
			MethodName: "LimitOrderPoolUserShareMapAll",
			Handler:    _Query_LimitOrderPoolUserShareMapAll_Handler,
		},
		{
			MethodName: "LimitOrderPoolUserSharesWithdrawn",
			Handler:    _Query_LimitOrderPoolUserSharesWithdrawn_Handler,
		},
		{
			MethodName: "LimitOrderPoolUserSharesWithdrawnAll",
			Handler:    _Query_LimitOrderPoolUserSharesWithdrawnAll_Handler,
		},
		{
			MethodName: "LimitOrderPoolTotalSharesMap",
			Handler:    _Query_LimitOrderPoolTotalSharesMap_Handler,
		},
		{
			MethodName: "LimitOrderPoolTotalSharesMapAll",
			Handler:    _Query_LimitOrderPoolTotalSharesMapAll_Handler,
		},
		{
			MethodName: "LimitOrderPoolReserveMap",
			Handler:    _Query_LimitOrderPoolReserveMap_Handler,
		},
		{
			MethodName: "LimitOrderPoolReserveMapAll",
			Handler:    _Query_LimitOrderPoolReserveMapAll_Handler,
		},
		{
			MethodName: "LimitOrderPoolFillMap",
			Handler:    _Query_LimitOrderPoolFillMap_Handler,
		},
		{
			MethodName: "LimitOrderPoolFillMapAll",
			Handler:    _Query_LimitOrderPoolFillMapAll_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "dex/query.proto",
}

func (m *QueryParamsRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *QueryParamsRequest) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *QueryParamsRequest) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	return len(dAtA) - i, nil
}

func (m *QueryParamsResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *QueryParamsResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *QueryParamsResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	{
		size, err := m.Params.MarshalToSizedBuffer(dAtA[:i])
		if err != nil {
			return 0, err
		}
		i -= size
		i = encodeVarintQuery(dAtA, i, uint64(size))
	}
	i--
	dAtA[i] = 0xa
	return len(dAtA) - i, nil
}

func (m *QueryGetTickObjectRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *QueryGetTickObjectRequest) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *QueryGetTickObjectRequest) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.PairId) > 0 {
		i -= len(m.PairId)
		copy(dAtA[i:], m.PairId)
		i = encodeVarintQuery(dAtA, i, uint64(len(m.PairId)))
		i--
		dAtA[i] = 0x12
	}
	if m.TickIndex != 0 {
		i = encodeVarintQuery(dAtA, i, uint64(m.TickIndex))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func (m *QueryGetTickObjectResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *QueryGetTickObjectResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *QueryGetTickObjectResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	{
		size, err := m.TickObject.MarshalToSizedBuffer(dAtA[:i])
		if err != nil {
			return 0, err
		}
		i -= size
		i = encodeVarintQuery(dAtA, i, uint64(size))
	}
	i--
	dAtA[i] = 0xa
	return len(dAtA) - i, nil
}

func (m *QueryAllTickObjectRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *QueryAllTickObjectRequest) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *QueryAllTickObjectRequest) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.Pagination != nil {
		{
			size, err := m.Pagination.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintQuery(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *QueryAllTickObjectResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *QueryAllTickObjectResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *QueryAllTickObjectResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.Pagination != nil {
		{
			size, err := m.Pagination.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintQuery(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x12
	}
	if len(m.TickObject) > 0 {
		for iNdEx := len(m.TickObject) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.TickObject[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintQuery(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0xa
		}
	}
	return len(dAtA) - i, nil
}

func (m *QueryGetPairMapRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *QueryGetPairMapRequest) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *QueryGetPairMapRequest) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.PairId) > 0 {
		i -= len(m.PairId)
		copy(dAtA[i:], m.PairId)
		i = encodeVarintQuery(dAtA, i, uint64(len(m.PairId)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *QueryGetPairMapResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *QueryGetPairMapResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *QueryGetPairMapResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	{
		size, err := m.PairMap.MarshalToSizedBuffer(dAtA[:i])
		if err != nil {
			return 0, err
		}
		i -= size
		i = encodeVarintQuery(dAtA, i, uint64(size))
	}
	i--
	dAtA[i] = 0xa
	return len(dAtA) - i, nil
}

func (m *QueryAllPairMapRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *QueryAllPairMapRequest) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *QueryAllPairMapRequest) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.Pagination != nil {
		{
			size, err := m.Pagination.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintQuery(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *QueryAllPairMapResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *QueryAllPairMapResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *QueryAllPairMapResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.Pagination != nil {
		{
			size, err := m.Pagination.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintQuery(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x12
	}
	if len(m.PairMap) > 0 {
		for iNdEx := len(m.PairMap) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.PairMap[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintQuery(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0xa
		}
	}
	return len(dAtA) - i, nil
}

func (m *QueryGetTokensRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *QueryGetTokensRequest) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *QueryGetTokensRequest) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.Id != 0 {
		i = encodeVarintQuery(dAtA, i, uint64(m.Id))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func (m *QueryGetTokensResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *QueryGetTokensResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *QueryGetTokensResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	{
		size, err := m.Tokens.MarshalToSizedBuffer(dAtA[:i])
		if err != nil {
			return 0, err
		}
		i -= size
		i = encodeVarintQuery(dAtA, i, uint64(size))
	}
	i--
	dAtA[i] = 0xa
	return len(dAtA) - i, nil
}

func (m *QueryAllTokensRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *QueryAllTokensRequest) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *QueryAllTokensRequest) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.Pagination != nil {
		{
			size, err := m.Pagination.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintQuery(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *QueryAllTokensResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *QueryAllTokensResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *QueryAllTokensResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.Pagination != nil {
		{
			size, err := m.Pagination.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintQuery(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x12
	}
	if len(m.Tokens) > 0 {
		for iNdEx := len(m.Tokens) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.Tokens[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintQuery(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0xa
		}
	}
	return len(dAtA) - i, nil
}

func (m *QueryGetTokenObjectRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *QueryGetTokenObjectRequest) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *QueryGetTokenObjectRequest) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.Address) > 0 {
		i -= len(m.Address)
		copy(dAtA[i:], m.Address)
		i = encodeVarintQuery(dAtA, i, uint64(len(m.Address)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *QueryGetTokenObjectResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *QueryGetTokenObjectResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *QueryGetTokenObjectResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	{
		size, err := m.TokenObject.MarshalToSizedBuffer(dAtA[:i])
		if err != nil {
			return 0, err
		}
		i -= size
		i = encodeVarintQuery(dAtA, i, uint64(size))
	}
	i--
	dAtA[i] = 0xa
	return len(dAtA) - i, nil
}

func (m *QueryAllTokenObjectRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *QueryAllTokenObjectRequest) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *QueryAllTokenObjectRequest) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.Pagination != nil {
		{
			size, err := m.Pagination.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintQuery(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *QueryAllTokenObjectResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *QueryAllTokenObjectResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *QueryAllTokenObjectResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.Pagination != nil {
		{
			size, err := m.Pagination.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintQuery(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x12
	}
	if len(m.TokenObject) > 0 {
		for iNdEx := len(m.TokenObject) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.TokenObject[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintQuery(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0xa
		}
	}
	return len(dAtA) - i, nil
}

func (m *QueryGetSharesRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *QueryGetSharesRequest) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *QueryGetSharesRequest) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.Fee != 0 {
		i = encodeVarintQuery(dAtA, i, uint64(m.Fee))
		i--
		dAtA[i] = 0x20
	}
	if m.TickIndex != 0 {
		i = encodeVarintQuery(dAtA, i, uint64(m.TickIndex))
		i--
		dAtA[i] = 0x18
	}
	if len(m.PairId) > 0 {
		i -= len(m.PairId)
		copy(dAtA[i:], m.PairId)
		i = encodeVarintQuery(dAtA, i, uint64(len(m.PairId)))
		i--
		dAtA[i] = 0x12
	}
	if len(m.Address) > 0 {
		i -= len(m.Address)
		copy(dAtA[i:], m.Address)
		i = encodeVarintQuery(dAtA, i, uint64(len(m.Address)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *QueryGetSharesResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *QueryGetSharesResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *QueryGetSharesResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	{
		size, err := m.Shares.MarshalToSizedBuffer(dAtA[:i])
		if err != nil {
			return 0, err
		}
		i -= size
		i = encodeVarintQuery(dAtA, i, uint64(size))
	}
	i--
	dAtA[i] = 0xa
	return len(dAtA) - i, nil
}

func (m *QueryAllSharesRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *QueryAllSharesRequest) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *QueryAllSharesRequest) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.Pagination != nil {
		{
			size, err := m.Pagination.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintQuery(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *QueryAllSharesResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *QueryAllSharesResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *QueryAllSharesResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.Pagination != nil {
		{
			size, err := m.Pagination.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintQuery(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x12
	}
	if len(m.Shares) > 0 {
		for iNdEx := len(m.Shares) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.Shares[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintQuery(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0xa
		}
	}
	return len(dAtA) - i, nil
}

func (m *QueryGetFeeListRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *QueryGetFeeListRequest) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *QueryGetFeeListRequest) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.Id != 0 {
		i = encodeVarintQuery(dAtA, i, uint64(m.Id))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func (m *QueryGetFeeListResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *QueryGetFeeListResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *QueryGetFeeListResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	{
		size, err := m.FeeList.MarshalToSizedBuffer(dAtA[:i])
		if err != nil {
			return 0, err
		}
		i -= size
		i = encodeVarintQuery(dAtA, i, uint64(size))
	}
	i--
	dAtA[i] = 0xa
	return len(dAtA) - i, nil
}

func (m *QueryAllFeeListRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *QueryAllFeeListRequest) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *QueryAllFeeListRequest) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.Pagination != nil {
		{
			size, err := m.Pagination.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintQuery(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *QueryAllFeeListResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *QueryAllFeeListResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *QueryAllFeeListResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.Pagination != nil {
		{
			size, err := m.Pagination.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintQuery(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x12
	}
	if len(m.FeeList) > 0 {
		for iNdEx := len(m.FeeList) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.FeeList[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintQuery(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0xa
		}
	}
	return len(dAtA) - i, nil
}

func (m *QueryGetLimitOrderPoolUserShareMapRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *QueryGetLimitOrderPoolUserShareMapRequest) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *QueryGetLimitOrderPoolUserShareMapRequest) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.Address) > 0 {
		i -= len(m.Address)
		copy(dAtA[i:], m.Address)
		i = encodeVarintQuery(dAtA, i, uint64(len(m.Address)))
		i--
		dAtA[i] = 0x2a
	}
	if m.Count != 0 {
		i = encodeVarintQuery(dAtA, i, uint64(m.Count))
		i--
		dAtA[i] = 0x20
	}
	if len(m.Token) > 0 {
		i -= len(m.Token)
		copy(dAtA[i:], m.Token)
		i = encodeVarintQuery(dAtA, i, uint64(len(m.Token)))
		i--
		dAtA[i] = 0x1a
	}
	if m.TickIndex != 0 {
		i = encodeVarintQuery(dAtA, i, uint64(m.TickIndex))
		i--
		dAtA[i] = 0x10
	}
	if len(m.PairId) > 0 {
		i -= len(m.PairId)
		copy(dAtA[i:], m.PairId)
		i = encodeVarintQuery(dAtA, i, uint64(len(m.PairId)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *QueryGetLimitOrderPoolUserShareMapResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *QueryGetLimitOrderPoolUserShareMapResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *QueryGetLimitOrderPoolUserShareMapResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	{
		size, err := m.LimitOrderPoolUserShareMap.MarshalToSizedBuffer(dAtA[:i])
		if err != nil {
			return 0, err
		}
		i -= size
		i = encodeVarintQuery(dAtA, i, uint64(size))
	}
	i--
	dAtA[i] = 0xa
	return len(dAtA) - i, nil
}

func (m *QueryAllLimitOrderPoolUserShareMapRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *QueryAllLimitOrderPoolUserShareMapRequest) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *QueryAllLimitOrderPoolUserShareMapRequest) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.Pagination != nil {
		{
			size, err := m.Pagination.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintQuery(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *QueryAllLimitOrderPoolUserShareMapResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *QueryAllLimitOrderPoolUserShareMapResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *QueryAllLimitOrderPoolUserShareMapResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.Pagination != nil {
		{
			size, err := m.Pagination.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintQuery(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x12
	}
	if len(m.LimitOrderPoolUserShareMap) > 0 {
		for iNdEx := len(m.LimitOrderPoolUserShareMap) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.LimitOrderPoolUserShareMap[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintQuery(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0xa
		}
	}
	return len(dAtA) - i, nil
}

func (m *QueryGetLimitOrderPoolUserSharesWithdrawnRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *QueryGetLimitOrderPoolUserSharesWithdrawnRequest) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *QueryGetLimitOrderPoolUserSharesWithdrawnRequest) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.Address) > 0 {
		i -= len(m.Address)
		copy(dAtA[i:], m.Address)
		i = encodeVarintQuery(dAtA, i, uint64(len(m.Address)))
		i--
		dAtA[i] = 0x2a
	}
	if m.Count != 0 {
		i = encodeVarintQuery(dAtA, i, uint64(m.Count))
		i--
		dAtA[i] = 0x20
	}
	if len(m.Token) > 0 {
		i -= len(m.Token)
		copy(dAtA[i:], m.Token)
		i = encodeVarintQuery(dAtA, i, uint64(len(m.Token)))
		i--
		dAtA[i] = 0x1a
	}
	if m.TickIndex != 0 {
		i = encodeVarintQuery(dAtA, i, uint64(m.TickIndex))
		i--
		dAtA[i] = 0x10
	}
	if len(m.PairId) > 0 {
		i -= len(m.PairId)
		copy(dAtA[i:], m.PairId)
		i = encodeVarintQuery(dAtA, i, uint64(len(m.PairId)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *QueryGetLimitOrderPoolUserSharesWithdrawnResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *QueryGetLimitOrderPoolUserSharesWithdrawnResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *QueryGetLimitOrderPoolUserSharesWithdrawnResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	{
		size, err := m.LimitOrderPoolUserSharesWithdrawn.MarshalToSizedBuffer(dAtA[:i])
		if err != nil {
			return 0, err
		}
		i -= size
		i = encodeVarintQuery(dAtA, i, uint64(size))
	}
	i--
	dAtA[i] = 0xa
	return len(dAtA) - i, nil
}

func (m *QueryAllLimitOrderPoolUserSharesWithdrawnRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *QueryAllLimitOrderPoolUserSharesWithdrawnRequest) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *QueryAllLimitOrderPoolUserSharesWithdrawnRequest) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.Pagination != nil {
		{
			size, err := m.Pagination.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintQuery(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *QueryAllLimitOrderPoolUserSharesWithdrawnResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *QueryAllLimitOrderPoolUserSharesWithdrawnResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *QueryAllLimitOrderPoolUserSharesWithdrawnResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.Pagination != nil {
		{
			size, err := m.Pagination.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintQuery(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x12
	}
	if len(m.LimitOrderPoolUserSharesWithdrawn) > 0 {
		for iNdEx := len(m.LimitOrderPoolUserSharesWithdrawn) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.LimitOrderPoolUserSharesWithdrawn[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintQuery(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0xa
		}
	}
	return len(dAtA) - i, nil
}

func (m *QueryGetLimitOrderPoolTotalSharesMapRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *QueryGetLimitOrderPoolTotalSharesMapRequest) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *QueryGetLimitOrderPoolTotalSharesMapRequest) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.Count != 0 {
		i = encodeVarintQuery(dAtA, i, uint64(m.Count))
		i--
		dAtA[i] = 0x20
	}
	if len(m.Token) > 0 {
		i -= len(m.Token)
		copy(dAtA[i:], m.Token)
		i = encodeVarintQuery(dAtA, i, uint64(len(m.Token)))
		i--
		dAtA[i] = 0x1a
	}
	if m.TickIndex != 0 {
		i = encodeVarintQuery(dAtA, i, uint64(m.TickIndex))
		i--
		dAtA[i] = 0x10
	}
	if len(m.PairId) > 0 {
		i -= len(m.PairId)
		copy(dAtA[i:], m.PairId)
		i = encodeVarintQuery(dAtA, i, uint64(len(m.PairId)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *QueryGetLimitOrderPoolTotalSharesMapResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *QueryGetLimitOrderPoolTotalSharesMapResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *QueryGetLimitOrderPoolTotalSharesMapResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	{
		size, err := m.LimitOrderPoolTotalSharesMap.MarshalToSizedBuffer(dAtA[:i])
		if err != nil {
			return 0, err
		}
		i -= size
		i = encodeVarintQuery(dAtA, i, uint64(size))
	}
	i--
	dAtA[i] = 0xa
	return len(dAtA) - i, nil
}

func (m *QueryAllLimitOrderPoolTotalSharesMapRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *QueryAllLimitOrderPoolTotalSharesMapRequest) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *QueryAllLimitOrderPoolTotalSharesMapRequest) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.Pagination != nil {
		{
			size, err := m.Pagination.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintQuery(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *QueryAllLimitOrderPoolTotalSharesMapResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *QueryAllLimitOrderPoolTotalSharesMapResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *QueryAllLimitOrderPoolTotalSharesMapResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.Pagination != nil {
		{
			size, err := m.Pagination.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintQuery(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x12
	}
	if len(m.LimitOrderPoolTotalSharesMap) > 0 {
		for iNdEx := len(m.LimitOrderPoolTotalSharesMap) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.LimitOrderPoolTotalSharesMap[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintQuery(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0xa
		}
	}
	return len(dAtA) - i, nil
}

func (m *QueryGetLimitOrderPoolReserveMapRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *QueryGetLimitOrderPoolReserveMapRequest) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *QueryGetLimitOrderPoolReserveMapRequest) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.Count != 0 {
		i = encodeVarintQuery(dAtA, i, uint64(m.Count))
		i--
		dAtA[i] = 0x20
	}
	if len(m.Token) > 0 {
		i -= len(m.Token)
		copy(dAtA[i:], m.Token)
		i = encodeVarintQuery(dAtA, i, uint64(len(m.Token)))
		i--
		dAtA[i] = 0x1a
	}
	if m.TickIndex != 0 {
		i = encodeVarintQuery(dAtA, i, uint64(m.TickIndex))
		i--
		dAtA[i] = 0x10
	}
	if len(m.PairId) > 0 {
		i -= len(m.PairId)
		copy(dAtA[i:], m.PairId)
		i = encodeVarintQuery(dAtA, i, uint64(len(m.PairId)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *QueryGetLimitOrderPoolReserveMapResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *QueryGetLimitOrderPoolReserveMapResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *QueryGetLimitOrderPoolReserveMapResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	{
		size, err := m.LimitOrderPoolReserveMap.MarshalToSizedBuffer(dAtA[:i])
		if err != nil {
			return 0, err
		}
		i -= size
		i = encodeVarintQuery(dAtA, i, uint64(size))
	}
	i--
	dAtA[i] = 0xa
	return len(dAtA) - i, nil
}

func (m *QueryAllLimitOrderPoolReserveMapRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *QueryAllLimitOrderPoolReserveMapRequest) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *QueryAllLimitOrderPoolReserveMapRequest) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.Pagination != nil {
		{
			size, err := m.Pagination.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintQuery(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *QueryAllLimitOrderPoolReserveMapResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *QueryAllLimitOrderPoolReserveMapResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *QueryAllLimitOrderPoolReserveMapResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.Pagination != nil {
		{
			size, err := m.Pagination.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintQuery(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x12
	}
	if len(m.LimitOrderPoolReserveMap) > 0 {
		for iNdEx := len(m.LimitOrderPoolReserveMap) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.LimitOrderPoolReserveMap[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintQuery(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0xa
		}
	}
	return len(dAtA) - i, nil
}

func (m *QueryGetLimitOrderPoolFillMapRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *QueryGetLimitOrderPoolFillMapRequest) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *QueryGetLimitOrderPoolFillMapRequest) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.Count != 0 {
		i = encodeVarintQuery(dAtA, i, uint64(m.Count))
		i--
		dAtA[i] = 0x20
	}
	if len(m.Token) > 0 {
		i -= len(m.Token)
		copy(dAtA[i:], m.Token)
		i = encodeVarintQuery(dAtA, i, uint64(len(m.Token)))
		i--
		dAtA[i] = 0x1a
	}
	if m.TickIndex != 0 {
		i = encodeVarintQuery(dAtA, i, uint64(m.TickIndex))
		i--
		dAtA[i] = 0x10
	}
	if len(m.PairId) > 0 {
		i -= len(m.PairId)
		copy(dAtA[i:], m.PairId)
		i = encodeVarintQuery(dAtA, i, uint64(len(m.PairId)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *QueryGetLimitOrderPoolFillMapResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *QueryGetLimitOrderPoolFillMapResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *QueryGetLimitOrderPoolFillMapResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	{
		size, err := m.LimitOrderPoolFillMap.MarshalToSizedBuffer(dAtA[:i])
		if err != nil {
			return 0, err
		}
		i -= size
		i = encodeVarintQuery(dAtA, i, uint64(size))
	}
	i--
	dAtA[i] = 0xa
	return len(dAtA) - i, nil
}

func (m *QueryAllLimitOrderPoolFillMapRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *QueryAllLimitOrderPoolFillMapRequest) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *QueryAllLimitOrderPoolFillMapRequest) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.Pagination != nil {
		{
			size, err := m.Pagination.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintQuery(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *QueryAllLimitOrderPoolFillMapResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *QueryAllLimitOrderPoolFillMapResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *QueryAllLimitOrderPoolFillMapResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.Pagination != nil {
		{
			size, err := m.Pagination.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintQuery(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x12
	}
	if len(m.LimitOrderPoolFillMap) > 0 {
		for iNdEx := len(m.LimitOrderPoolFillMap) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.LimitOrderPoolFillMap[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintQuery(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0xa
		}
	}
	return len(dAtA) - i, nil
}

func encodeVarintQuery(dAtA []byte, offset int, v uint64) int {
	offset -= sovQuery(v)
	base := offset
	for v >= 1<<7 {
		dAtA[offset] = uint8(v&0x7f | 0x80)
		v >>= 7
		offset++
	}
	dAtA[offset] = uint8(v)
	return base
}
func (m *QueryParamsRequest) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	return n
}

func (m *QueryParamsResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = m.Params.Size()
	n += 1 + l + sovQuery(uint64(l))
	return n
}

func (m *QueryGetTickObjectRequest) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.TickIndex != 0 {
		n += 1 + sovQuery(uint64(m.TickIndex))
	}
	l = len(m.PairId)
	if l > 0 {
		n += 1 + l + sovQuery(uint64(l))
	}
	return n
}

func (m *QueryGetTickObjectResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = m.TickObject.Size()
	n += 1 + l + sovQuery(uint64(l))
	return n
}

func (m *QueryAllTickObjectRequest) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Pagination != nil {
		l = m.Pagination.Size()
		n += 1 + l + sovQuery(uint64(l))
	}
	return n
}

func (m *QueryAllTickObjectResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if len(m.TickObject) > 0 {
		for _, e := range m.TickObject {
			l = e.Size()
			n += 1 + l + sovQuery(uint64(l))
		}
	}
	if m.Pagination != nil {
		l = m.Pagination.Size()
		n += 1 + l + sovQuery(uint64(l))
	}
	return n
}

func (m *QueryGetPairMapRequest) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.PairId)
	if l > 0 {
		n += 1 + l + sovQuery(uint64(l))
	}
	return n
}

func (m *QueryGetPairMapResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = m.PairMap.Size()
	n += 1 + l + sovQuery(uint64(l))
	return n
}

func (m *QueryAllPairMapRequest) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Pagination != nil {
		l = m.Pagination.Size()
		n += 1 + l + sovQuery(uint64(l))
	}
	return n
}

func (m *QueryAllPairMapResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if len(m.PairMap) > 0 {
		for _, e := range m.PairMap {
			l = e.Size()
			n += 1 + l + sovQuery(uint64(l))
		}
	}
	if m.Pagination != nil {
		l = m.Pagination.Size()
		n += 1 + l + sovQuery(uint64(l))
	}
	return n
}

func (m *QueryGetTokensRequest) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Id != 0 {
		n += 1 + sovQuery(uint64(m.Id))
	}
	return n
}

func (m *QueryGetTokensResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = m.Tokens.Size()
	n += 1 + l + sovQuery(uint64(l))
	return n
}

func (m *QueryAllTokensRequest) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Pagination != nil {
		l = m.Pagination.Size()
		n += 1 + l + sovQuery(uint64(l))
	}
	return n
}

func (m *QueryAllTokensResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if len(m.Tokens) > 0 {
		for _, e := range m.Tokens {
			l = e.Size()
			n += 1 + l + sovQuery(uint64(l))
		}
	}
	if m.Pagination != nil {
		l = m.Pagination.Size()
		n += 1 + l + sovQuery(uint64(l))
	}
	return n
}

func (m *QueryGetTokenObjectRequest) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.Address)
	if l > 0 {
		n += 1 + l + sovQuery(uint64(l))
	}
	return n
}

func (m *QueryGetTokenObjectResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = m.TokenObject.Size()
	n += 1 + l + sovQuery(uint64(l))
	return n
}

func (m *QueryAllTokenObjectRequest) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Pagination != nil {
		l = m.Pagination.Size()
		n += 1 + l + sovQuery(uint64(l))
	}
	return n
}

func (m *QueryAllTokenObjectResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if len(m.TokenObject) > 0 {
		for _, e := range m.TokenObject {
			l = e.Size()
			n += 1 + l + sovQuery(uint64(l))
		}
	}
	if m.Pagination != nil {
		l = m.Pagination.Size()
		n += 1 + l + sovQuery(uint64(l))
	}
	return n
}

func (m *QueryGetSharesRequest) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.Address)
	if l > 0 {
		n += 1 + l + sovQuery(uint64(l))
	}
	l = len(m.PairId)
	if l > 0 {
		n += 1 + l + sovQuery(uint64(l))
	}
	if m.TickIndex != 0 {
		n += 1 + sovQuery(uint64(m.TickIndex))
	}
	if m.Fee != 0 {
		n += 1 + sovQuery(uint64(m.Fee))
	}
	return n
}

func (m *QueryGetSharesResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = m.Shares.Size()
	n += 1 + l + sovQuery(uint64(l))
	return n
}

func (m *QueryAllSharesRequest) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Pagination != nil {
		l = m.Pagination.Size()
		n += 1 + l + sovQuery(uint64(l))
	}
	return n
}

func (m *QueryAllSharesResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if len(m.Shares) > 0 {
		for _, e := range m.Shares {
			l = e.Size()
			n += 1 + l + sovQuery(uint64(l))
		}
	}
	if m.Pagination != nil {
		l = m.Pagination.Size()
		n += 1 + l + sovQuery(uint64(l))
	}
	return n
}

func (m *QueryGetFeeListRequest) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Id != 0 {
		n += 1 + sovQuery(uint64(m.Id))
	}
	return n
}

func (m *QueryGetFeeListResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = m.FeeList.Size()
	n += 1 + l + sovQuery(uint64(l))
	return n
}

func (m *QueryAllFeeListRequest) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Pagination != nil {
		l = m.Pagination.Size()
		n += 1 + l + sovQuery(uint64(l))
	}
	return n
}

func (m *QueryAllFeeListResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if len(m.FeeList) > 0 {
		for _, e := range m.FeeList {
			l = e.Size()
			n += 1 + l + sovQuery(uint64(l))
		}
	}
	if m.Pagination != nil {
		l = m.Pagination.Size()
		n += 1 + l + sovQuery(uint64(l))
	}
	return n
}

func (m *QueryGetLimitOrderPoolUserShareMapRequest) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.PairId)
	if l > 0 {
		n += 1 + l + sovQuery(uint64(l))
	}
	if m.TickIndex != 0 {
		n += 1 + sovQuery(uint64(m.TickIndex))
	}
	l = len(m.Token)
	if l > 0 {
		n += 1 + l + sovQuery(uint64(l))
	}
	if m.Count != 0 {
		n += 1 + sovQuery(uint64(m.Count))
	}
	l = len(m.Address)
	if l > 0 {
		n += 1 + l + sovQuery(uint64(l))
	}
	return n
}

func (m *QueryGetLimitOrderPoolUserShareMapResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = m.LimitOrderPoolUserShareMap.Size()
	n += 1 + l + sovQuery(uint64(l))
	return n
}

func (m *QueryAllLimitOrderPoolUserShareMapRequest) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Pagination != nil {
		l = m.Pagination.Size()
		n += 1 + l + sovQuery(uint64(l))
	}
	return n
}

func (m *QueryAllLimitOrderPoolUserShareMapResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if len(m.LimitOrderPoolUserShareMap) > 0 {
		for _, e := range m.LimitOrderPoolUserShareMap {
			l = e.Size()
			n += 1 + l + sovQuery(uint64(l))
		}
	}
	if m.Pagination != nil {
		l = m.Pagination.Size()
		n += 1 + l + sovQuery(uint64(l))
	}
	return n
}

func (m *QueryGetLimitOrderPoolUserSharesWithdrawnRequest) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.PairId)
	if l > 0 {
		n += 1 + l + sovQuery(uint64(l))
	}
	if m.TickIndex != 0 {
		n += 1 + sovQuery(uint64(m.TickIndex))
	}
	l = len(m.Token)
	if l > 0 {
		n += 1 + l + sovQuery(uint64(l))
	}
	if m.Count != 0 {
		n += 1 + sovQuery(uint64(m.Count))
	}
	l = len(m.Address)
	if l > 0 {
		n += 1 + l + sovQuery(uint64(l))
	}
	return n
}

func (m *QueryGetLimitOrderPoolUserSharesWithdrawnResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = m.LimitOrderPoolUserSharesWithdrawn.Size()
	n += 1 + l + sovQuery(uint64(l))
	return n
}

func (m *QueryAllLimitOrderPoolUserSharesWithdrawnRequest) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Pagination != nil {
		l = m.Pagination.Size()
		n += 1 + l + sovQuery(uint64(l))
	}
	return n
}

func (m *QueryAllLimitOrderPoolUserSharesWithdrawnResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if len(m.LimitOrderPoolUserSharesWithdrawn) > 0 {
		for _, e := range m.LimitOrderPoolUserSharesWithdrawn {
			l = e.Size()
			n += 1 + l + sovQuery(uint64(l))
		}
	}
	if m.Pagination != nil {
		l = m.Pagination.Size()
		n += 1 + l + sovQuery(uint64(l))
	}
	return n
}

func (m *QueryGetLimitOrderPoolTotalSharesMapRequest) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.PairId)
	if l > 0 {
		n += 1 + l + sovQuery(uint64(l))
	}
	if m.TickIndex != 0 {
		n += 1 + sovQuery(uint64(m.TickIndex))
	}
	l = len(m.Token)
	if l > 0 {
		n += 1 + l + sovQuery(uint64(l))
	}
	if m.Count != 0 {
		n += 1 + sovQuery(uint64(m.Count))
	}
	return n
}

func (m *QueryGetLimitOrderPoolTotalSharesMapResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = m.LimitOrderPoolTotalSharesMap.Size()
	n += 1 + l + sovQuery(uint64(l))
	return n
}

func (m *QueryAllLimitOrderPoolTotalSharesMapRequest) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Pagination != nil {
		l = m.Pagination.Size()
		n += 1 + l + sovQuery(uint64(l))
	}
	return n
}

func (m *QueryAllLimitOrderPoolTotalSharesMapResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if len(m.LimitOrderPoolTotalSharesMap) > 0 {
		for _, e := range m.LimitOrderPoolTotalSharesMap {
			l = e.Size()
			n += 1 + l + sovQuery(uint64(l))
		}
	}
	if m.Pagination != nil {
		l = m.Pagination.Size()
		n += 1 + l + sovQuery(uint64(l))
	}
	return n
}

func (m *QueryGetLimitOrderPoolReserveMapRequest) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.PairId)
	if l > 0 {
		n += 1 + l + sovQuery(uint64(l))
	}
	if m.TickIndex != 0 {
		n += 1 + sovQuery(uint64(m.TickIndex))
	}
	l = len(m.Token)
	if l > 0 {
		n += 1 + l + sovQuery(uint64(l))
	}
	if m.Count != 0 {
		n += 1 + sovQuery(uint64(m.Count))
	}
	return n
}

func (m *QueryGetLimitOrderPoolReserveMapResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = m.LimitOrderPoolReserveMap.Size()
	n += 1 + l + sovQuery(uint64(l))
	return n
}

func (m *QueryAllLimitOrderPoolReserveMapRequest) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Pagination != nil {
		l = m.Pagination.Size()
		n += 1 + l + sovQuery(uint64(l))
	}
	return n
}

func (m *QueryAllLimitOrderPoolReserveMapResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if len(m.LimitOrderPoolReserveMap) > 0 {
		for _, e := range m.LimitOrderPoolReserveMap {
			l = e.Size()
			n += 1 + l + sovQuery(uint64(l))
		}
	}
	if m.Pagination != nil {
		l = m.Pagination.Size()
		n += 1 + l + sovQuery(uint64(l))
	}
	return n
}

func (m *QueryGetLimitOrderPoolFillMapRequest) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.PairId)
	if l > 0 {
		n += 1 + l + sovQuery(uint64(l))
	}
	if m.TickIndex != 0 {
		n += 1 + sovQuery(uint64(m.TickIndex))
	}
	l = len(m.Token)
	if l > 0 {
		n += 1 + l + sovQuery(uint64(l))
	}
	if m.Count != 0 {
		n += 1 + sovQuery(uint64(m.Count))
	}
	return n
}

func (m *QueryGetLimitOrderPoolFillMapResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = m.LimitOrderPoolFillMap.Size()
	n += 1 + l + sovQuery(uint64(l))
	return n
}

func (m *QueryAllLimitOrderPoolFillMapRequest) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Pagination != nil {
		l = m.Pagination.Size()
		n += 1 + l + sovQuery(uint64(l))
	}
	return n
}

func (m *QueryAllLimitOrderPoolFillMapResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if len(m.LimitOrderPoolFillMap) > 0 {
		for _, e := range m.LimitOrderPoolFillMap {
			l = e.Size()
			n += 1 + l + sovQuery(uint64(l))
		}
	}
	if m.Pagination != nil {
		l = m.Pagination.Size()
		n += 1 + l + sovQuery(uint64(l))
	}
	return n
}

func sovQuery(x uint64) (n int) {
	return (math_bits.Len64(x|1) + 6) / 7
}
func sozQuery(x uint64) (n int) {
	return sovQuery(uint64((x << 1) ^ uint64((int64(x) >> 63))))
}
func (m *QueryParamsRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: QueryParamsRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: QueryParamsRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *QueryParamsResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: QueryParamsResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: QueryParamsResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Params", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := m.Params.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *QueryGetTickObjectRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: QueryGetTickObjectRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: QueryGetTickObjectRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field TickIndex", wireType)
			}
			m.TickIndex = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.TickIndex |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field PairId", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.PairId = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *QueryGetTickObjectResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: QueryGetTickObjectResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: QueryGetTickObjectResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field TickObject", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := m.TickObject.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *QueryAllTickObjectRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: QueryAllTickObjectRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: QueryAllTickObjectRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Pagination", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Pagination == nil {
				m.Pagination = &query.PageRequest{}
			}
			if err := m.Pagination.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *QueryAllTickObjectResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: QueryAllTickObjectResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: QueryAllTickObjectResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field TickObject", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.TickObject = append(m.TickObject, TickObject{})
			if err := m.TickObject[len(m.TickObject)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Pagination", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Pagination == nil {
				m.Pagination = &query.PageResponse{}
			}
			if err := m.Pagination.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *QueryGetPairMapRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: QueryGetPairMapRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: QueryGetPairMapRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field PairId", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.PairId = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *QueryGetPairMapResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: QueryGetPairMapResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: QueryGetPairMapResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field PairMap", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := m.PairMap.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *QueryAllPairMapRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: QueryAllPairMapRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: QueryAllPairMapRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Pagination", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Pagination == nil {
				m.Pagination = &query.PageRequest{}
			}
			if err := m.Pagination.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *QueryAllPairMapResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: QueryAllPairMapResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: QueryAllPairMapResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field PairMap", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.PairMap = append(m.PairMap, PairMap{})
			if err := m.PairMap[len(m.PairMap)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Pagination", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Pagination == nil {
				m.Pagination = &query.PageResponse{}
			}
			if err := m.Pagination.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *QueryGetTokensRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: QueryGetTokensRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: QueryGetTokensRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Id", wireType)
			}
			m.Id = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Id |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *QueryGetTokensResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: QueryGetTokensResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: QueryGetTokensResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Tokens", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := m.Tokens.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *QueryAllTokensRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: QueryAllTokensRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: QueryAllTokensRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Pagination", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Pagination == nil {
				m.Pagination = &query.PageRequest{}
			}
			if err := m.Pagination.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *QueryAllTokensResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: QueryAllTokensResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: QueryAllTokensResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Tokens", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Tokens = append(m.Tokens, Tokens{})
			if err := m.Tokens[len(m.Tokens)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Pagination", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Pagination == nil {
				m.Pagination = &query.PageResponse{}
			}
			if err := m.Pagination.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *QueryGetTokenObjectRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: QueryGetTokenObjectRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: QueryGetTokenObjectRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Address", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Address = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *QueryGetTokenObjectResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: QueryGetTokenObjectResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: QueryGetTokenObjectResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field TokenObject", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := m.TokenObject.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *QueryAllTokenObjectRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: QueryAllTokenObjectRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: QueryAllTokenObjectRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Pagination", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Pagination == nil {
				m.Pagination = &query.PageRequest{}
			}
			if err := m.Pagination.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *QueryAllTokenObjectResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: QueryAllTokenObjectResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: QueryAllTokenObjectResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field TokenObject", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.TokenObject = append(m.TokenObject, TokenObject{})
			if err := m.TokenObject[len(m.TokenObject)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Pagination", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Pagination == nil {
				m.Pagination = &query.PageResponse{}
			}
			if err := m.Pagination.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *QueryGetSharesRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: QueryGetSharesRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: QueryGetSharesRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Address", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Address = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field PairId", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.PairId = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 3:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field TickIndex", wireType)
			}
			m.TickIndex = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.TickIndex |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 4:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Fee", wireType)
			}
			m.Fee = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Fee |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *QueryGetSharesResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: QueryGetSharesResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: QueryGetSharesResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Shares", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := m.Shares.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *QueryAllSharesRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: QueryAllSharesRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: QueryAllSharesRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Pagination", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Pagination == nil {
				m.Pagination = &query.PageRequest{}
			}
			if err := m.Pagination.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *QueryAllSharesResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: QueryAllSharesResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: QueryAllSharesResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Shares", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Shares = append(m.Shares, Shares{})
			if err := m.Shares[len(m.Shares)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Pagination", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Pagination == nil {
				m.Pagination = &query.PageResponse{}
			}
			if err := m.Pagination.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *QueryGetFeeListRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: QueryGetFeeListRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: QueryGetFeeListRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Id", wireType)
			}
			m.Id = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Id |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *QueryGetFeeListResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: QueryGetFeeListResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: QueryGetFeeListResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field FeeList", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := m.FeeList.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *QueryAllFeeListRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: QueryAllFeeListRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: QueryAllFeeListRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Pagination", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Pagination == nil {
				m.Pagination = &query.PageRequest{}
			}
			if err := m.Pagination.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *QueryAllFeeListResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: QueryAllFeeListResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: QueryAllFeeListResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field FeeList", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.FeeList = append(m.FeeList, FeeList{})
			if err := m.FeeList[len(m.FeeList)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Pagination", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Pagination == nil {
				m.Pagination = &query.PageResponse{}
			}
			if err := m.Pagination.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *QueryGetLimitOrderPoolUserShareMapRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: QueryGetLimitOrderPoolUserShareMapRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: QueryGetLimitOrderPoolUserShareMapRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field PairId", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.PairId = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field TickIndex", wireType)
			}
			m.TickIndex = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.TickIndex |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Token", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Token = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 4:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Count", wireType)
			}
			m.Count = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Count |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 5:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Address", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Address = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *QueryGetLimitOrderPoolUserShareMapResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: QueryGetLimitOrderPoolUserShareMapResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: QueryGetLimitOrderPoolUserShareMapResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field LimitOrderPoolUserShareMap", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := m.LimitOrderPoolUserShareMap.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *QueryAllLimitOrderPoolUserShareMapRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: QueryAllLimitOrderPoolUserShareMapRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: QueryAllLimitOrderPoolUserShareMapRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Pagination", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Pagination == nil {
				m.Pagination = &query.PageRequest{}
			}
			if err := m.Pagination.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *QueryAllLimitOrderPoolUserShareMapResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: QueryAllLimitOrderPoolUserShareMapResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: QueryAllLimitOrderPoolUserShareMapResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field LimitOrderPoolUserShareMap", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.LimitOrderPoolUserShareMap = append(m.LimitOrderPoolUserShareMap, LimitOrderPoolUserShareMap{})
			if err := m.LimitOrderPoolUserShareMap[len(m.LimitOrderPoolUserShareMap)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Pagination", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Pagination == nil {
				m.Pagination = &query.PageResponse{}
			}
			if err := m.Pagination.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *QueryGetLimitOrderPoolUserSharesWithdrawnRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: QueryGetLimitOrderPoolUserSharesWithdrawnRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: QueryGetLimitOrderPoolUserSharesWithdrawnRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field PairId", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.PairId = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field TickIndex", wireType)
			}
			m.TickIndex = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.TickIndex |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Token", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Token = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 4:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Count", wireType)
			}
			m.Count = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Count |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 5:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Address", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Address = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *QueryGetLimitOrderPoolUserSharesWithdrawnResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: QueryGetLimitOrderPoolUserSharesWithdrawnResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: QueryGetLimitOrderPoolUserSharesWithdrawnResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field LimitOrderPoolUserSharesWithdrawn", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := m.LimitOrderPoolUserSharesWithdrawn.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *QueryAllLimitOrderPoolUserSharesWithdrawnRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: QueryAllLimitOrderPoolUserSharesWithdrawnRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: QueryAllLimitOrderPoolUserSharesWithdrawnRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Pagination", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Pagination == nil {
				m.Pagination = &query.PageRequest{}
			}
			if err := m.Pagination.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *QueryAllLimitOrderPoolUserSharesWithdrawnResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: QueryAllLimitOrderPoolUserSharesWithdrawnResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: QueryAllLimitOrderPoolUserSharesWithdrawnResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field LimitOrderPoolUserSharesWithdrawn", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.LimitOrderPoolUserSharesWithdrawn = append(m.LimitOrderPoolUserSharesWithdrawn, LimitOrderPoolUserSharesWithdrawn{})
			if err := m.LimitOrderPoolUserSharesWithdrawn[len(m.LimitOrderPoolUserSharesWithdrawn)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Pagination", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Pagination == nil {
				m.Pagination = &query.PageResponse{}
			}
			if err := m.Pagination.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *QueryGetLimitOrderPoolTotalSharesMapRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: QueryGetLimitOrderPoolTotalSharesMapRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: QueryGetLimitOrderPoolTotalSharesMapRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field PairId", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.PairId = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field TickIndex", wireType)
			}
			m.TickIndex = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.TickIndex |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Token", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Token = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 4:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Count", wireType)
			}
			m.Count = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Count |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *QueryGetLimitOrderPoolTotalSharesMapResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: QueryGetLimitOrderPoolTotalSharesMapResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: QueryGetLimitOrderPoolTotalSharesMapResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field LimitOrderPoolTotalSharesMap", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := m.LimitOrderPoolTotalSharesMap.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *QueryAllLimitOrderPoolTotalSharesMapRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: QueryAllLimitOrderPoolTotalSharesMapRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: QueryAllLimitOrderPoolTotalSharesMapRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Pagination", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Pagination == nil {
				m.Pagination = &query.PageRequest{}
			}
			if err := m.Pagination.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *QueryAllLimitOrderPoolTotalSharesMapResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: QueryAllLimitOrderPoolTotalSharesMapResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: QueryAllLimitOrderPoolTotalSharesMapResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field LimitOrderPoolTotalSharesMap", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.LimitOrderPoolTotalSharesMap = append(m.LimitOrderPoolTotalSharesMap, LimitOrderPoolTotalSharesMap{})
			if err := m.LimitOrderPoolTotalSharesMap[len(m.LimitOrderPoolTotalSharesMap)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Pagination", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Pagination == nil {
				m.Pagination = &query.PageResponse{}
			}
			if err := m.Pagination.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *QueryGetLimitOrderPoolReserveMapRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: QueryGetLimitOrderPoolReserveMapRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: QueryGetLimitOrderPoolReserveMapRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field PairId", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.PairId = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field TickIndex", wireType)
			}
			m.TickIndex = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.TickIndex |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Token", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Token = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 4:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Count", wireType)
			}
			m.Count = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Count |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *QueryGetLimitOrderPoolReserveMapResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: QueryGetLimitOrderPoolReserveMapResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: QueryGetLimitOrderPoolReserveMapResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field LimitOrderPoolReserveMap", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := m.LimitOrderPoolReserveMap.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *QueryAllLimitOrderPoolReserveMapRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: QueryAllLimitOrderPoolReserveMapRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: QueryAllLimitOrderPoolReserveMapRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Pagination", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Pagination == nil {
				m.Pagination = &query.PageRequest{}
			}
			if err := m.Pagination.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *QueryAllLimitOrderPoolReserveMapResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: QueryAllLimitOrderPoolReserveMapResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: QueryAllLimitOrderPoolReserveMapResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field LimitOrderPoolReserveMap", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.LimitOrderPoolReserveMap = append(m.LimitOrderPoolReserveMap, LimitOrderPoolReserveMap{})
			if err := m.LimitOrderPoolReserveMap[len(m.LimitOrderPoolReserveMap)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Pagination", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Pagination == nil {
				m.Pagination = &query.PageResponse{}
			}
			if err := m.Pagination.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *QueryGetLimitOrderPoolFillMapRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: QueryGetLimitOrderPoolFillMapRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: QueryGetLimitOrderPoolFillMapRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field PairId", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.PairId = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field TickIndex", wireType)
			}
			m.TickIndex = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.TickIndex |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Token", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Token = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 4:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Count", wireType)
			}
			m.Count = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Count |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *QueryGetLimitOrderPoolFillMapResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: QueryGetLimitOrderPoolFillMapResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: QueryGetLimitOrderPoolFillMapResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field LimitOrderPoolFillMap", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := m.LimitOrderPoolFillMap.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *QueryAllLimitOrderPoolFillMapRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: QueryAllLimitOrderPoolFillMapRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: QueryAllLimitOrderPoolFillMapRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Pagination", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Pagination == nil {
				m.Pagination = &query.PageRequest{}
			}
			if err := m.Pagination.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *QueryAllLimitOrderPoolFillMapResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: QueryAllLimitOrderPoolFillMapResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: QueryAllLimitOrderPoolFillMapResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field LimitOrderPoolFillMap", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.LimitOrderPoolFillMap = append(m.LimitOrderPoolFillMap, LimitOrderPoolFillMap{})
			if err := m.LimitOrderPoolFillMap[len(m.LimitOrderPoolFillMap)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Pagination", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Pagination == nil {
				m.Pagination = &query.PageResponse{}
			}
			if err := m.Pagination.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func skipQuery(dAtA []byte) (n int, err error) {
	l := len(dAtA)
	iNdEx := 0
	depth := 0
	for iNdEx < l {
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return 0, ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return 0, io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		wireType := int(wire & 0x7)
		switch wireType {
		case 0:
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				iNdEx++
				if dAtA[iNdEx-1] < 0x80 {
					break
				}
			}
		case 1:
			iNdEx += 8
		case 2:
			var length int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				length |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if length < 0 {
				return 0, ErrInvalidLengthQuery
			}
			iNdEx += length
		case 3:
			depth++
		case 4:
			if depth == 0 {
				return 0, ErrUnexpectedEndOfGroupQuery
			}
			depth--
		case 5:
			iNdEx += 4
		default:
			return 0, fmt.Errorf("proto: illegal wireType %d", wireType)
		}
		if iNdEx < 0 {
			return 0, ErrInvalidLengthQuery
		}
		if depth == 0 {
			return iNdEx, nil
		}
	}
	return 0, io.ErrUnexpectedEOF
}

var (
	ErrInvalidLengthQuery        = fmt.Errorf("proto: negative length found during unmarshaling")
	ErrIntOverflowQuery          = fmt.Errorf("proto: integer overflow")
	ErrUnexpectedEndOfGroupQuery = fmt.Errorf("proto: unexpected end of group")
)
