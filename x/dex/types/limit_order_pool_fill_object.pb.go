// Code generated by protoc-gen-gogo. DO NOT EDIT.
// source: dex/limit_order_pool_fill_object.proto

package types

import (
	fmt "fmt"
	github_com_cosmos_cosmos_sdk_types "github.com/cosmos/cosmos-sdk/types"
	_ "github.com/gogo/protobuf/gogoproto"
	proto "github.com/gogo/protobuf/proto"
	io "io"
	math "math"
	math_bits "math/bits"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.GoGoProtoPackageIsVersion3 // please upgrade the proto package

type LimitOrderPoolFillObject struct {
	PairId         string                                 `protobuf:"bytes,1,opt,name=pairId,proto3" json:"pairId,omitempty"`
	Token          string                                 `protobuf:"bytes,2,opt,name=token,proto3" json:"token,omitempty"`
	TickIndex      int64                                  `protobuf:"varint,3,opt,name=tickIndex,proto3" json:"tickIndex,omitempty"`
	Count          uint64                                 `protobuf:"varint,4,opt,name=count,proto3" json:"count,omitempty"`
	FilledReserves github_com_cosmos_cosmos_sdk_types.Dec `protobuf:"bytes,5,opt,name=filledReserves,proto3,customtype=github.com/cosmos/cosmos-sdk/types.Dec" json:"filledReserves" yaml:"fill"`
}

func (m *LimitOrderPoolFillObject) Reset()         { *m = LimitOrderPoolFillObject{} }
func (m *LimitOrderPoolFillObject) String() string { return proto.CompactTextString(m) }
func (*LimitOrderPoolFillObject) ProtoMessage()    {}
func (*LimitOrderPoolFillObject) Descriptor() ([]byte, []int) {
	return fileDescriptor_7dbb6e5a85c685fc, []int{0}
}
func (m *LimitOrderPoolFillObject) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *LimitOrderPoolFillObject) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_LimitOrderPoolFillObject.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *LimitOrderPoolFillObject) XXX_Merge(src proto.Message) {
	xxx_messageInfo_LimitOrderPoolFillObject.Merge(m, src)
}
func (m *LimitOrderPoolFillObject) XXX_Size() int {
	return m.Size()
}
func (m *LimitOrderPoolFillObject) XXX_DiscardUnknown() {
	xxx_messageInfo_LimitOrderPoolFillObject.DiscardUnknown(m)
}

var xxx_messageInfo_LimitOrderPoolFillObject proto.InternalMessageInfo

func (m *LimitOrderPoolFillObject) GetPairId() string {
	if m != nil {
		return m.PairId
	}
	return ""
}

func (m *LimitOrderPoolFillObject) GetToken() string {
	if m != nil {
		return m.Token
	}
	return ""
}

func (m *LimitOrderPoolFillObject) GetTickIndex() int64 {
	if m != nil {
		return m.TickIndex
	}
	return 0
}

func (m *LimitOrderPoolFillObject) GetCount() uint64 {
	if m != nil {
		return m.Count
	}
	return 0
}

func init() {
	proto.RegisterType((*LimitOrderPoolFillObject)(nil), "nicholasdotsol.duality.dex.LimitOrderPoolFillObject")
}

func init() {
	proto.RegisterFile("dex/limit_order_pool_fill_object.proto", fileDescriptor_7dbb6e5a85c685fc)
}

var fileDescriptor_7dbb6e5a85c685fc = []byte{
	// 330 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0x5c, 0x91, 0xcf, 0x4b, 0xc3, 0x30,
	0x1c, 0xc5, 0x1b, 0xf7, 0x03, 0x56, 0xc1, 0x43, 0x19, 0x52, 0x86, 0xa4, 0x63, 0x87, 0xb1, 0xcb,
	0x9a, 0x83, 0x37, 0x8f, 0x63, 0x28, 0x03, 0x71, 0x52, 0x6f, 0x5e, 0x4a, 0x97, 0xc4, 0x2d, 0x2e,
	0xed, 0xb7, 0x34, 0x99, 0x76, 0xff, 0x85, 0x7f, 0xd6, 0x8e, 0x3b, 0x8a, 0x87, 0x22, 0xdb, 0xcd,
	0xa3, 0xe0, 0x5d, 0xd2, 0x15, 0x94, 0x9d, 0x92, 0xf7, 0x92, 0xef, 0xe7, 0x91, 0x17, 0xbb, 0xcf,
	0x78, 0x4e, 0xa4, 0x88, 0x85, 0x0e, 0x21, 0x63, 0x3c, 0x0b, 0x53, 0x00, 0x19, 0x3e, 0x09, 0x29,
	0x43, 0x98, 0x3d, 0x73, 0xaa, 0xfd, 0x34, 0x03, 0x0d, 0x4e, 0x27, 0x11, 0x74, 0x01, 0x32, 0x52,
	0x0c, 0xb4, 0x02, 0xe9, 0xb3, 0x55, 0x24, 0x85, 0x5e, 0xfb, 0x8c, 0xe7, 0x9d, 0xf6, 0x1c, 0xe6,
	0x50, 0x5e, 0x23, 0x66, 0x77, 0x98, 0xe8, 0xfd, 0x20, 0xdb, 0xbd, 0x35, 0xe0, 0xa9, 0xe1, 0xde,
	0x03, 0xc8, 0x6b, 0x21, 0xe5, 0xb4, 0x84, 0x3a, 0xe7, 0x76, 0x33, 0x8d, 0x44, 0x36, 0x61, 0x2e,
	0xea, 0xa2, 0x41, 0x2b, 0xa8, 0x94, 0xd3, 0xb6, 0x1b, 0x1a, 0x96, 0x3c, 0x71, 0x4f, 0x4a, 0xfb,
	0x20, 0x9c, 0x0b, 0xbb, 0xa5, 0x05, 0x5d, 0x4e, 0x12, 0xc6, 0x73, 0xb7, 0xd6, 0x45, 0x83, 0x5a,
	0xf0, 0x67, 0x98, 0x19, 0x0a, 0xab, 0x44, 0xbb, 0xf5, 0x2e, 0x1a, 0xd4, 0x83, 0x83, 0x70, 0x5e,
	0xed, 0x33, 0xf3, 0x0a, 0xce, 0x02, 0xae, 0x78, 0xf6, 0xc2, 0x95, 0xdb, 0x30, 0xc8, 0xd1, 0x74,
	0x53, 0x78, 0xd6, 0x47, 0xe1, 0xf5, 0xe7, 0x42, 0x2f, 0x56, 0x33, 0x9f, 0x42, 0x4c, 0x28, 0xa8,
	0x18, 0x54, 0xb5, 0x0c, 0x15, 0x5b, 0x12, 0xbd, 0x4e, 0xb9, 0xf2, 0xc7, 0x9c, 0x7e, 0x15, 0xde,
	0x11, 0xe7, 0xbb, 0xf0, 0x4e, 0xd7, 0x51, 0x2c, 0xaf, 0x7a, 0xc6, 0xef, 0x05, 0x47, 0xc7, 0xa3,
	0x9b, 0xcd, 0x0e, 0xa3, 0xed, 0x0e, 0xa3, 0xcf, 0x1d, 0x46, 0x6f, 0x7b, 0x6c, 0x6d, 0xf7, 0xd8,
	0x7a, 0xdf, 0x63, 0xeb, 0x71, 0xf8, 0x2f, 0xf2, 0xae, 0xaa, 0x73, 0x0c, 0xfa, 0x01, 0x24, 0xa9,
	0xea, 0x24, 0x39, 0x31, 0xff, 0x51, 0xa6, 0xcf, 0x9a, 0x65, 0x8f, 0x97, 0xbf, 0x01, 0x00, 0x00,
	0xff, 0xff, 0xd4, 0x23, 0x4f, 0x14, 0xa3, 0x01, 0x00, 0x00,
}

func (m *LimitOrderPoolFillObject) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *LimitOrderPoolFillObject) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *LimitOrderPoolFillObject) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	{
		size := m.FilledReserves.Size()
		i -= size
		if _, err := m.FilledReserves.MarshalTo(dAtA[i:]); err != nil {
			return 0, err
		}
		i = encodeVarintLimitOrderPoolFillObject(dAtA, i, uint64(size))
	}
	i--
	dAtA[i] = 0x2a
	if m.Count != 0 {
		i = encodeVarintLimitOrderPoolFillObject(dAtA, i, uint64(m.Count))
		i--
		dAtA[i] = 0x20
	}
	if m.TickIndex != 0 {
		i = encodeVarintLimitOrderPoolFillObject(dAtA, i, uint64(m.TickIndex))
		i--
		dAtA[i] = 0x18
	}
	if len(m.Token) > 0 {
		i -= len(m.Token)
		copy(dAtA[i:], m.Token)
		i = encodeVarintLimitOrderPoolFillObject(dAtA, i, uint64(len(m.Token)))
		i--
		dAtA[i] = 0x12
	}
	if len(m.PairId) > 0 {
		i -= len(m.PairId)
		copy(dAtA[i:], m.PairId)
		i = encodeVarintLimitOrderPoolFillObject(dAtA, i, uint64(len(m.PairId)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func encodeVarintLimitOrderPoolFillObject(dAtA []byte, offset int, v uint64) int {
	offset -= sovLimitOrderPoolFillObject(v)
	base := offset
	for v >= 1<<7 {
		dAtA[offset] = uint8(v&0x7f | 0x80)
		v >>= 7
		offset++
	}
	dAtA[offset] = uint8(v)
	return base
}
func (m *LimitOrderPoolFillObject) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.PairId)
	if l > 0 {
		n += 1 + l + sovLimitOrderPoolFillObject(uint64(l))
	}
	l = len(m.Token)
	if l > 0 {
		n += 1 + l + sovLimitOrderPoolFillObject(uint64(l))
	}
	if m.TickIndex != 0 {
		n += 1 + sovLimitOrderPoolFillObject(uint64(m.TickIndex))
	}
	if m.Count != 0 {
		n += 1 + sovLimitOrderPoolFillObject(uint64(m.Count))
	}
	l = m.FilledReserves.Size()
	n += 1 + l + sovLimitOrderPoolFillObject(uint64(l))
	return n
}

func sovLimitOrderPoolFillObject(x uint64) (n int) {
	return (math_bits.Len64(x|1) + 6) / 7
}
func sozLimitOrderPoolFillObject(x uint64) (n int) {
	return sovLimitOrderPoolFillObject(uint64((x << 1) ^ uint64((int64(x) >> 63))))
}
func (m *LimitOrderPoolFillObject) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowLimitOrderPoolFillObject
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: LimitOrderPoolFillObject: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: LimitOrderPoolFillObject: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field PairId", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowLimitOrderPoolFillObject
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthLimitOrderPoolFillObject
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthLimitOrderPoolFillObject
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.PairId = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Token", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowLimitOrderPoolFillObject
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthLimitOrderPoolFillObject
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthLimitOrderPoolFillObject
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Token = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 3:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field TickIndex", wireType)
			}
			m.TickIndex = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowLimitOrderPoolFillObject
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.TickIndex |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 4:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Count", wireType)
			}
			m.Count = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowLimitOrderPoolFillObject
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Count |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 5:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field FilledReserves", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowLimitOrderPoolFillObject
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthLimitOrderPoolFillObject
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthLimitOrderPoolFillObject
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := m.FilledReserves.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipLimitOrderPoolFillObject(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthLimitOrderPoolFillObject
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func skipLimitOrderPoolFillObject(dAtA []byte) (n int, err error) {
	l := len(dAtA)
	iNdEx := 0
	depth := 0
	for iNdEx < l {
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return 0, ErrIntOverflowLimitOrderPoolFillObject
			}
			if iNdEx >= l {
				return 0, io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		wireType := int(wire & 0x7)
		switch wireType {
		case 0:
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowLimitOrderPoolFillObject
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				iNdEx++
				if dAtA[iNdEx-1] < 0x80 {
					break
				}
			}
		case 1:
			iNdEx += 8
		case 2:
			var length int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowLimitOrderPoolFillObject
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				length |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if length < 0 {
				return 0, ErrInvalidLengthLimitOrderPoolFillObject
			}
			iNdEx += length
		case 3:
			depth++
		case 4:
			if depth == 0 {
				return 0, ErrUnexpectedEndOfGroupLimitOrderPoolFillObject
			}
			depth--
		case 5:
			iNdEx += 4
		default:
			return 0, fmt.Errorf("proto: illegal wireType %d", wireType)
		}
		if iNdEx < 0 {
			return 0, ErrInvalidLengthLimitOrderPoolFillObject
		}
		if depth == 0 {
			return iNdEx, nil
		}
	}
	return 0, io.ErrUnexpectedEOF
}

var (
	ErrInvalidLengthLimitOrderPoolFillObject        = fmt.Errorf("proto: negative length found during unmarshaling")
	ErrIntOverflowLimitOrderPoolFillObject          = fmt.Errorf("proto: integer overflow")
	ErrUnexpectedEndOfGroupLimitOrderPoolFillObject = fmt.Errorf("proto: unexpected end of group")
)
