// Code generated by protoc-gen-gogo. DO NOT EDIT.
// source: dex/ticks.proto

package types

import (
	fmt "fmt"
	proto "github.com/gogo/protobuf/proto"
	io "io"
	math "math"
	math_bits "math/bits"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.GoGoProtoPackageIsVersion3 // please upgrade the proto package

type Ticks struct {
	Token0         string `protobuf:"bytes,1,opt,name=token0,proto3" json:"token0,omitempty"`
	Token1         string `protobuf:"bytes,2,opt,name=token1,proto3" json:"token1,omitempty"`
	PoolsZeroToOne *Pool  `protobuf:"bytes,3,opt,name=poolsZeroToOne,proto3" json:"poolsZeroToOne,omitempty"`
	PoolsOneToZero *Pool  `protobuf:"bytes,4,opt,name=poolsOneToZero,proto3" json:"poolsOneToZero,omitempty"`
}

func (m *Ticks) Reset()         { *m = Ticks{} }
func (m *Ticks) String() string { return proto.CompactTextString(m) }
func (*Ticks) ProtoMessage()    {}
func (*Ticks) Descriptor() ([]byte, []int) {
	return fileDescriptor_f2fc2226c4509899, []int{0}
}
func (m *Ticks) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *Ticks) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_Ticks.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *Ticks) XXX_Merge(src proto.Message) {
	xxx_messageInfo_Ticks.Merge(m, src)
}
func (m *Ticks) XXX_Size() int {
	return m.Size()
}
func (m *Ticks) XXX_DiscardUnknown() {
	xxx_messageInfo_Ticks.DiscardUnknown(m)
}

var xxx_messageInfo_Ticks proto.InternalMessageInfo

func (m *Ticks) GetToken0() string {
	if m != nil {
		return m.Token0
	}
	return ""
}

func (m *Ticks) GetToken1() string {
	if m != nil {
		return m.Token1
	}
	return ""
}

func (m *Ticks) GetPoolsZeroToOne() *Pool {
	if m != nil {
		return m.PoolsZeroToOne
	}
	return nil
}

func (m *Ticks) GetPoolsOneToZero() *Pool {
	if m != nil {
		return m.PoolsOneToZero
	}
	return nil
}

func init() {
	proto.RegisterType((*Ticks)(nil), "nicholasdotsol.duality.dex.Ticks")
}

func init() { proto.RegisterFile("dex/ticks.proto", fileDescriptor_f2fc2226c4509899) }

var fileDescriptor_f2fc2226c4509899 = []byte{
	// 232 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0xe2, 0xe2, 0x4f, 0x49, 0xad, 0xd0,
	0x2f, 0xc9, 0x4c, 0xce, 0x2e, 0xd6, 0x2b, 0x28, 0xca, 0x2f, 0xc9, 0x17, 0x92, 0xca, 0xcb, 0x4c,
	0xce, 0xc8, 0xcf, 0x49, 0x2c, 0x4e, 0xc9, 0x2f, 0x29, 0xce, 0xcf, 0xd1, 0x4b, 0x29, 0x4d, 0xcc,
	0xc9, 0x2c, 0xa9, 0xd4, 0x4b, 0x49, 0xad, 0x90, 0xe2, 0x03, 0x29, 0x2e, 0xc8, 0xcf, 0xcf, 0x81,
	0xa8, 0x55, 0x3a, 0xcd, 0xc8, 0xc5, 0x1a, 0x02, 0xd2, 0x2b, 0x24, 0xc6, 0xc5, 0x56, 0x92, 0x9f,
	0x9d, 0x9a, 0x67, 0x20, 0xc1, 0xa8, 0xc0, 0xa8, 0xc1, 0x19, 0x04, 0xe5, 0xc1, 0xc5, 0x0d, 0x25,
	0x98, 0x90, 0xc4, 0x0d, 0x85, 0x3c, 0xb8, 0xf8, 0x40, 0xe6, 0x14, 0x47, 0xa5, 0x16, 0xe5, 0x87,
	0xe4, 0xfb, 0xe7, 0xa5, 0x4a, 0x30, 0x2b, 0x30, 0x6a, 0x70, 0x1b, 0x29, 0xe8, 0xe1, 0xb6, 0x5e,
	0x2f, 0x20, 0x3f, 0x3f, 0x27, 0x08, 0x4d, 0x1f, 0xdc, 0x24, 0xff, 0xbc, 0xd4, 0x90, 0x7c, 0x90,
	0xb0, 0x04, 0x0b, 0x49, 0x26, 0xc1, 0xf5, 0x39, 0xb9, 0x9f, 0x78, 0x24, 0xc7, 0x78, 0xe1, 0x91,
	0x1c, 0xe3, 0x83, 0x47, 0x72, 0x8c, 0x13, 0x1e, 0xcb, 0x31, 0x5c, 0x78, 0x2c, 0xc7, 0x70, 0xe3,
	0xb1, 0x1c, 0x43, 0x94, 0x6e, 0x7a, 0x66, 0x49, 0x46, 0x69, 0x92, 0x5e, 0x72, 0x7e, 0xae, 0xbe,
	0x1f, 0xd4, 0x54, 0x97, 0xfc, 0x92, 0xe0, 0xfc, 0x1c, 0x7d, 0xa8, 0xa9, 0xfa, 0x15, 0xfa, 0xe0,
	0x80, 0xac, 0x2c, 0x48, 0x2d, 0x4e, 0x62, 0x03, 0x87, 0x8e, 0x31, 0x20, 0x00, 0x00, 0xff, 0xff,
	0x42, 0xce, 0xaa, 0xf4, 0x5c, 0x01, 0x00, 0x00,
}

func (m *Ticks) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *Ticks) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *Ticks) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.PoolsOneToZero != nil {
		{
			size, err := m.PoolsOneToZero.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintTicks(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x22
	}
	if m.PoolsZeroToOne != nil {
		{
			size, err := m.PoolsZeroToOne.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintTicks(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x1a
	}
	if len(m.Token1) > 0 {
		i -= len(m.Token1)
		copy(dAtA[i:], m.Token1)
		i = encodeVarintTicks(dAtA, i, uint64(len(m.Token1)))
		i--
		dAtA[i] = 0x12
	}
	if len(m.Token0) > 0 {
		i -= len(m.Token0)
		copy(dAtA[i:], m.Token0)
		i = encodeVarintTicks(dAtA, i, uint64(len(m.Token0)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func encodeVarintTicks(dAtA []byte, offset int, v uint64) int {
	offset -= sovTicks(v)
	base := offset
	for v >= 1<<7 {
		dAtA[offset] = uint8(v&0x7f | 0x80)
		v >>= 7
		offset++
	}
	dAtA[offset] = uint8(v)
	return base
}
func (m *Ticks) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.Token0)
	if l > 0 {
		n += 1 + l + sovTicks(uint64(l))
	}
	l = len(m.Token1)
	if l > 0 {
		n += 1 + l + sovTicks(uint64(l))
	}
	if m.PoolsZeroToOne != nil {
		l = m.PoolsZeroToOne.Size()
		n += 1 + l + sovTicks(uint64(l))
	}
	if m.PoolsOneToZero != nil {
		l = m.PoolsOneToZero.Size()
		n += 1 + l + sovTicks(uint64(l))
	}
	return n
}

func sovTicks(x uint64) (n int) {
	return (math_bits.Len64(x|1) + 6) / 7
}
func sozTicks(x uint64) (n int) {
	return sovTicks(uint64((x << 1) ^ uint64((int64(x) >> 63))))
}
func (m *Ticks) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowTicks
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: Ticks: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: Ticks: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Token0", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTicks
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTicks
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTicks
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Token0 = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Token1", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTicks
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTicks
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTicks
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Token1 = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field PoolsZeroToOne", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTicks
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthTicks
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthTicks
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.PoolsZeroToOne == nil {
				m.PoolsZeroToOne = &Pool{}
			}
			if err := m.PoolsZeroToOne.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field PoolsOneToZero", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTicks
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthTicks
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthTicks
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.PoolsOneToZero == nil {
				m.PoolsOneToZero = &Pool{}
			}
			if err := m.PoolsOneToZero.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipTicks(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthTicks
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func skipTicks(dAtA []byte) (n int, err error) {
	l := len(dAtA)
	iNdEx := 0
	depth := 0
	for iNdEx < l {
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return 0, ErrIntOverflowTicks
			}
			if iNdEx >= l {
				return 0, io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		wireType := int(wire & 0x7)
		switch wireType {
		case 0:
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowTicks
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				iNdEx++
				if dAtA[iNdEx-1] < 0x80 {
					break
				}
			}
		case 1:
			iNdEx += 8
		case 2:
			var length int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowTicks
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				length |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if length < 0 {
				return 0, ErrInvalidLengthTicks
			}
			iNdEx += length
		case 3:
			depth++
		case 4:
			if depth == 0 {
				return 0, ErrUnexpectedEndOfGroupTicks
			}
			depth--
		case 5:
			iNdEx += 4
		default:
			return 0, fmt.Errorf("proto: illegal wireType %d", wireType)
		}
		if iNdEx < 0 {
			return 0, ErrInvalidLengthTicks
		}
		if depth == 0 {
			return iNdEx, nil
		}
	}
	return 0, io.ErrUnexpectedEOF
}

var (
	ErrInvalidLengthTicks        = fmt.Errorf("proto: negative length found during unmarshaling")
	ErrIntOverflowTicks          = fmt.Errorf("proto: integer overflow")
	ErrUnexpectedEndOfGroupTicks = fmt.Errorf("proto: unexpected end of group")
)
