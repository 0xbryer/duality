// Code generated by protoc-gen-gogo. DO NOT EDIT.
// source: dex/limit_order_book.proto

package types

import (
	fmt "fmt"
	proto "github.com/gogo/protobuf/proto"
	io "io"
	math "math"
	math_bits "math/bits"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.GoGoProtoPackageIsVersion3 // please upgrade the proto package

type LimitOrderBook struct {
	FillTrancheIndex  uint64               `protobuf:"varint,1,opt,name=fillTrancheIndex,proto3" json:"fillTrancheIndex,omitempty"`
	PlaceTrancheIndex uint64               `protobuf:"varint,2,opt,name=placeTrancheIndex,proto3" json:"placeTrancheIndex,omitempty"`
	Tranches          []*LimitOrderTranche `protobuf:"bytes,3,rep,name=tranches,proto3" json:"tranches,omitempty"`
}

func (m *LimitOrderBook) Reset()         { *m = LimitOrderBook{} }
func (m *LimitOrderBook) String() string { return proto.CompactTextString(m) }
func (*LimitOrderBook) ProtoMessage()    {}
func (*LimitOrderBook) Descriptor() ([]byte, []int) {
	return fileDescriptor_8a7f08d1b5d88eea, []int{0}
}
func (m *LimitOrderBook) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *LimitOrderBook) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_LimitOrderBook.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *LimitOrderBook) XXX_Merge(src proto.Message) {
	xxx_messageInfo_LimitOrderBook.Merge(m, src)
}
func (m *LimitOrderBook) XXX_Size() int {
	return m.Size()
}
func (m *LimitOrderBook) XXX_DiscardUnknown() {
	xxx_messageInfo_LimitOrderBook.DiscardUnknown(m)
}

var xxx_messageInfo_LimitOrderBook proto.InternalMessageInfo

func (m *LimitOrderBook) GetFillTrancheIndex() uint64 {
	if m != nil {
		return m.FillTrancheIndex
	}
	return 0
}

func (m *LimitOrderBook) GetPlaceTrancheIndex() uint64 {
	if m != nil {
		return m.PlaceTrancheIndex
	}
	return 0
}

func (m *LimitOrderBook) GetTranches() []*LimitOrderTranche {
	if m != nil {
		return m.Tranches
	}
	return nil
}

func init() {
	proto.RegisterType((*LimitOrderBook)(nil), "nicholasdotsol.duality.dex.LimitOrderBook")
}

func init() { proto.RegisterFile("dex/limit_order_book.proto", fileDescriptor_8a7f08d1b5d88eea) }

var fileDescriptor_8a7f08d1b5d88eea = []byte{
	// 245 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0xe2, 0x92, 0x4a, 0x49, 0xad, 0xd0,
	0xcf, 0xc9, 0xcc, 0xcd, 0x2c, 0x89, 0xcf, 0x2f, 0x4a, 0x49, 0x2d, 0x8a, 0x4f, 0xca, 0xcf, 0xcf,
	0xd6, 0x2b, 0x28, 0xca, 0x2f, 0xc9, 0x17, 0x92, 0xca, 0xcb, 0x4c, 0xce, 0xc8, 0xcf, 0x49, 0x2c,
	0x4e, 0xc9, 0x2f, 0x29, 0xce, 0xcf, 0xd1, 0x4b, 0x29, 0x4d, 0xcc, 0xc9, 0x2c, 0xa9, 0xd4, 0x4b,
	0x49, 0xad, 0x90, 0x92, 0x45, 0xd7, 0x57, 0x52, 0x94, 0x98, 0x97, 0x9c, 0x91, 0x0a, 0xd1, 0xaa,
	0xb4, 0x95, 0x91, 0x8b, 0xcf, 0x07, 0x24, 0xeb, 0x0f, 0x92, 0x74, 0xca, 0xcf, 0xcf, 0x16, 0xd2,
	0xe2, 0x12, 0x48, 0xcb, 0xcc, 0xc9, 0x09, 0x81, 0xa8, 0xf3, 0xcc, 0x4b, 0x49, 0xad, 0x90, 0x60,
	0x54, 0x60, 0xd4, 0x60, 0x09, 0xc2, 0x10, 0x17, 0xd2, 0xe1, 0x12, 0x2c, 0xc8, 0x49, 0x4c, 0x4e,
	0x45, 0x51, 0xcc, 0x04, 0x56, 0x8c, 0x29, 0x21, 0xe4, 0xc9, 0xc5, 0x01, 0xb5, 0xbd, 0x58, 0x82,
	0x59, 0x81, 0x59, 0x83, 0xdb, 0x48, 0x57, 0x0f, 0xb7, 0xd3, 0xf5, 0x10, 0xee, 0x82, 0x9a, 0x12,
	0x04, 0xd7, 0xee, 0xe4, 0x7e, 0xe2, 0x91, 0x1c, 0xe3, 0x85, 0x47, 0x72, 0x8c, 0x0f, 0x1e, 0xc9,
	0x31, 0x4e, 0x78, 0x2c, 0xc7, 0x70, 0xe1, 0xb1, 0x1c, 0xc3, 0x8d, 0xc7, 0x72, 0x0c, 0x51, 0xba,
	0xe9, 0x99, 0x25, 0x19, 0xa5, 0x49, 0x7a, 0xc9, 0xf9, 0xb9, 0xfa, 0x7e, 0x50, 0xc3, 0x5d, 0xf2,
	0x4b, 0x82, 0xf3, 0x73, 0xf4, 0xa1, 0x86, 0xeb, 0x57, 0xe8, 0x83, 0x02, 0xa5, 0xa4, 0xb2, 0x20,
	0xb5, 0x38, 0x89, 0x0d, 0x1c, 0x0e, 0xc6, 0x80, 0x00, 0x00, 0x00, 0xff, 0xff, 0x36, 0x6e, 0xb2,
	0x42, 0x60, 0x01, 0x00, 0x00,
}

func (m *LimitOrderBook) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *LimitOrderBook) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *LimitOrderBook) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.Tranches) > 0 {
		for iNdEx := len(m.Tranches) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.Tranches[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintLimitOrderBook(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0x1a
		}
	}
	if m.PlaceTrancheIndex != 0 {
		i = encodeVarintLimitOrderBook(dAtA, i, uint64(m.PlaceTrancheIndex))
		i--
		dAtA[i] = 0x10
	}
	if m.FillTrancheIndex != 0 {
		i = encodeVarintLimitOrderBook(dAtA, i, uint64(m.FillTrancheIndex))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func encodeVarintLimitOrderBook(dAtA []byte, offset int, v uint64) int {
	offset -= sovLimitOrderBook(v)
	base := offset
	for v >= 1<<7 {
		dAtA[offset] = uint8(v&0x7f | 0x80)
		v >>= 7
		offset++
	}
	dAtA[offset] = uint8(v)
	return base
}
func (m *LimitOrderBook) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.FillTrancheIndex != 0 {
		n += 1 + sovLimitOrderBook(uint64(m.FillTrancheIndex))
	}
	if m.PlaceTrancheIndex != 0 {
		n += 1 + sovLimitOrderBook(uint64(m.PlaceTrancheIndex))
	}
	if len(m.Tranches) > 0 {
		for _, e := range m.Tranches {
			l = e.Size()
			n += 1 + l + sovLimitOrderBook(uint64(l))
		}
	}
	return n
}

func sovLimitOrderBook(x uint64) (n int) {
	return (math_bits.Len64(x|1) + 6) / 7
}
func sozLimitOrderBook(x uint64) (n int) {
	return sovLimitOrderBook(uint64((x << 1) ^ uint64((int64(x) >> 63))))
}
func (m *LimitOrderBook) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowLimitOrderBook
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: LimitOrderBook: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: LimitOrderBook: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field FillTrancheIndex", wireType)
			}
			m.FillTrancheIndex = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowLimitOrderBook
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.FillTrancheIndex |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field PlaceTrancheIndex", wireType)
			}
			m.PlaceTrancheIndex = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowLimitOrderBook
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.PlaceTrancheIndex |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Tranches", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowLimitOrderBook
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthLimitOrderBook
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthLimitOrderBook
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Tranches = append(m.Tranches, &LimitOrderTranche{})
			if err := m.Tranches[len(m.Tranches)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipLimitOrderBook(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthLimitOrderBook
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func skipLimitOrderBook(dAtA []byte) (n int, err error) {
	l := len(dAtA)
	iNdEx := 0
	depth := 0
	for iNdEx < l {
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return 0, ErrIntOverflowLimitOrderBook
			}
			if iNdEx >= l {
				return 0, io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		wireType := int(wire & 0x7)
		switch wireType {
		case 0:
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowLimitOrderBook
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				iNdEx++
				if dAtA[iNdEx-1] < 0x80 {
					break
				}
			}
		case 1:
			iNdEx += 8
		case 2:
			var length int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowLimitOrderBook
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				length |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if length < 0 {
				return 0, ErrInvalidLengthLimitOrderBook
			}
			iNdEx += length
		case 3:
			depth++
		case 4:
			if depth == 0 {
				return 0, ErrUnexpectedEndOfGroupLimitOrderBook
			}
			depth--
		case 5:
			iNdEx += 4
		default:
			return 0, fmt.Errorf("proto: illegal wireType %d", wireType)
		}
		if iNdEx < 0 {
			return 0, ErrInvalidLengthLimitOrderBook
		}
		if depth == 0 {
			return iNdEx, nil
		}
	}
	return 0, io.ErrUnexpectedEOF
}

var (
	ErrInvalidLengthLimitOrderBook        = fmt.Errorf("proto: negative length found during unmarshaling")
	ErrIntOverflowLimitOrderBook          = fmt.Errorf("proto: integer overflow")
	ErrUnexpectedEndOfGroupLimitOrderBook = fmt.Errorf("proto: unexpected end of group")
)
