// Code generated by protoc-gen-gogo. DO NOT EDIT.
// source: duality/dex/limit_order_tranche.proto

package types

import (
	fmt "fmt"
	github_com_cosmos_cosmos_sdk_types "github.com/cosmos/cosmos-sdk/types"
	_ "github.com/gogo/protobuf/gogoproto"
	proto "github.com/gogo/protobuf/proto"
	github_com_gogo_protobuf_types "github.com/gogo/protobuf/types"
	_ "google.golang.org/protobuf/types/known/timestamppb"
	io "io"
	math "math"
	math_bits "math/bits"
	time "time"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf
var _ = time.Kitchen

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.GoGoProtoPackageIsVersion3 // please upgrade the proto package

type LimitOrderTranche struct {
	TradePairID        *TradePairID                           `protobuf:"bytes,1,opt,name=tradePairID,proto3" json:"tradePairID,omitempty"`
	TickIndex          int64                                  `protobuf:"varint,2,opt,name=tickIndex,proto3" json:"tickIndex,omitempty"`
	TrancheKey         string                                 `protobuf:"bytes,3,opt,name=trancheKey,proto3" json:"trancheKey,omitempty"`
	ReservesMakerDenom github_com_cosmos_cosmos_sdk_types.Int `protobuf:"bytes,4,opt,name=reservesMakerDenom,proto3,customtype=github.com/cosmos/cosmos-sdk/types.Int" json:"reservesMakerDenom" yaml:"reservesMakerDenom"`
	ReservesTakerDenom github_com_cosmos_cosmos_sdk_types.Int `protobuf:"bytes,5,opt,name=reservesTakerDenom,proto3,customtype=github.com/cosmos/cosmos-sdk/types.Int" json:"reservesTakerDenom" yaml:"reservesTakerDenom"`
	TotalMakerDenom    github_com_cosmos_cosmos_sdk_types.Int `protobuf:"bytes,6,opt,name=totalMakerDenom,proto3,customtype=github.com/cosmos/cosmos-sdk/types.Int" json:"totalTokenIn" yaml:"totalMakerDenom"`
	TotalTakerDenom    github_com_cosmos_cosmos_sdk_types.Int `protobuf:"bytes,7,opt,name=totalTakerDenom,proto3,customtype=github.com/cosmos/cosmos-sdk/types.Int" json:"totalTakerDenom" yaml:"totalTakerDenom"`
	// JIT orders also use goodTilDate to handle deletion but represent a special case
	// All JIT orders have a goodTilDate of 0 and an exception is made to still still treat these orders as live
	// Order deletion still functions the same and the orders will be deleted at the end of the block
	ExpirationTime    *time.Time                             `protobuf:"bytes,8,opt,name=expirationTime,proto3,stdtime" json:"expirationTime,omitempty"`
	PriceTakerToMaker github_com_cosmos_cosmos_sdk_types.Dec `protobuf:"bytes,9,opt,name=priceTakerToMaker,proto3,customtype=github.com/cosmos/cosmos-sdk/types.Dec" json:"priceTakerToMaker" yaml:"priceTakerToMaker"`
	PriceMakerToTaker github_com_cosmos_cosmos_sdk_types.Dec `protobuf:"bytes,10,opt,name=priceMakerToTaker,proto3,customtype=github.com/cosmos/cosmos-sdk/types.Dec" json:"priceMakerToTaker" yaml:"priceMakerToTaker"`
}

func (m *LimitOrderTranche) Reset()         { *m = LimitOrderTranche{} }
func (m *LimitOrderTranche) String() string { return proto.CompactTextString(m) }
func (*LimitOrderTranche) ProtoMessage()    {}
func (*LimitOrderTranche) Descriptor() ([]byte, []int) {
	return fileDescriptor_49e73267811ad014, []int{0}
}
func (m *LimitOrderTranche) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *LimitOrderTranche) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_LimitOrderTranche.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *LimitOrderTranche) XXX_Merge(src proto.Message) {
	xxx_messageInfo_LimitOrderTranche.Merge(m, src)
}
func (m *LimitOrderTranche) XXX_Size() int {
	return m.Size()
}
func (m *LimitOrderTranche) XXX_DiscardUnknown() {
	xxx_messageInfo_LimitOrderTranche.DiscardUnknown(m)
}

var xxx_messageInfo_LimitOrderTranche proto.InternalMessageInfo

func (m *LimitOrderTranche) GetTradePairID() *TradePairID {
	if m != nil {
		return m.TradePairID
	}
	return nil
}

func (m *LimitOrderTranche) GetTickIndex() int64 {
	if m != nil {
		return m.TickIndex
	}
	return 0
}

func (m *LimitOrderTranche) GetTrancheKey() string {
	if m != nil {
		return m.TrancheKey
	}
	return ""
}

func (m *LimitOrderTranche) GetExpirationTime() *time.Time {
	if m != nil {
		return m.ExpirationTime
	}
	return nil
}

func init() {
	proto.RegisterType((*LimitOrderTranche)(nil), "dualitylabs.duality.dex.LimitOrderTranche")
}

func init() {
	proto.RegisterFile("duality/dex/limit_order_tranche.proto", fileDescriptor_49e73267811ad014)
}

var fileDescriptor_49e73267811ad014 = []byte{
	// 545 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0xa4, 0x94, 0x41, 0x8b, 0xd3, 0x40,
	0x14, 0xc7, 0x3b, 0xae, 0xae, 0xed, 0xac, 0x28, 0x1b, 0x44, 0xb3, 0x45, 0x32, 0xa5, 0xa8, 0x14,
	0x64, 0x13, 0xd0, 0x9b, 0xc7, 0x52, 0x85, 0xe2, 0x2e, 0x4a, 0x98, 0x83, 0xe8, 0xa1, 0x4c, 0x93,
	0xb1, 0x3b, 0x34, 0xc9, 0x84, 0xc9, 0x54, 0xda, 0xab, 0xe0, 0x51, 0x58, 0xbf, 0x8f, 0x1f, 0xa0,
	0xc7, 0x3d, 0x8a, 0x87, 0x28, 0xed, 0x6d, 0x8f, 0xfd, 0x04, 0x92, 0x49, 0x4a, 0x67, 0x93, 0x2a,
	0x94, 0x3d, 0x65, 0xf2, 0xde, 0xfb, 0xff, 0xe7, 0xf7, 0x5e, 0x32, 0x03, 0x9f, 0xf8, 0x13, 0x12,
	0x30, 0x39, 0x73, 0x7c, 0x3a, 0x75, 0x02, 0x16, 0x32, 0x39, 0xe0, 0xc2, 0xa7, 0x62, 0x20, 0x05,
	0x89, 0xbc, 0x33, 0x6a, 0xc7, 0x82, 0x4b, 0x6e, 0x3c, 0x2c, 0xca, 0x02, 0x32, 0x4c, 0xec, 0x62,
	0x6d, 0xfb, 0x74, 0xda, 0x44, 0x23, 0xce, 0x47, 0x01, 0x75, 0x54, 0xd9, 0x70, 0xf2, 0xc9, 0x91,
	0x2c, 0xa4, 0x89, 0x24, 0x61, 0x9c, 0x2b, 0x9b, 0x48, 0xdf, 0x40, 0x0a, 0xe2, 0xd3, 0x41, 0x4c,
	0x98, 0x18, 0x30, 0xbf, 0x28, 0xb8, 0x3f, 0xe2, 0x23, 0xae, 0x96, 0x4e, 0xb6, 0x2a, 0xa2, 0x47,
	0xba, 0xec, 0x8a, 0xa0, 0xfd, 0xa3, 0x0e, 0x0f, 0x4f, 0x32, 0xd2, 0xb7, 0x19, 0x28, 0xce, 0x39,
	0x8d, 0xd7, 0xf0, 0x40, 0xb9, 0xbf, 0x23, 0x4c, 0xf4, 0x7b, 0x26, 0x68, 0x81, 0xce, 0xc1, 0xf3,
	0xc7, 0xf6, 0x3f, 0xb8, 0x6d, 0xbc, 0xa9, 0x75, 0x75, 0xa1, 0xf1, 0x08, 0x36, 0x24, 0xf3, 0xc6,
	0xfd, 0xc8, 0xa7, 0x53, 0xf3, 0x46, 0x0b, 0x74, 0xf6, 0xdc, 0x4d, 0xc0, 0xb0, 0x20, 0x2c, 0x06,
	0xf3, 0x86, 0xce, 0xcc, 0xbd, 0x16, 0xe8, 0x34, 0x5c, 0x2d, 0x62, 0x7c, 0x07, 0xd0, 0x10, 0x34,
	0xa1, 0xe2, 0x33, 0x4d, 0x4e, 0xc9, 0x98, 0x8a, 0x1e, 0x8d, 0x78, 0x68, 0xde, 0xcc, 0x0a, 0xbb,
	0x64, 0x9e, 0xa2, 0xda, 0xaf, 0x14, 0x3d, 0x1d, 0x31, 0x79, 0x36, 0x19, 0xda, 0x1e, 0x0f, 0x1d,
	0x8f, 0x27, 0x21, 0x4f, 0x8a, 0xc7, 0x71, 0xe2, 0x8f, 0x1d, 0x39, 0x8b, 0x69, 0x62, 0xf7, 0x23,
	0x79, 0x99, 0xa2, 0x2d, 0x5e, 0xab, 0x14, 0x1d, 0xcd, 0x48, 0x18, 0xbc, 0x6c, 0x57, 0x73, 0x6d,
	0x77, 0x8b, 0xe0, 0x0a, 0x13, 0xde, 0x30, 0xdd, 0xba, 0x2e, 0x13, 0xfe, 0x0f, 0x13, 0xde, 0xc6,
	0xb4, 0x09, 0x1a, 0x5f, 0x00, 0xbc, 0x27, 0xb9, 0x24, 0x81, 0x36, 0xa4, 0x7d, 0x05, 0xf4, 0x7e,
	0x67, 0xa0, 0x3b, 0xca, 0x08, 0xf3, 0x31, 0x8d, 0xfa, 0xd1, 0x2a, 0x45, 0x0f, 0x72, 0x94, 0x92,
	0x7d, 0xdb, 0x2d, 0x6f, 0x68, 0x7c, 0x5d, 0x43, 0x68, 0x53, 0xb9, 0xad, 0x20, 0x3e, 0xee, 0x0c,
	0x51, 0x36, 0x2a, 0x71, 0xe0, 0x0a, 0x87, 0x36, 0x8c, 0x13, 0x78, 0x97, 0x4e, 0x63, 0x26, 0x88,
	0x64, 0x3c, 0xc2, 0x2c, 0xa4, 0x66, 0x5d, 0xfd, 0xbd, 0x4d, 0x3b, 0x3f, 0x5c, 0xf6, 0xfa, 0x70,
	0xd9, 0x78, 0x7d, 0xb8, 0xba, 0xf5, 0x79, 0x8a, 0xc0, 0xf9, 0x6f, 0x04, 0xdc, 0x92, 0xd6, 0xf8,
	0x06, 0xe0, 0x61, 0x2c, 0x98, 0x47, 0xd5, 0x0e, 0x98, 0xab, 0x86, 0xcd, 0x86, 0xea, 0x6b, 0xb0,
	0x43, 0x5f, 0x3d, 0xea, 0x5d, 0xa6, 0xa8, 0x6a, 0xb5, 0x4a, 0x91, 0x99, 0x77, 0x56, 0x49, 0xb5,
	0xdd, 0x6a, 0xf9, 0x86, 0xe7, 0x34, 0x8f, 0xaa, 0xa4, 0x09, 0xaf, 0xc5, 0xa3, 0x5b, 0x95, 0x78,
	0xf4, 0xd4, 0x9a, 0x47, 0x8f, 0x75, 0x5f, 0xcd, 0x17, 0x16, 0xb8, 0x58, 0x58, 0xe0, 0xcf, 0xc2,
	0x02, 0xe7, 0x4b, 0xab, 0x76, 0xb1, 0xb4, 0x6a, 0x3f, 0x97, 0x56, 0xed, 0xc3, 0x33, 0x8d, 0xa2,
	0xb8, 0x2b, 0x8e, 0xb3, 0x8b, 0x63, 0xfd, 0xe2, 0x4c, 0xf3, 0x4b, 0x2c, 0xc3, 0x19, 0xee, 0xab,
	0x8f, 0xf2, 0xe2, 0x6f, 0x00, 0x00, 0x00, 0xff, 0xff, 0x07, 0xa2, 0x12, 0x6b, 0x41, 0x05, 0x00,
	0x00,
}

func (m *LimitOrderTranche) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *LimitOrderTranche) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *LimitOrderTranche) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	{
		size := m.PriceMakerToTaker.Size()
		i -= size
		if _, err := m.PriceMakerToTaker.MarshalTo(dAtA[i:]); err != nil {
			return 0, err
		}
		i = encodeVarintLimitOrderTranche(dAtA, i, uint64(size))
	}
	i--
	dAtA[i] = 0x52
	{
		size := m.PriceTakerToMaker.Size()
		i -= size
		if _, err := m.PriceTakerToMaker.MarshalTo(dAtA[i:]); err != nil {
			return 0, err
		}
		i = encodeVarintLimitOrderTranche(dAtA, i, uint64(size))
	}
	i--
	dAtA[i] = 0x4a
	if m.ExpirationTime != nil {
		n1, err1 := github_com_gogo_protobuf_types.StdTimeMarshalTo(*m.ExpirationTime, dAtA[i-github_com_gogo_protobuf_types.SizeOfStdTime(*m.ExpirationTime):])
		if err1 != nil {
			return 0, err1
		}
		i -= n1
		i = encodeVarintLimitOrderTranche(dAtA, i, uint64(n1))
		i--
		dAtA[i] = 0x42
	}
	{
		size := m.TotalTakerDenom.Size()
		i -= size
		if _, err := m.TotalTakerDenom.MarshalTo(dAtA[i:]); err != nil {
			return 0, err
		}
		i = encodeVarintLimitOrderTranche(dAtA, i, uint64(size))
	}
	i--
	dAtA[i] = 0x3a
	{
		size := m.TotalMakerDenom.Size()
		i -= size
		if _, err := m.TotalMakerDenom.MarshalTo(dAtA[i:]); err != nil {
			return 0, err
		}
		i = encodeVarintLimitOrderTranche(dAtA, i, uint64(size))
	}
	i--
	dAtA[i] = 0x32
	{
		size := m.ReservesTakerDenom.Size()
		i -= size
		if _, err := m.ReservesTakerDenom.MarshalTo(dAtA[i:]); err != nil {
			return 0, err
		}
		i = encodeVarintLimitOrderTranche(dAtA, i, uint64(size))
	}
	i--
	dAtA[i] = 0x2a
	{
		size := m.ReservesMakerDenom.Size()
		i -= size
		if _, err := m.ReservesMakerDenom.MarshalTo(dAtA[i:]); err != nil {
			return 0, err
		}
		i = encodeVarintLimitOrderTranche(dAtA, i, uint64(size))
	}
	i--
	dAtA[i] = 0x22
	if len(m.TrancheKey) > 0 {
		i -= len(m.TrancheKey)
		copy(dAtA[i:], m.TrancheKey)
		i = encodeVarintLimitOrderTranche(dAtA, i, uint64(len(m.TrancheKey)))
		i--
		dAtA[i] = 0x1a
	}
	if m.TickIndex != 0 {
		i = encodeVarintLimitOrderTranche(dAtA, i, uint64(m.TickIndex))
		i--
		dAtA[i] = 0x10
	}
	if m.TradePairID != nil {
		{
			size, err := m.TradePairID.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintLimitOrderTranche(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func encodeVarintLimitOrderTranche(dAtA []byte, offset int, v uint64) int {
	offset -= sovLimitOrderTranche(v)
	base := offset
	for v >= 1<<7 {
		dAtA[offset] = uint8(v&0x7f | 0x80)
		v >>= 7
		offset++
	}
	dAtA[offset] = uint8(v)
	return base
}
func (m *LimitOrderTranche) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.TradePairID != nil {
		l = m.TradePairID.Size()
		n += 1 + l + sovLimitOrderTranche(uint64(l))
	}
	if m.TickIndex != 0 {
		n += 1 + sovLimitOrderTranche(uint64(m.TickIndex))
	}
	l = len(m.TrancheKey)
	if l > 0 {
		n += 1 + l + sovLimitOrderTranche(uint64(l))
	}
	l = m.ReservesMakerDenom.Size()
	n += 1 + l + sovLimitOrderTranche(uint64(l))
	l = m.ReservesTakerDenom.Size()
	n += 1 + l + sovLimitOrderTranche(uint64(l))
	l = m.TotalMakerDenom.Size()
	n += 1 + l + sovLimitOrderTranche(uint64(l))
	l = m.TotalTakerDenom.Size()
	n += 1 + l + sovLimitOrderTranche(uint64(l))
	if m.ExpirationTime != nil {
		l = github_com_gogo_protobuf_types.SizeOfStdTime(*m.ExpirationTime)
		n += 1 + l + sovLimitOrderTranche(uint64(l))
	}
	l = m.PriceTakerToMaker.Size()
	n += 1 + l + sovLimitOrderTranche(uint64(l))
	l = m.PriceMakerToTaker.Size()
	n += 1 + l + sovLimitOrderTranche(uint64(l))
	return n
}

func sovLimitOrderTranche(x uint64) (n int) {
	return (math_bits.Len64(x|1) + 6) / 7
}
func sozLimitOrderTranche(x uint64) (n int) {
	return sovLimitOrderTranche(uint64((x << 1) ^ uint64((int64(x) >> 63))))
}
func (m *LimitOrderTranche) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowLimitOrderTranche
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: LimitOrderTranche: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: LimitOrderTranche: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field TradePairID", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowLimitOrderTranche
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthLimitOrderTranche
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthLimitOrderTranche
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.TradePairID == nil {
				m.TradePairID = &TradePairID{}
			}
			if err := m.TradePairID.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field TickIndex", wireType)
			}
			m.TickIndex = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowLimitOrderTranche
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.TickIndex |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field TrancheKey", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowLimitOrderTranche
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthLimitOrderTranche
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthLimitOrderTranche
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.TrancheKey = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ReservesMakerDenom", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowLimitOrderTranche
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthLimitOrderTranche
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthLimitOrderTranche
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := m.ReservesMakerDenom.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 5:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ReservesTakerDenom", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowLimitOrderTranche
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthLimitOrderTranche
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthLimitOrderTranche
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := m.ReservesTakerDenom.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 6:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field TotalMakerDenom", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowLimitOrderTranche
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthLimitOrderTranche
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthLimitOrderTranche
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := m.TotalMakerDenom.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 7:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field TotalTakerDenom", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowLimitOrderTranche
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthLimitOrderTranche
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthLimitOrderTranche
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := m.TotalTakerDenom.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 8:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ExpirationTime", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowLimitOrderTranche
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthLimitOrderTranche
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthLimitOrderTranche
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.ExpirationTime == nil {
				m.ExpirationTime = new(time.Time)
			}
			if err := github_com_gogo_protobuf_types.StdTimeUnmarshal(m.ExpirationTime, dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 9:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field PriceTakerToMaker", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowLimitOrderTranche
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthLimitOrderTranche
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthLimitOrderTranche
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := m.PriceTakerToMaker.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 10:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field PriceMakerToTaker", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowLimitOrderTranche
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthLimitOrderTranche
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthLimitOrderTranche
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := m.PriceMakerToTaker.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipLimitOrderTranche(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthLimitOrderTranche
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func skipLimitOrderTranche(dAtA []byte) (n int, err error) {
	l := len(dAtA)
	iNdEx := 0
	depth := 0
	for iNdEx < l {
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return 0, ErrIntOverflowLimitOrderTranche
			}
			if iNdEx >= l {
				return 0, io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		wireType := int(wire & 0x7)
		switch wireType {
		case 0:
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowLimitOrderTranche
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				iNdEx++
				if dAtA[iNdEx-1] < 0x80 {
					break
				}
			}
		case 1:
			iNdEx += 8
		case 2:
			var length int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowLimitOrderTranche
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				length |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if length < 0 {
				return 0, ErrInvalidLengthLimitOrderTranche
			}
			iNdEx += length
		case 3:
			depth++
		case 4:
			if depth == 0 {
				return 0, ErrUnexpectedEndOfGroupLimitOrderTranche
			}
			depth--
		case 5:
			iNdEx += 4
		default:
			return 0, fmt.Errorf("proto: illegal wireType %d", wireType)
		}
		if iNdEx < 0 {
			return 0, ErrInvalidLengthLimitOrderTranche
		}
		if depth == 0 {
			return iNdEx, nil
		}
	}
	return 0, io.ErrUnexpectedEOF
}

var (
	ErrInvalidLengthLimitOrderTranche        = fmt.Errorf("proto: negative length found during unmarshaling")
	ErrIntOverflowLimitOrderTranche          = fmt.Errorf("proto: integer overflow")
	ErrUnexpectedEndOfGroupLimitOrderTranche = fmt.Errorf("proto: unexpected end of group")
)
