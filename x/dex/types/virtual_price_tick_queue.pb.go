// Code generated by protoc-gen-gogo. DO NOT EDIT.
// source: dex/virtual_price_tick_queue.proto

package types

import (
	fmt "fmt"
	github_com_cosmos_cosmos_sdk_types "github.com/cosmos/cosmos-sdk/types"
	_ "github.com/gogo/protobuf/gogoproto"
	proto "github.com/gogo/protobuf/proto"
	io "io"
	math "math"
	math_bits "math/bits"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.GoGoProtoPackageIsVersion3 // please upgrade the proto package

type VirtualPriceTickQueue struct {
	Id        uint64                                 `protobuf:"varint,1,opt,name=id,proto3" json:"id,omitempty"`
	Price     github_com_cosmos_cosmos_sdk_types.Dec `protobuf:"bytes,2,opt,name=price,proto3,customtype=github.com/cosmos/cosmos-sdk/types.Dec" json:"price" yaml:"price"`
	Fee       github_com_cosmos_cosmos_sdk_types.Dec `protobuf:"bytes,3,opt,name=fee,proto3,customtype=github.com/cosmos/cosmos-sdk/types.Dec" json:"fee" yaml:"fee"`
	OrderType string                                 `protobuf:"bytes,4,opt,name=orderType,proto3" json:"orderType,omitempty"`
}

func (m *VirtualPriceTickQueue) Reset()         { *m = VirtualPriceTickQueue{} }
func (m *VirtualPriceTickQueue) String() string { return proto.CompactTextString(m) }
func (*VirtualPriceTickQueue) ProtoMessage()    {}
func (*VirtualPriceTickQueue) Descriptor() ([]byte, []int) {
	return fileDescriptor_6a2b863c12d9ee71, []int{0}
}
func (m *VirtualPriceTickQueue) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *VirtualPriceTickQueue) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_VirtualPriceTickQueue.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *VirtualPriceTickQueue) XXX_Merge(src proto.Message) {
	xxx_messageInfo_VirtualPriceTickQueue.Merge(m, src)
}
func (m *VirtualPriceTickQueue) XXX_Size() int {
	return m.Size()
}
func (m *VirtualPriceTickQueue) XXX_DiscardUnknown() {
	xxx_messageInfo_VirtualPriceTickQueue.DiscardUnknown(m)
}

var xxx_messageInfo_VirtualPriceTickQueue proto.InternalMessageInfo

func (m *VirtualPriceTickQueue) GetId() uint64 {
	if m != nil {
		return m.Id
	}
	return 0
}

func (m *VirtualPriceTickQueue) GetOrderType() string {
	if m != nil {
		return m.OrderType
	}
	return ""
}

func init() {
	proto.RegisterType((*VirtualPriceTickQueue)(nil), "nicholasdotsol.duality.dex.VirtualPriceTickQueue")
}

func init() {
	proto.RegisterFile("dex/virtual_price_tick_queue.proto", fileDescriptor_6a2b863c12d9ee71)
}

var fileDescriptor_6a2b863c12d9ee71 = []byte{
	// 316 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0x94, 0x91, 0xb1, 0x4b, 0xc3, 0x40,
	0x14, 0xc6, 0x73, 0x6d, 0x15, 0x7a, 0x88, 0x43, 0x50, 0x08, 0x45, 0x92, 0x92, 0x41, 0xba, 0x34,
	0x37, 0xb8, 0x39, 0xd6, 0x42, 0x37, 0xd1, 0x58, 0x1d, 0x04, 0x29, 0xe9, 0xdd, 0x6b, 0x7b, 0x34,
	0xf5, 0xc5, 0xe4, 0x22, 0xcd, 0x7f, 0xe1, 0x9f, 0xd5, 0xb1, 0xa3, 0x38, 0x04, 0x69, 0x37, 0xc7,
	0xae, 0x2e, 0x72, 0x97, 0x82, 0xae, 0x4e, 0x77, 0xf7, 0x71, 0xdf, 0xef, 0x7b, 0x7c, 0x8f, 0xfa,
	0x02, 0x96, 0xec, 0x55, 0xa6, 0x2a, 0x8f, 0xe2, 0x51, 0x92, 0x4a, 0x0e, 0x23, 0x25, 0xf9, 0x7c,
	0xf4, 0x92, 0x43, 0x0e, 0x41, 0x92, 0xa2, 0x42, 0xbb, 0xf5, 0x2c, 0xf9, 0x0c, 0xe3, 0x28, 0x13,
	0xa8, 0x32, 0x8c, 0x03, 0x91, 0x47, 0xb1, 0x54, 0x45, 0x20, 0x60, 0xd9, 0x3a, 0x99, 0xe2, 0x14,
	0xcd, 0x37, 0xa6, 0x6f, 0x95, 0xc3, 0xff, 0x26, 0xf4, 0xf4, 0xa1, 0x82, 0xde, 0x68, 0xe6, 0x50,
	0xf2, 0xf9, 0xad, 0x26, 0xda, 0xc7, 0xb4, 0x26, 0x85, 0x43, 0xda, 0xa4, 0xd3, 0x08, 0x6b, 0x52,
	0xd8, 0x4f, 0xf4, 0xc0, 0xa4, 0x3a, 0xb5, 0x36, 0xe9, 0x34, 0x7b, 0x83, 0x55, 0xe9, 0x59, 0x1f,
	0xa5, 0x77, 0x3e, 0x95, 0x6a, 0x96, 0x8f, 0x03, 0x8e, 0x0b, 0xc6, 0x31, 0x5b, 0x60, 0xb6, 0x3f,
	0xba, 0x99, 0x98, 0x33, 0x55, 0x24, 0x90, 0x05, 0x7d, 0xe0, 0x5f, 0xa5, 0x57, 0xd9, 0x77, 0xa5,
	0x77, 0x54, 0x44, 0x8b, 0xf8, 0xd2, 0x37, 0x4f, 0x3f, 0xac, 0x64, 0xfb, 0x9e, 0xd6, 0x27, 0x00,
	0x4e, 0xdd, 0xc0, 0xaf, 0xfe, 0x0d, 0xd7, 0xe6, 0x5d, 0xe9, 0xd1, 0x0a, 0x3d, 0x01, 0xf0, 0x43,
	0x2d, 0xd9, 0x67, 0xb4, 0x89, 0xa9, 0x80, 0x74, 0x58, 0x24, 0xe0, 0x34, 0x34, 0x3c, 0xfc, 0x15,
	0x7a, 0x83, 0xd5, 0xc6, 0x25, 0xeb, 0x8d, 0x4b, 0x3e, 0x37, 0x2e, 0x79, 0xdb, 0xba, 0xd6, 0x7a,
	0xeb, 0x5a, 0xef, 0x5b, 0xd7, 0x7a, 0xec, 0xfe, 0x49, 0xbe, 0xde, 0x97, 0xda, 0x47, 0x75, 0x87,
	0x31, 0xdb, 0x97, 0xca, 0x96, 0x4c, 0x6f, 0xc4, 0x0c, 0x31, 0x3e, 0x34, 0x6d, 0x5e, 0xfc, 0x04,
	0x00, 0x00, 0xff, 0xff, 0xdb, 0x5c, 0xf4, 0xaf, 0xa5, 0x01, 0x00, 0x00,
}

func (m *VirtualPriceTickQueue) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *VirtualPriceTickQueue) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *VirtualPriceTickQueue) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.OrderType) > 0 {
		i -= len(m.OrderType)
		copy(dAtA[i:], m.OrderType)
		i = encodeVarintVirtualPriceTickQueue(dAtA, i, uint64(len(m.OrderType)))
		i--
		dAtA[i] = 0x22
	}
	{
		size := m.Fee.Size()
		i -= size
		if _, err := m.Fee.MarshalTo(dAtA[i:]); err != nil {
			return 0, err
		}
		i = encodeVarintVirtualPriceTickQueue(dAtA, i, uint64(size))
	}
	i--
	dAtA[i] = 0x1a
	{
		size := m.Price.Size()
		i -= size
		if _, err := m.Price.MarshalTo(dAtA[i:]); err != nil {
			return 0, err
		}
		i = encodeVarintVirtualPriceTickQueue(dAtA, i, uint64(size))
	}
	i--
	dAtA[i] = 0x12
	if m.Id != 0 {
		i = encodeVarintVirtualPriceTickQueue(dAtA, i, uint64(m.Id))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func encodeVarintVirtualPriceTickQueue(dAtA []byte, offset int, v uint64) int {
	offset -= sovVirtualPriceTickQueue(v)
	base := offset
	for v >= 1<<7 {
		dAtA[offset] = uint8(v&0x7f | 0x80)
		v >>= 7
		offset++
	}
	dAtA[offset] = uint8(v)
	return base
}
func (m *VirtualPriceTickQueue) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Id != 0 {
		n += 1 + sovVirtualPriceTickQueue(uint64(m.Id))
	}
	l = m.Price.Size()
	n += 1 + l + sovVirtualPriceTickQueue(uint64(l))
	l = m.Fee.Size()
	n += 1 + l + sovVirtualPriceTickQueue(uint64(l))
	l = len(m.OrderType)
	if l > 0 {
		n += 1 + l + sovVirtualPriceTickQueue(uint64(l))
	}
	return n
}

func sovVirtualPriceTickQueue(x uint64) (n int) {
	return (math_bits.Len64(x|1) + 6) / 7
}
func sozVirtualPriceTickQueue(x uint64) (n int) {
	return sovVirtualPriceTickQueue(uint64((x << 1) ^ uint64((int64(x) >> 63))))
}
func (m *VirtualPriceTickQueue) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowVirtualPriceTickQueue
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: VirtualPriceTickQueue: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: VirtualPriceTickQueue: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Id", wireType)
			}
			m.Id = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowVirtualPriceTickQueue
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Id |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Price", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowVirtualPriceTickQueue
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthVirtualPriceTickQueue
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthVirtualPriceTickQueue
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := m.Price.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Fee", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowVirtualPriceTickQueue
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthVirtualPriceTickQueue
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthVirtualPriceTickQueue
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := m.Fee.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field OrderType", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowVirtualPriceTickQueue
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthVirtualPriceTickQueue
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthVirtualPriceTickQueue
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.OrderType = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipVirtualPriceTickQueue(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthVirtualPriceTickQueue
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func skipVirtualPriceTickQueue(dAtA []byte) (n int, err error) {
	l := len(dAtA)
	iNdEx := 0
	depth := 0
	for iNdEx < l {
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return 0, ErrIntOverflowVirtualPriceTickQueue
			}
			if iNdEx >= l {
				return 0, io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		wireType := int(wire & 0x7)
		switch wireType {
		case 0:
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowVirtualPriceTickQueue
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				iNdEx++
				if dAtA[iNdEx-1] < 0x80 {
					break
				}
			}
		case 1:
			iNdEx += 8
		case 2:
			var length int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowVirtualPriceTickQueue
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				length |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if length < 0 {
				return 0, ErrInvalidLengthVirtualPriceTickQueue
			}
			iNdEx += length
		case 3:
			depth++
		case 4:
			if depth == 0 {
				return 0, ErrUnexpectedEndOfGroupVirtualPriceTickQueue
			}
			depth--
		case 5:
			iNdEx += 4
		default:
			return 0, fmt.Errorf("proto: illegal wireType %d", wireType)
		}
		if iNdEx < 0 {
			return 0, ErrInvalidLengthVirtualPriceTickQueue
		}
		if depth == 0 {
			return iNdEx, nil
		}
	}
	return 0, io.ErrUnexpectedEOF
}

var (
	ErrInvalidLengthVirtualPriceTickQueue        = fmt.Errorf("proto: negative length found during unmarshaling")
	ErrIntOverflowVirtualPriceTickQueue          = fmt.Errorf("proto: integer overflow")
	ErrUnexpectedEndOfGroupVirtualPriceTickQueue = fmt.Errorf("proto: unexpected end of group")
)
