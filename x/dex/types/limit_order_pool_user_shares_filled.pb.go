// Code generated by protoc-gen-gogo. DO NOT EDIT.
// source: dex/limit_order_pool_user_shares_filled.proto

package types

import (
	fmt "fmt"
	github_com_cosmos_cosmos_sdk_types "github.com/cosmos/cosmos-sdk/types"
	_ "github.com/gogo/protobuf/gogoproto"
	proto "github.com/gogo/protobuf/proto"
	io "io"
	math "math"
	math_bits "math/bits"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.GoGoProtoPackageIsVersion3 // please upgrade the proto package

type LimitOrderPoolUserSharesFilled struct {
	Count        string                                 `protobuf:"bytes,1,opt,name=count,proto3" json:"count,omitempty"`
	Address      string                                 `protobuf:"bytes,2,opt,name=address,proto3" json:"address,omitempty"`
	SharesFilled github_com_cosmos_cosmos_sdk_types.Dec `protobuf:"bytes,3,opt,name=sharesFilled,proto3,customtype=github.com/cosmos/cosmos-sdk/types.Dec" json:"sharesFilled" yaml:"sharesFilled"`
}

func (m *LimitOrderPoolUserSharesFilled) Reset()         { *m = LimitOrderPoolUserSharesFilled{} }
func (m *LimitOrderPoolUserSharesFilled) String() string { return proto.CompactTextString(m) }
func (*LimitOrderPoolUserSharesFilled) ProtoMessage()    {}
func (*LimitOrderPoolUserSharesFilled) Descriptor() ([]byte, []int) {
	return fileDescriptor_7a346c86cfa036f4, []int{0}
}
func (m *LimitOrderPoolUserSharesFilled) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *LimitOrderPoolUserSharesFilled) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_LimitOrderPoolUserSharesFilled.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *LimitOrderPoolUserSharesFilled) XXX_Merge(src proto.Message) {
	xxx_messageInfo_LimitOrderPoolUserSharesFilled.Merge(m, src)
}
func (m *LimitOrderPoolUserSharesFilled) XXX_Size() int {
	return m.Size()
}
func (m *LimitOrderPoolUserSharesFilled) XXX_DiscardUnknown() {
	xxx_messageInfo_LimitOrderPoolUserSharesFilled.DiscardUnknown(m)
}

var xxx_messageInfo_LimitOrderPoolUserSharesFilled proto.InternalMessageInfo

func (m *LimitOrderPoolUserSharesFilled) GetCount() string {
	if m != nil {
		return m.Count
	}
	return ""
}

func (m *LimitOrderPoolUserSharesFilled) GetAddress() string {
	if m != nil {
		return m.Address
	}
	return ""
}

func init() {
	proto.RegisterType((*LimitOrderPoolUserSharesFilled)(nil), "nicholasdotsol.duality.dex.LimitOrderPoolUserSharesFilled")
}

func init() {
	proto.RegisterFile("dex/limit_order_pool_user_shares_filled.proto", fileDescriptor_7a346c86cfa036f4)
}

var fileDescriptor_7a346c86cfa036f4 = []byte{
	// 300 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0x54, 0x90, 0xb1, 0x4e, 0xf3, 0x30,
	0x10, 0xc7, 0xe3, 0xef, 0x13, 0x20, 0x22, 0xa6, 0xd0, 0x21, 0xea, 0xe0, 0xa0, 0x0e, 0x88, 0xa5,
	0xf1, 0xc0, 0xc6, 0x58, 0x55, 0xb0, 0x20, 0x40, 0xad, 0xba, 0xb0, 0x44, 0x69, 0x6c, 0x5a, 0x0b,
	0xa7, 0x17, 0xf9, 0x1c, 0x29, 0x79, 0x0b, 0x1e, 0xab, 0x12, 0x4b, 0x47, 0xc4, 0x10, 0xa1, 0x64,
	0x63, 0xe4, 0x09, 0x50, 0xdc, 0x20, 0xa5, 0x93, 0x7d, 0xe7, 0xfb, 0xff, 0x7c, 0xfa, 0xb9, 0x63,
	0x2e, 0x0a, 0xa6, 0x64, 0x2a, 0x4d, 0x04, 0x9a, 0x0b, 0x1d, 0x65, 0x00, 0x2a, 0xca, 0x51, 0xe8,
	0x08, 0xd7, 0xb1, 0x16, 0x18, 0xbd, 0x48, 0xa5, 0x04, 0x0f, 0x33, 0x0d, 0x06, 0xbc, 0xe1, 0x46,
	0x26, 0x6b, 0x50, 0x31, 0x72, 0x30, 0x08, 0x2a, 0xe4, 0x79, 0xac, 0xa4, 0x29, 0x43, 0x2e, 0x8a,
	0xe1, 0x60, 0x05, 0x2b, 0xb0, 0x63, 0xac, 0xbd, 0xed, 0x13, 0xa3, 0x77, 0xe2, 0xd2, 0xfb, 0x96,
	0xff, 0xd8, 0xe2, 0x9f, 0x00, 0xd4, 0x02, 0x85, 0x9e, 0x5b, 0xf6, 0xad, 0x45, 0x7b, 0x03, 0xf7,
	0x28, 0x81, 0x7c, 0x63, 0x7c, 0x72, 0x41, 0xae, 0x4e, 0x67, 0xfb, 0xc2, 0xf3, 0xdd, 0x93, 0x98,
	0x73, 0x2d, 0x10, 0xfd, 0x7f, 0xb6, 0xff, 0x57, 0x7a, 0xa5, 0x7b, 0x86, 0xbd, 0xbc, 0xff, 0xbf,
	0x7d, 0x9e, 0x2c, 0xb6, 0x55, 0xe0, 0x7c, 0x56, 0xc1, 0xe5, 0x4a, 0x9a, 0x75, 0xbe, 0x0c, 0x13,
	0x48, 0x59, 0x02, 0x98, 0x02, 0x76, 0xc7, 0x18, 0xf9, 0x2b, 0x33, 0x65, 0x26, 0x30, 0x9c, 0x8a,
	0xe4, 0xbb, 0x0a, 0x0e, 0x28, 0x3f, 0x55, 0x70, 0x5e, 0xc6, 0xa9, 0xba, 0x19, 0xf5, 0xbb, 0xa3,
	0xd9, 0xc1, 0xd0, 0xe4, 0x6e, 0x5b, 0x53, 0xb2, 0xab, 0x29, 0xf9, 0xaa, 0x29, 0x79, 0x6b, 0xa8,
	0xb3, 0x6b, 0xa8, 0xf3, 0xd1, 0x50, 0xe7, 0x79, 0xdc, 0xfb, 0xf6, 0xa1, 0x93, 0x34, 0x05, 0x33,
	0x07, 0xc5, 0x3a, 0x49, 0xac, 0x60, 0xad, 0x6c, 0xbb, 0xc1, 0xf2, 0xd8, 0xda, 0xb9, 0xfe, 0x0d,
	0x00, 0x00, 0xff, 0xff, 0xac, 0xec, 0x3c, 0x9e, 0x80, 0x01, 0x00, 0x00,
}

func (m *LimitOrderPoolUserSharesFilled) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *LimitOrderPoolUserSharesFilled) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *LimitOrderPoolUserSharesFilled) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	{
		size := m.SharesFilled.Size()
		i -= size
		if _, err := m.SharesFilled.MarshalTo(dAtA[i:]); err != nil {
			return 0, err
		}
		i = encodeVarintLimitOrderPoolUserSharesFilled(dAtA, i, uint64(size))
	}
	i--
	dAtA[i] = 0x1a
	if len(m.Address) > 0 {
		i -= len(m.Address)
		copy(dAtA[i:], m.Address)
		i = encodeVarintLimitOrderPoolUserSharesFilled(dAtA, i, uint64(len(m.Address)))
		i--
		dAtA[i] = 0x12
	}
	if len(m.Count) > 0 {
		i -= len(m.Count)
		copy(dAtA[i:], m.Count)
		i = encodeVarintLimitOrderPoolUserSharesFilled(dAtA, i, uint64(len(m.Count)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func encodeVarintLimitOrderPoolUserSharesFilled(dAtA []byte, offset int, v uint64) int {
	offset -= sovLimitOrderPoolUserSharesFilled(v)
	base := offset
	for v >= 1<<7 {
		dAtA[offset] = uint8(v&0x7f | 0x80)
		v >>= 7
		offset++
	}
	dAtA[offset] = uint8(v)
	return base
}
func (m *LimitOrderPoolUserSharesFilled) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.Count)
	if l > 0 {
		n += 1 + l + sovLimitOrderPoolUserSharesFilled(uint64(l))
	}
	l = len(m.Address)
	if l > 0 {
		n += 1 + l + sovLimitOrderPoolUserSharesFilled(uint64(l))
	}
	l = m.SharesFilled.Size()
	n += 1 + l + sovLimitOrderPoolUserSharesFilled(uint64(l))
	return n
}

func sovLimitOrderPoolUserSharesFilled(x uint64) (n int) {
	return (math_bits.Len64(x|1) + 6) / 7
}
func sozLimitOrderPoolUserSharesFilled(x uint64) (n int) {
	return sovLimitOrderPoolUserSharesFilled(uint64((x << 1) ^ uint64((int64(x) >> 63))))
}
func (m *LimitOrderPoolUserSharesFilled) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowLimitOrderPoolUserSharesFilled
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: LimitOrderPoolUserSharesFilled: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: LimitOrderPoolUserSharesFilled: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Count", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowLimitOrderPoolUserSharesFilled
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthLimitOrderPoolUserSharesFilled
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthLimitOrderPoolUserSharesFilled
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Count = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Address", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowLimitOrderPoolUserSharesFilled
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthLimitOrderPoolUserSharesFilled
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthLimitOrderPoolUserSharesFilled
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Address = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field SharesFilled", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowLimitOrderPoolUserSharesFilled
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthLimitOrderPoolUserSharesFilled
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthLimitOrderPoolUserSharesFilled
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := m.SharesFilled.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipLimitOrderPoolUserSharesFilled(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthLimitOrderPoolUserSharesFilled
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func skipLimitOrderPoolUserSharesFilled(dAtA []byte) (n int, err error) {
	l := len(dAtA)
	iNdEx := 0
	depth := 0
	for iNdEx < l {
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return 0, ErrIntOverflowLimitOrderPoolUserSharesFilled
			}
			if iNdEx >= l {
				return 0, io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		wireType := int(wire & 0x7)
		switch wireType {
		case 0:
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowLimitOrderPoolUserSharesFilled
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				iNdEx++
				if dAtA[iNdEx-1] < 0x80 {
					break
				}
			}
		case 1:
			iNdEx += 8
		case 2:
			var length int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowLimitOrderPoolUserSharesFilled
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				length |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if length < 0 {
				return 0, ErrInvalidLengthLimitOrderPoolUserSharesFilled
			}
			iNdEx += length
		case 3:
			depth++
		case 4:
			if depth == 0 {
				return 0, ErrUnexpectedEndOfGroupLimitOrderPoolUserSharesFilled
			}
			depth--
		case 5:
			iNdEx += 4
		default:
			return 0, fmt.Errorf("proto: illegal wireType %d", wireType)
		}
		if iNdEx < 0 {
			return 0, ErrInvalidLengthLimitOrderPoolUserSharesFilled
		}
		if depth == 0 {
			return iNdEx, nil
		}
	}
	return 0, io.ErrUnexpectedEOF
}

var (
	ErrInvalidLengthLimitOrderPoolUserSharesFilled        = fmt.Errorf("proto: negative length found during unmarshaling")
	ErrIntOverflowLimitOrderPoolUserSharesFilled          = fmt.Errorf("proto: integer overflow")
	ErrUnexpectedEndOfGroupLimitOrderPoolUserSharesFilled = fmt.Errorf("proto: unexpected end of group")
)
