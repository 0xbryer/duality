// Code generated by protoc-gen-gogo. DO NOT EDIT.
// source: incentives/incentive_plan.proto

package types

import (
	fmt "fmt"
	types "github.com/cosmos/cosmos-sdk/types"
	_ "github.com/gogo/protobuf/gogoproto"
	proto "github.com/gogo/protobuf/proto"
	io "io"
	math "math"
	math_bits "math/bits"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.GoGoProtoPackageIsVersion3 // please upgrade the proto package

type IncentivePlan struct {
	Index       string     `protobuf:"bytes,1,opt,name=index,proto3" json:"index,omitempty"`
	StartDate   uint64     `protobuf:"varint,2,opt,name=startDate,proto3" json:"startDate,omitempty"`
	EndDate     uint64     `protobuf:"varint,3,opt,name=endDate,proto3" json:"endDate,omitempty"`
	TradingPair string     `protobuf:"bytes,4,opt,name=tradingPair,proto3" json:"tradingPair,omitempty"`
	TotalAmount types.Coin `protobuf:"bytes,5,opt,name=totalAmount,proto3" json:"totalAmount"`
	StartTick   int64      `protobuf:"varint,6,opt,name=startTick,proto3" json:"startTick,omitempty"`
	EndTick     int64      `protobuf:"varint,7,opt,name=endTick,proto3" json:"endTick,omitempty"`
	Creator     string     `protobuf:"bytes,8,opt,name=creator,proto3" json:"creator,omitempty"`
}

func (m *IncentivePlan) Reset()         { *m = IncentivePlan{} }
func (m *IncentivePlan) String() string { return proto.CompactTextString(m) }
func (*IncentivePlan) ProtoMessage()    {}
func (*IncentivePlan) Descriptor() ([]byte, []int) {
	return fileDescriptor_a91ff57ce8866256, []int{0}
}
func (m *IncentivePlan) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *IncentivePlan) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_IncentivePlan.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *IncentivePlan) XXX_Merge(src proto.Message) {
	xxx_messageInfo_IncentivePlan.Merge(m, src)
}
func (m *IncentivePlan) XXX_Size() int {
	return m.Size()
}
func (m *IncentivePlan) XXX_DiscardUnknown() {
	xxx_messageInfo_IncentivePlan.DiscardUnknown(m)
}

var xxx_messageInfo_IncentivePlan proto.InternalMessageInfo

func (m *IncentivePlan) GetIndex() string {
	if m != nil {
		return m.Index
	}
	return ""
}

func (m *IncentivePlan) GetStartDate() uint64 {
	if m != nil {
		return m.StartDate
	}
	return 0
}

func (m *IncentivePlan) GetEndDate() uint64 {
	if m != nil {
		return m.EndDate
	}
	return 0
}

func (m *IncentivePlan) GetTradingPair() string {
	if m != nil {
		return m.TradingPair
	}
	return ""
}

func (m *IncentivePlan) GetTotalAmount() types.Coin {
	if m != nil {
		return m.TotalAmount
	}
	return types.Coin{}
}

func (m *IncentivePlan) GetStartTick() int64 {
	if m != nil {
		return m.StartTick
	}
	return 0
}

func (m *IncentivePlan) GetEndTick() int64 {
	if m != nil {
		return m.EndTick
	}
	return 0
}

func (m *IncentivePlan) GetCreator() string {
	if m != nil {
		return m.Creator
	}
	return ""
}

func init() {
	proto.RegisterType((*IncentivePlan)(nil), "dualitylabs.duality.incentives.IncentivePlan")
}

func init() { proto.RegisterFile("incentives/incentive_plan.proto", fileDescriptor_a91ff57ce8866256) }

var fileDescriptor_a91ff57ce8866256 = []byte{
	// 330 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0x4c, 0x91, 0xbf, 0x6e, 0xea, 0x30,
	0x14, 0xc6, 0x63, 0xfe, 0x5e, 0x8c, 0xee, 0x12, 0x31, 0xf8, 0xa2, 0x2b, 0x13, 0x75, 0xca, 0x52,
	0x5b, 0xd0, 0x27, 0x80, 0x76, 0xa9, 0xd4, 0x01, 0x45, 0x9d, 0xba, 0x54, 0x4e, 0x62, 0xa5, 0x56,
	0x83, 0x8d, 0xe2, 0x03, 0x82, 0xb7, 0xe8, 0xd0, 0x87, 0x62, 0x64, 0xec, 0x54, 0x55, 0xf0, 0x22,
	0x55, 0x4c, 0x02, 0x6c, 0xe7, 0x3b, 0x9f, 0xcf, 0xa7, 0x9f, 0xfc, 0xe1, 0x91, 0xd2, 0x89, 0xd4,
	0xa0, 0xd6, 0xd2, 0xf2, 0xf3, 0xf8, 0xba, 0xcc, 0x85, 0x66, 0xcb, 0xc2, 0x80, 0xf1, 0x69, 0xba,
	0x12, 0xb9, 0x82, 0x6d, 0x2e, 0x62, 0xcb, 0xaa, 0x99, 0x5d, 0x8e, 0x86, 0x83, 0xcc, 0x64, 0xc6,
	0x3d, 0xe5, 0xe5, 0x74, 0xba, 0x1a, 0xd2, 0xc4, 0xd8, 0x85, 0xb1, 0x3c, 0x16, 0x56, 0xf2, 0xf5,
	0x38, 0x96, 0x20, 0xc6, 0x3c, 0x31, 0xaa, 0x4a, 0xbd, 0xf9, 0x6c, 0xe0, 0xbf, 0x8f, 0x75, 0xc8,
	0x3c, 0x17, 0xda, 0x1f, 0xe0, 0xb6, 0xd2, 0xa9, 0xdc, 0x10, 0x14, 0xa0, 0xb0, 0x17, 0x9d, 0x84,
	0xff, 0x1f, 0xf7, 0x2c, 0x88, 0x02, 0x1e, 0x04, 0x48, 0xd2, 0x08, 0x50, 0xd8, 0x8a, 0x2e, 0x0b,
	0x9f, 0xe0, 0xae, 0xd4, 0xa9, 0xf3, 0x9a, 0xce, 0xab, 0xa5, 0x1f, 0xe0, 0x3e, 0x14, 0x22, 0x55,
	0x3a, 0x9b, 0x0b, 0x55, 0x90, 0x96, 0xcb, 0xbc, 0x5e, 0xf9, 0x53, 0xdc, 0x07, 0x03, 0x22, 0x9f,
	0x2e, 0xcc, 0x4a, 0x03, 0x69, 0x07, 0x28, 0xec, 0x4f, 0xfe, 0xb1, 0x13, 0x37, 0x2b, 0xb9, 0x59,
	0xc5, 0xcd, 0xee, 0x8d, 0xd2, 0xb3, 0xd6, 0xee, 0x7b, 0xe4, 0x45, 0xd7, 0x37, 0x67, 0xb8, 0x67,
	0x95, 0xbc, 0x93, 0x4e, 0x80, 0xc2, 0x66, 0x74, 0x59, 0x54, 0x70, 0xce, 0xeb, 0x3a, 0xaf, 0x96,
	0xa5, 0x93, 0x14, 0x52, 0x80, 0x29, 0xc8, 0x1f, 0x07, 0x56, 0xcb, 0xd9, 0xd3, 0xee, 0x40, 0xd1,
	0xfe, 0x40, 0xd1, 0xcf, 0x81, 0xa2, 0x8f, 0x23, 0xf5, 0xf6, 0x47, 0xea, 0x7d, 0x1d, 0xa9, 0xf7,
	0x32, 0xc9, 0x14, 0xbc, 0xad, 0x62, 0x96, 0x98, 0x05, 0xaf, 0x5a, 0xb8, 0x2d, 0x2b, 0xa9, 0x05,
	0xdf, 0xf0, 0xab, 0x26, 0x61, 0xbb, 0x94, 0x36, 0xee, 0xb8, 0xbf, 0xbe, 0xfb, 0x0d, 0x00, 0x00,
	0xff, 0xff, 0x3d, 0x5e, 0xe6, 0x54, 0xe4, 0x01, 0x00, 0x00,
}

func (m *IncentivePlan) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *IncentivePlan) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *IncentivePlan) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.Creator) > 0 {
		i -= len(m.Creator)
		copy(dAtA[i:], m.Creator)
		i = encodeVarintIncentivePlan(dAtA, i, uint64(len(m.Creator)))
		i--
		dAtA[i] = 0x42
	}
	if m.EndTick != 0 {
		i = encodeVarintIncentivePlan(dAtA, i, uint64(m.EndTick))
		i--
		dAtA[i] = 0x38
	}
	if m.StartTick != 0 {
		i = encodeVarintIncentivePlan(dAtA, i, uint64(m.StartTick))
		i--
		dAtA[i] = 0x30
	}
	{
		size, err := m.TotalAmount.MarshalToSizedBuffer(dAtA[:i])
		if err != nil {
			return 0, err
		}
		i -= size
		i = encodeVarintIncentivePlan(dAtA, i, uint64(size))
	}
	i--
	dAtA[i] = 0x2a
	if len(m.TradingPair) > 0 {
		i -= len(m.TradingPair)
		copy(dAtA[i:], m.TradingPair)
		i = encodeVarintIncentivePlan(dAtA, i, uint64(len(m.TradingPair)))
		i--
		dAtA[i] = 0x22
	}
	if m.EndDate != 0 {
		i = encodeVarintIncentivePlan(dAtA, i, uint64(m.EndDate))
		i--
		dAtA[i] = 0x18
	}
	if m.StartDate != 0 {
		i = encodeVarintIncentivePlan(dAtA, i, uint64(m.StartDate))
		i--
		dAtA[i] = 0x10
	}
	if len(m.Index) > 0 {
		i -= len(m.Index)
		copy(dAtA[i:], m.Index)
		i = encodeVarintIncentivePlan(dAtA, i, uint64(len(m.Index)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func encodeVarintIncentivePlan(dAtA []byte, offset int, v uint64) int {
	offset -= sovIncentivePlan(v)
	base := offset
	for v >= 1<<7 {
		dAtA[offset] = uint8(v&0x7f | 0x80)
		v >>= 7
		offset++
	}
	dAtA[offset] = uint8(v)
	return base
}
func (m *IncentivePlan) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.Index)
	if l > 0 {
		n += 1 + l + sovIncentivePlan(uint64(l))
	}
	if m.StartDate != 0 {
		n += 1 + sovIncentivePlan(uint64(m.StartDate))
	}
	if m.EndDate != 0 {
		n += 1 + sovIncentivePlan(uint64(m.EndDate))
	}
	l = len(m.TradingPair)
	if l > 0 {
		n += 1 + l + sovIncentivePlan(uint64(l))
	}
	l = m.TotalAmount.Size()
	n += 1 + l + sovIncentivePlan(uint64(l))
	if m.StartTick != 0 {
		n += 1 + sovIncentivePlan(uint64(m.StartTick))
	}
	if m.EndTick != 0 {
		n += 1 + sovIncentivePlan(uint64(m.EndTick))
	}
	l = len(m.Creator)
	if l > 0 {
		n += 1 + l + sovIncentivePlan(uint64(l))
	}
	return n
}

func sovIncentivePlan(x uint64) (n int) {
	return (math_bits.Len64(x|1) + 6) / 7
}
func sozIncentivePlan(x uint64) (n int) {
	return sovIncentivePlan(uint64((x << 1) ^ uint64((int64(x) >> 63))))
}
func (m *IncentivePlan) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowIncentivePlan
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: IncentivePlan: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: IncentivePlan: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Index", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowIncentivePlan
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthIncentivePlan
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthIncentivePlan
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Index = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field StartDate", wireType)
			}
			m.StartDate = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowIncentivePlan
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.StartDate |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 3:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field EndDate", wireType)
			}
			m.EndDate = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowIncentivePlan
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.EndDate |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field TradingPair", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowIncentivePlan
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthIncentivePlan
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthIncentivePlan
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.TradingPair = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 5:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field TotalAmount", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowIncentivePlan
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthIncentivePlan
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthIncentivePlan
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := m.TotalAmount.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 6:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field StartTick", wireType)
			}
			m.StartTick = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowIncentivePlan
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.StartTick |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 7:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field EndTick", wireType)
			}
			m.EndTick = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowIncentivePlan
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.EndTick |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 8:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Creator", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowIncentivePlan
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthIncentivePlan
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthIncentivePlan
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Creator = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipIncentivePlan(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthIncentivePlan
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func skipIncentivePlan(dAtA []byte) (n int, err error) {
	l := len(dAtA)
	iNdEx := 0
	depth := 0
	for iNdEx < l {
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return 0, ErrIntOverflowIncentivePlan
			}
			if iNdEx >= l {
				return 0, io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		wireType := int(wire & 0x7)
		switch wireType {
		case 0:
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowIncentivePlan
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				iNdEx++
				if dAtA[iNdEx-1] < 0x80 {
					break
				}
			}
		case 1:
			iNdEx += 8
		case 2:
			var length int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowIncentivePlan
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				length |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if length < 0 {
				return 0, ErrInvalidLengthIncentivePlan
			}
			iNdEx += length
		case 3:
			depth++
		case 4:
			if depth == 0 {
				return 0, ErrUnexpectedEndOfGroupIncentivePlan
			}
			depth--
		case 5:
			iNdEx += 4
		default:
			return 0, fmt.Errorf("proto: illegal wireType %d", wireType)
		}
		if iNdEx < 0 {
			return 0, ErrInvalidLengthIncentivePlan
		}
		if depth == 0 {
			return iNdEx, nil
		}
	}
	return 0, io.ErrUnexpectedEOF
}

var (
	ErrInvalidLengthIncentivePlan        = fmt.Errorf("proto: negative length found during unmarshaling")
	ErrIntOverflowIncentivePlan          = fmt.Errorf("proto: integer overflow")
	ErrUnexpectedEndOfGroupIncentivePlan = fmt.Errorf("proto: unexpected end of group")
)
