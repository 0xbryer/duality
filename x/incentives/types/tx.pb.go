// Code generated by protoc-gen-gogo. DO NOT EDIT.
// source: incentives/tx.proto

package types

import (
	context "context"
	fmt "fmt"
	types "github.com/cosmos/cosmos-sdk/types"
	_ "github.com/gogo/protobuf/gogoproto"
	grpc1 "github.com/gogo/protobuf/grpc"
	proto "github.com/gogo/protobuf/proto"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
	io "io"
	math "math"
	math_bits "math/bits"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.GoGoProtoPackageIsVersion3 // please upgrade the proto package

type MsgCreateIncentivePlan struct {
	Creator     string     `protobuf:"bytes,1,opt,name=creator,proto3" json:"creator,omitempty"`
	Index       string     `protobuf:"bytes,2,opt,name=index,proto3" json:"index,omitempty"`
	StartDate   uint64     `protobuf:"varint,3,opt,name=startDate,proto3" json:"startDate,omitempty"`
	EndDate     uint64     `protobuf:"varint,4,opt,name=endDate,proto3" json:"endDate,omitempty"`
	TradingPair string     `protobuf:"bytes,5,opt,name=tradingPair,proto3" json:"tradingPair,omitempty"`
	TotalAmount types.Coin `protobuf:"bytes,6,opt,name=totalAmount,proto3" json:"totalAmount"`
	StartTick   int64      `protobuf:"varint,7,opt,name=startTick,proto3" json:"startTick,omitempty"`
	EndTick     int64      `protobuf:"varint,8,opt,name=endTick,proto3" json:"endTick,omitempty"`
}

func (m *MsgCreateIncentivePlan) Reset()         { *m = MsgCreateIncentivePlan{} }
func (m *MsgCreateIncentivePlan) String() string { return proto.CompactTextString(m) }
func (*MsgCreateIncentivePlan) ProtoMessage()    {}
func (*MsgCreateIncentivePlan) Descriptor() ([]byte, []int) {
	return fileDescriptor_805659ab13f8660e, []int{0}
}
func (m *MsgCreateIncentivePlan) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *MsgCreateIncentivePlan) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_MsgCreateIncentivePlan.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *MsgCreateIncentivePlan) XXX_Merge(src proto.Message) {
	xxx_messageInfo_MsgCreateIncentivePlan.Merge(m, src)
}
func (m *MsgCreateIncentivePlan) XXX_Size() int {
	return m.Size()
}
func (m *MsgCreateIncentivePlan) XXX_DiscardUnknown() {
	xxx_messageInfo_MsgCreateIncentivePlan.DiscardUnknown(m)
}

var xxx_messageInfo_MsgCreateIncentivePlan proto.InternalMessageInfo

func (m *MsgCreateIncentivePlan) GetCreator() string {
	if m != nil {
		return m.Creator
	}
	return ""
}

func (m *MsgCreateIncentivePlan) GetIndex() string {
	if m != nil {
		return m.Index
	}
	return ""
}

func (m *MsgCreateIncentivePlan) GetStartDate() uint64 {
	if m != nil {
		return m.StartDate
	}
	return 0
}

func (m *MsgCreateIncentivePlan) GetEndDate() uint64 {
	if m != nil {
		return m.EndDate
	}
	return 0
}

func (m *MsgCreateIncentivePlan) GetTradingPair() string {
	if m != nil {
		return m.TradingPair
	}
	return ""
}

func (m *MsgCreateIncentivePlan) GetTotalAmount() types.Coin {
	if m != nil {
		return m.TotalAmount
	}
	return types.Coin{}
}

func (m *MsgCreateIncentivePlan) GetStartTick() int64 {
	if m != nil {
		return m.StartTick
	}
	return 0
}

func (m *MsgCreateIncentivePlan) GetEndTick() int64 {
	if m != nil {
		return m.EndTick
	}
	return 0
}

type MsgCreateIncentivePlanResponse struct {
}

func (m *MsgCreateIncentivePlanResponse) Reset()         { *m = MsgCreateIncentivePlanResponse{} }
func (m *MsgCreateIncentivePlanResponse) String() string { return proto.CompactTextString(m) }
func (*MsgCreateIncentivePlanResponse) ProtoMessage()    {}
func (*MsgCreateIncentivePlanResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_805659ab13f8660e, []int{1}
}
func (m *MsgCreateIncentivePlanResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *MsgCreateIncentivePlanResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_MsgCreateIncentivePlanResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *MsgCreateIncentivePlanResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_MsgCreateIncentivePlanResponse.Merge(m, src)
}
func (m *MsgCreateIncentivePlanResponse) XXX_Size() int {
	return m.Size()
}
func (m *MsgCreateIncentivePlanResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_MsgCreateIncentivePlanResponse.DiscardUnknown(m)
}

var xxx_messageInfo_MsgCreateIncentivePlanResponse proto.InternalMessageInfo

type MsgDeleteIncentivePlan struct {
	Creator string `protobuf:"bytes,1,opt,name=creator,proto3" json:"creator,omitempty"`
	Index   string `protobuf:"bytes,2,opt,name=index,proto3" json:"index,omitempty"`
}

func (m *MsgDeleteIncentivePlan) Reset()         { *m = MsgDeleteIncentivePlan{} }
func (m *MsgDeleteIncentivePlan) String() string { return proto.CompactTextString(m) }
func (*MsgDeleteIncentivePlan) ProtoMessage()    {}
func (*MsgDeleteIncentivePlan) Descriptor() ([]byte, []int) {
	return fileDescriptor_805659ab13f8660e, []int{2}
}
func (m *MsgDeleteIncentivePlan) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *MsgDeleteIncentivePlan) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_MsgDeleteIncentivePlan.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *MsgDeleteIncentivePlan) XXX_Merge(src proto.Message) {
	xxx_messageInfo_MsgDeleteIncentivePlan.Merge(m, src)
}
func (m *MsgDeleteIncentivePlan) XXX_Size() int {
	return m.Size()
}
func (m *MsgDeleteIncentivePlan) XXX_DiscardUnknown() {
	xxx_messageInfo_MsgDeleteIncentivePlan.DiscardUnknown(m)
}

var xxx_messageInfo_MsgDeleteIncentivePlan proto.InternalMessageInfo

func (m *MsgDeleteIncentivePlan) GetCreator() string {
	if m != nil {
		return m.Creator
	}
	return ""
}

func (m *MsgDeleteIncentivePlan) GetIndex() string {
	if m != nil {
		return m.Index
	}
	return ""
}

type MsgDeleteIncentivePlanResponse struct {
}

func (m *MsgDeleteIncentivePlanResponse) Reset()         { *m = MsgDeleteIncentivePlanResponse{} }
func (m *MsgDeleteIncentivePlanResponse) String() string { return proto.CompactTextString(m) }
func (*MsgDeleteIncentivePlanResponse) ProtoMessage()    {}
func (*MsgDeleteIncentivePlanResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_805659ab13f8660e, []int{3}
}
func (m *MsgDeleteIncentivePlanResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *MsgDeleteIncentivePlanResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_MsgDeleteIncentivePlanResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *MsgDeleteIncentivePlanResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_MsgDeleteIncentivePlanResponse.Merge(m, src)
}
func (m *MsgDeleteIncentivePlanResponse) XXX_Size() int {
	return m.Size()
}
func (m *MsgDeleteIncentivePlanResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_MsgDeleteIncentivePlanResponse.DiscardUnknown(m)
}

var xxx_messageInfo_MsgDeleteIncentivePlanResponse proto.InternalMessageInfo

type MsgCreateUserStake struct {
	Creator   string       `protobuf:"bytes,1,opt,name=creator,proto3" json:"creator,omitempty"`
	Index     string       `protobuf:"bytes,2,opt,name=index,proto3" json:"index,omitempty"`
	Amount    []types.Coin `protobuf:"bytes,3,rep,name=amount,proto3" json:"amount"`
	StartDate uint64       `protobuf:"varint,4,opt,name=startDate,proto3" json:"startDate,omitempty"`
	EndDate   uint64       `protobuf:"varint,5,opt,name=endDate,proto3" json:"endDate,omitempty"`
}

func (m *MsgCreateUserStake) Reset()         { *m = MsgCreateUserStake{} }
func (m *MsgCreateUserStake) String() string { return proto.CompactTextString(m) }
func (*MsgCreateUserStake) ProtoMessage()    {}
func (*MsgCreateUserStake) Descriptor() ([]byte, []int) {
	return fileDescriptor_805659ab13f8660e, []int{4}
}
func (m *MsgCreateUserStake) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *MsgCreateUserStake) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_MsgCreateUserStake.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *MsgCreateUserStake) XXX_Merge(src proto.Message) {
	xxx_messageInfo_MsgCreateUserStake.Merge(m, src)
}
func (m *MsgCreateUserStake) XXX_Size() int {
	return m.Size()
}
func (m *MsgCreateUserStake) XXX_DiscardUnknown() {
	xxx_messageInfo_MsgCreateUserStake.DiscardUnknown(m)
}

var xxx_messageInfo_MsgCreateUserStake proto.InternalMessageInfo

func (m *MsgCreateUserStake) GetCreator() string {
	if m != nil {
		return m.Creator
	}
	return ""
}

func (m *MsgCreateUserStake) GetIndex() string {
	if m != nil {
		return m.Index
	}
	return ""
}

func (m *MsgCreateUserStake) GetAmount() []types.Coin {
	if m != nil {
		return m.Amount
	}
	return nil
}

func (m *MsgCreateUserStake) GetStartDate() uint64 {
	if m != nil {
		return m.StartDate
	}
	return 0
}

func (m *MsgCreateUserStake) GetEndDate() uint64 {
	if m != nil {
		return m.EndDate
	}
	return 0
}

type MsgCreateUserStakeResponse struct {
}

func (m *MsgCreateUserStakeResponse) Reset()         { *m = MsgCreateUserStakeResponse{} }
func (m *MsgCreateUserStakeResponse) String() string { return proto.CompactTextString(m) }
func (*MsgCreateUserStakeResponse) ProtoMessage()    {}
func (*MsgCreateUserStakeResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_805659ab13f8660e, []int{5}
}
func (m *MsgCreateUserStakeResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *MsgCreateUserStakeResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_MsgCreateUserStakeResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *MsgCreateUserStakeResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_MsgCreateUserStakeResponse.Merge(m, src)
}
func (m *MsgCreateUserStakeResponse) XXX_Size() int {
	return m.Size()
}
func (m *MsgCreateUserStakeResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_MsgCreateUserStakeResponse.DiscardUnknown(m)
}

var xxx_messageInfo_MsgCreateUserStakeResponse proto.InternalMessageInfo

type MsgDeleteUserStake struct {
	Creator string `protobuf:"bytes,1,opt,name=creator,proto3" json:"creator,omitempty"`
	Index   string `protobuf:"bytes,2,opt,name=index,proto3" json:"index,omitempty"`
}

func (m *MsgDeleteUserStake) Reset()         { *m = MsgDeleteUserStake{} }
func (m *MsgDeleteUserStake) String() string { return proto.CompactTextString(m) }
func (*MsgDeleteUserStake) ProtoMessage()    {}
func (*MsgDeleteUserStake) Descriptor() ([]byte, []int) {
	return fileDescriptor_805659ab13f8660e, []int{6}
}
func (m *MsgDeleteUserStake) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *MsgDeleteUserStake) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_MsgDeleteUserStake.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *MsgDeleteUserStake) XXX_Merge(src proto.Message) {
	xxx_messageInfo_MsgDeleteUserStake.Merge(m, src)
}
func (m *MsgDeleteUserStake) XXX_Size() int {
	return m.Size()
}
func (m *MsgDeleteUserStake) XXX_DiscardUnknown() {
	xxx_messageInfo_MsgDeleteUserStake.DiscardUnknown(m)
}

var xxx_messageInfo_MsgDeleteUserStake proto.InternalMessageInfo

func (m *MsgDeleteUserStake) GetCreator() string {
	if m != nil {
		return m.Creator
	}
	return ""
}

func (m *MsgDeleteUserStake) GetIndex() string {
	if m != nil {
		return m.Index
	}
	return ""
}

type MsgDeleteUserStakeResponse struct {
}

func (m *MsgDeleteUserStakeResponse) Reset()         { *m = MsgDeleteUserStakeResponse{} }
func (m *MsgDeleteUserStakeResponse) String() string { return proto.CompactTextString(m) }
func (*MsgDeleteUserStakeResponse) ProtoMessage()    {}
func (*MsgDeleteUserStakeResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_805659ab13f8660e, []int{7}
}
func (m *MsgDeleteUserStakeResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *MsgDeleteUserStakeResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_MsgDeleteUserStakeResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *MsgDeleteUserStakeResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_MsgDeleteUserStakeResponse.Merge(m, src)
}
func (m *MsgDeleteUserStakeResponse) XXX_Size() int {
	return m.Size()
}
func (m *MsgDeleteUserStakeResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_MsgDeleteUserStakeResponse.DiscardUnknown(m)
}

var xxx_messageInfo_MsgDeleteUserStakeResponse proto.InternalMessageInfo

func init() {
	proto.RegisterType((*MsgCreateIncentivePlan)(nil), "dualitylabs.duality.incentives.MsgCreateIncentivePlan")
	proto.RegisterType((*MsgCreateIncentivePlanResponse)(nil), "dualitylabs.duality.incentives.MsgCreateIncentivePlanResponse")
	proto.RegisterType((*MsgDeleteIncentivePlan)(nil), "dualitylabs.duality.incentives.MsgDeleteIncentivePlan")
	proto.RegisterType((*MsgDeleteIncentivePlanResponse)(nil), "dualitylabs.duality.incentives.MsgDeleteIncentivePlanResponse")
	proto.RegisterType((*MsgCreateUserStake)(nil), "dualitylabs.duality.incentives.MsgCreateUserStake")
	proto.RegisterType((*MsgCreateUserStakeResponse)(nil), "dualitylabs.duality.incentives.MsgCreateUserStakeResponse")
	proto.RegisterType((*MsgDeleteUserStake)(nil), "dualitylabs.duality.incentives.MsgDeleteUserStake")
	proto.RegisterType((*MsgDeleteUserStakeResponse)(nil), "dualitylabs.duality.incentives.MsgDeleteUserStakeResponse")
}

func init() { proto.RegisterFile("incentives/tx.proto", fileDescriptor_805659ab13f8660e) }

var fileDescriptor_805659ab13f8660e = []byte{
	// 530 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0xa4, 0x54, 0xcd, 0x6e, 0xd3, 0x40,
	0x10, 0xce, 0x36, 0x4e, 0x4a, 0x37, 0x07, 0x24, 0xb7, 0x42, 0xc6, 0x54, 0x5b, 0x2b, 0xa7, 0x5c,
	0x58, 0xab, 0x46, 0x02, 0x89, 0x03, 0x52, 0xdb, 0x1c, 0x40, 0xa2, 0x52, 0x65, 0xe0, 0xc2, 0xa5,
	0x5a, 0x3b, 0x2b, 0xb3, 0xaa, 0xb3, 0x1b, 0x79, 0x37, 0x55, 0x7a, 0xe4, 0x01, 0x90, 0x78, 0x01,
	0x1e, 0x81, 0x23, 0xef, 0xd0, 0x63, 0x8f, 0x9c, 0x10, 0x4a, 0x5e, 0x04, 0x79, 0xfd, 0x13, 0x27,
	0x98, 0xc8, 0x29, 0xb7, 0xf9, 0xd9, 0x99, 0xf9, 0xbe, 0x99, 0xcf, 0x86, 0xfb, 0x8c, 0x87, 0x94,
	0x2b, 0x76, 0x4d, 0xa5, 0xab, 0x66, 0x78, 0x92, 0x08, 0x25, 0x4c, 0x34, 0x9a, 0x92, 0x98, 0xa9,
	0x9b, 0x98, 0x04, 0x12, 0xe7, 0x36, 0x5e, 0x3e, 0xb4, 0x8f, 0x2a, 0x45, 0xa5, 0x79, 0x39, 0x89,
	0x09, 0xcf, 0x1a, 0xd8, 0x4f, 0x2a, 0x0f, 0xa6, 0x92, 0x26, 0x97, 0x52, 0x91, 0x2b, 0x9a, 0x27,
	0x51, 0x28, 0xe4, 0x58, 0x48, 0x37, 0x20, 0x92, 0xba, 0xd7, 0xc7, 0x01, 0x55, 0xe4, 0xd8, 0x0d,
	0x05, 0x2b, 0x8a, 0x0f, 0x22, 0x11, 0x09, 0x6d, 0xba, 0xa9, 0x95, 0x45, 0xfb, 0xdf, 0x76, 0xe0,
	0xa3, 0x73, 0x19, 0x9d, 0x25, 0x94, 0x28, 0xfa, 0xa6, 0x68, 0x7f, 0x11, 0x13, 0x6e, 0x5a, 0x70,
	0x37, 0x4c, 0xc3, 0x22, 0xb1, 0x80, 0x03, 0x06, 0x7b, 0x7e, 0xe1, 0x9a, 0x07, 0xb0, 0xc3, 0xf8,
	0x88, 0xce, 0xac, 0x1d, 0x1d, 0xcf, 0x1c, 0xf3, 0x10, 0xee, 0x49, 0x45, 0x12, 0x35, 0x24, 0x8a,
	0x5a, 0x6d, 0x07, 0x0c, 0x0c, 0x7f, 0x19, 0x48, 0xbb, 0x51, 0x3e, 0xd2, 0x39, 0x43, 0xe7, 0x0a,
	0xd7, 0x74, 0x60, 0x4f, 0x25, 0x64, 0xc4, 0x78, 0x74, 0x41, 0x58, 0x62, 0x75, 0x74, 0xcf, 0x6a,
	0xc8, 0x3c, 0x81, 0x3d, 0x25, 0x14, 0x89, 0x4f, 0xc6, 0x62, 0xca, 0x95, 0xd5, 0x75, 0xc0, 0xa0,
	0xe7, 0x3d, 0xc6, 0x19, 0x61, 0x9c, 0x12, 0xc6, 0x39, 0x61, 0x7c, 0x26, 0x18, 0x3f, 0x35, 0x6e,
	0x7f, 0x1d, 0xb5, 0xfc, 0x6a, 0x4d, 0x09, 0xee, 0x3d, 0x0b, 0xaf, 0xac, 0x5d, 0x07, 0x0c, 0xda,
	0xfe, 0x32, 0x90, 0x83, 0xd3, 0xb9, 0x07, 0x3a, 0x57, 0xb8, 0x7d, 0x07, 0xa2, 0xfa, 0xf5, 0xf8,
	0x54, 0x4e, 0x04, 0x97, 0xb4, 0xff, 0x5a, 0x2f, 0x70, 0x48, 0x63, 0xfa, 0x9f, 0x0b, 0xcc, 0x67,
	0xd5, 0x74, 0x2a, 0x67, 0xfd, 0x00, 0xd0, 0x2c, 0xe1, 0x7c, 0x90, 0x34, 0x79, 0x97, 0x0a, 0x60,
	0xeb, 0x4b, 0xbd, 0x80, 0x5d, 0x92, 0xad, 0xb2, 0xed, 0xb4, 0x9b, 0xac, 0x32, 0x7f, 0xbe, 0x7a,
	0x62, 0x63, 0xc3, 0x89, 0x3b, 0x2b, 0x27, 0xee, 0x1f, 0x42, 0xfb, 0x6f, 0xd8, 0x25, 0xab, 0xa1,
	0x26, 0x95, 0xf1, 0xbe, 0x37, 0xa9, 0x7c, 0xc6, 0x5a, 0x97, 0x62, 0x86, 0xf7, 0xdd, 0x80, 0xed,
	0x73, 0x19, 0x99, 0x5f, 0x00, 0xdc, 0xaf, 0x13, 0xfb, 0x73, 0xbc, 0xf9, 0xe3, 0xc4, 0xf5, 0x2a,
	0xb0, 0x5f, 0xdd, 0xaf, 0xae, 0xc0, 0xa5, 0xf1, 0xd4, 0x69, 0xa7, 0x09, 0x9e, 0x9a, 0xba, 0x46,
	0x78, 0x36, 0x28, 0xcc, 0xfc, 0x0c, 0xe0, 0xc3, 0x75, 0x79, 0x79, 0x8d, 0x39, 0x96, 0x35, 0xf6,
	0xcb, 0xed, 0x6b, 0x56, 0x30, 0xac, 0xab, 0xc1, 0x6b, 0xcc, 0x6b, 0x3b, 0x0c, 0xff, 0xd0, 0xcb,
	0xe9, 0xdb, 0xdb, 0x39, 0x02, 0x77, 0x73, 0x04, 0x7e, 0xcf, 0x11, 0xf8, 0xba, 0x40, 0xad, 0xbb,
	0x05, 0x6a, 0xfd, 0x5c, 0xa0, 0xd6, 0x47, 0x2f, 0x62, 0xea, 0xd3, 0x34, 0xc0, 0xa1, 0x18, 0xbb,
	0x79, 0xcf, 0xa7, 0xe9, 0x80, 0xc2, 0x71, 0x67, 0x6e, 0xf5, 0xe7, 0x7f, 0x33, 0xa1, 0x32, 0xe8,
	0xea, 0x9f, 0xed, 0xb3, 0x3f, 0x01, 0x00, 0x00, 0xff, 0xff, 0x38, 0x20, 0xcd, 0xe1, 0x17, 0x06,
	0x00, 0x00,
}

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ grpc.ClientConn

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion4

// MsgClient is the client API for Msg service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://godoc.org/google.golang.org/grpc#ClientConn.NewStream.
type MsgClient interface {
	CreateIncentivePlan(ctx context.Context, in *MsgCreateIncentivePlan, opts ...grpc.CallOption) (*MsgCreateIncentivePlanResponse, error)
	DeleteIncentivePlan(ctx context.Context, in *MsgDeleteIncentivePlan, opts ...grpc.CallOption) (*MsgDeleteIncentivePlanResponse, error)
	CreateUserStake(ctx context.Context, in *MsgCreateUserStake, opts ...grpc.CallOption) (*MsgCreateUserStakeResponse, error)
	DeleteUserStake(ctx context.Context, in *MsgDeleteUserStake, opts ...grpc.CallOption) (*MsgDeleteUserStakeResponse, error)
}

type msgClient struct {
	cc grpc1.ClientConn
}

func NewMsgClient(cc grpc1.ClientConn) MsgClient {
	return &msgClient{cc}
}

func (c *msgClient) CreateIncentivePlan(ctx context.Context, in *MsgCreateIncentivePlan, opts ...grpc.CallOption) (*MsgCreateIncentivePlanResponse, error) {
	out := new(MsgCreateIncentivePlanResponse)
	err := c.cc.Invoke(ctx, "/dualitylabs.duality.incentives.Msg/CreateIncentivePlan", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *msgClient) DeleteIncentivePlan(ctx context.Context, in *MsgDeleteIncentivePlan, opts ...grpc.CallOption) (*MsgDeleteIncentivePlanResponse, error) {
	out := new(MsgDeleteIncentivePlanResponse)
	err := c.cc.Invoke(ctx, "/dualitylabs.duality.incentives.Msg/DeleteIncentivePlan", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *msgClient) CreateUserStake(ctx context.Context, in *MsgCreateUserStake, opts ...grpc.CallOption) (*MsgCreateUserStakeResponse, error) {
	out := new(MsgCreateUserStakeResponse)
	err := c.cc.Invoke(ctx, "/dualitylabs.duality.incentives.Msg/CreateUserStake", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *msgClient) DeleteUserStake(ctx context.Context, in *MsgDeleteUserStake, opts ...grpc.CallOption) (*MsgDeleteUserStakeResponse, error) {
	out := new(MsgDeleteUserStakeResponse)
	err := c.cc.Invoke(ctx, "/dualitylabs.duality.incentives.Msg/DeleteUserStake", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// MsgServer is the server API for Msg service.
type MsgServer interface {
	CreateIncentivePlan(context.Context, *MsgCreateIncentivePlan) (*MsgCreateIncentivePlanResponse, error)
	DeleteIncentivePlan(context.Context, *MsgDeleteIncentivePlan) (*MsgDeleteIncentivePlanResponse, error)
	CreateUserStake(context.Context, *MsgCreateUserStake) (*MsgCreateUserStakeResponse, error)
	DeleteUserStake(context.Context, *MsgDeleteUserStake) (*MsgDeleteUserStakeResponse, error)
}

// UnimplementedMsgServer can be embedded to have forward compatible implementations.
type UnimplementedMsgServer struct {
}

func (*UnimplementedMsgServer) CreateIncentivePlan(ctx context.Context, req *MsgCreateIncentivePlan) (*MsgCreateIncentivePlanResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateIncentivePlan not implemented")
}
func (*UnimplementedMsgServer) DeleteIncentivePlan(ctx context.Context, req *MsgDeleteIncentivePlan) (*MsgDeleteIncentivePlanResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DeleteIncentivePlan not implemented")
}
func (*UnimplementedMsgServer) CreateUserStake(ctx context.Context, req *MsgCreateUserStake) (*MsgCreateUserStakeResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateUserStake not implemented")
}
func (*UnimplementedMsgServer) DeleteUserStake(ctx context.Context, req *MsgDeleteUserStake) (*MsgDeleteUserStakeResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DeleteUserStake not implemented")
}

func RegisterMsgServer(s grpc1.Server, srv MsgServer) {
	s.RegisterService(&_Msg_serviceDesc, srv)
}

func _Msg_CreateIncentivePlan_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(MsgCreateIncentivePlan)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MsgServer).CreateIncentivePlan(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/dualitylabs.duality.incentives.Msg/CreateIncentivePlan",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MsgServer).CreateIncentivePlan(ctx, req.(*MsgCreateIncentivePlan))
	}
	return interceptor(ctx, in, info, handler)
}

func _Msg_DeleteIncentivePlan_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(MsgDeleteIncentivePlan)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MsgServer).DeleteIncentivePlan(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/dualitylabs.duality.incentives.Msg/DeleteIncentivePlan",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MsgServer).DeleteIncentivePlan(ctx, req.(*MsgDeleteIncentivePlan))
	}
	return interceptor(ctx, in, info, handler)
}

func _Msg_CreateUserStake_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(MsgCreateUserStake)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MsgServer).CreateUserStake(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/dualitylabs.duality.incentives.Msg/CreateUserStake",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MsgServer).CreateUserStake(ctx, req.(*MsgCreateUserStake))
	}
	return interceptor(ctx, in, info, handler)
}

func _Msg_DeleteUserStake_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(MsgDeleteUserStake)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MsgServer).DeleteUserStake(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/dualitylabs.duality.incentives.Msg/DeleteUserStake",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MsgServer).DeleteUserStake(ctx, req.(*MsgDeleteUserStake))
	}
	return interceptor(ctx, in, info, handler)
}

var _Msg_serviceDesc = grpc.ServiceDesc{
	ServiceName: "dualitylabs.duality.incentives.Msg",
	HandlerType: (*MsgServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "CreateIncentivePlan",
			Handler:    _Msg_CreateIncentivePlan_Handler,
		},
		{
			MethodName: "DeleteIncentivePlan",
			Handler:    _Msg_DeleteIncentivePlan_Handler,
		},
		{
			MethodName: "CreateUserStake",
			Handler:    _Msg_CreateUserStake_Handler,
		},
		{
			MethodName: "DeleteUserStake",
			Handler:    _Msg_DeleteUserStake_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "incentives/tx.proto",
}

func (m *MsgCreateIncentivePlan) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *MsgCreateIncentivePlan) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *MsgCreateIncentivePlan) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.EndTick != 0 {
		i = encodeVarintTx(dAtA, i, uint64(m.EndTick))
		i--
		dAtA[i] = 0x40
	}
	if m.StartTick != 0 {
		i = encodeVarintTx(dAtA, i, uint64(m.StartTick))
		i--
		dAtA[i] = 0x38
	}
	{
		size, err := m.TotalAmount.MarshalToSizedBuffer(dAtA[:i])
		if err != nil {
			return 0, err
		}
		i -= size
		i = encodeVarintTx(dAtA, i, uint64(size))
	}
	i--
	dAtA[i] = 0x32
	if len(m.TradingPair) > 0 {
		i -= len(m.TradingPair)
		copy(dAtA[i:], m.TradingPair)
		i = encodeVarintTx(dAtA, i, uint64(len(m.TradingPair)))
		i--
		dAtA[i] = 0x2a
	}
	if m.EndDate != 0 {
		i = encodeVarintTx(dAtA, i, uint64(m.EndDate))
		i--
		dAtA[i] = 0x20
	}
	if m.StartDate != 0 {
		i = encodeVarintTx(dAtA, i, uint64(m.StartDate))
		i--
		dAtA[i] = 0x18
	}
	if len(m.Index) > 0 {
		i -= len(m.Index)
		copy(dAtA[i:], m.Index)
		i = encodeVarintTx(dAtA, i, uint64(len(m.Index)))
		i--
		dAtA[i] = 0x12
	}
	if len(m.Creator) > 0 {
		i -= len(m.Creator)
		copy(dAtA[i:], m.Creator)
		i = encodeVarintTx(dAtA, i, uint64(len(m.Creator)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *MsgCreateIncentivePlanResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *MsgCreateIncentivePlanResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *MsgCreateIncentivePlanResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	return len(dAtA) - i, nil
}

func (m *MsgDeleteIncentivePlan) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *MsgDeleteIncentivePlan) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *MsgDeleteIncentivePlan) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.Index) > 0 {
		i -= len(m.Index)
		copy(dAtA[i:], m.Index)
		i = encodeVarintTx(dAtA, i, uint64(len(m.Index)))
		i--
		dAtA[i] = 0x12
	}
	if len(m.Creator) > 0 {
		i -= len(m.Creator)
		copy(dAtA[i:], m.Creator)
		i = encodeVarintTx(dAtA, i, uint64(len(m.Creator)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *MsgDeleteIncentivePlanResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *MsgDeleteIncentivePlanResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *MsgDeleteIncentivePlanResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	return len(dAtA) - i, nil
}

func (m *MsgCreateUserStake) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *MsgCreateUserStake) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *MsgCreateUserStake) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.EndDate != 0 {
		i = encodeVarintTx(dAtA, i, uint64(m.EndDate))
		i--
		dAtA[i] = 0x28
	}
	if m.StartDate != 0 {
		i = encodeVarintTx(dAtA, i, uint64(m.StartDate))
		i--
		dAtA[i] = 0x20
	}
	if len(m.Amount) > 0 {
		for iNdEx := len(m.Amount) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.Amount[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintTx(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0x1a
		}
	}
	if len(m.Index) > 0 {
		i -= len(m.Index)
		copy(dAtA[i:], m.Index)
		i = encodeVarintTx(dAtA, i, uint64(len(m.Index)))
		i--
		dAtA[i] = 0x12
	}
	if len(m.Creator) > 0 {
		i -= len(m.Creator)
		copy(dAtA[i:], m.Creator)
		i = encodeVarintTx(dAtA, i, uint64(len(m.Creator)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *MsgCreateUserStakeResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *MsgCreateUserStakeResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *MsgCreateUserStakeResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	return len(dAtA) - i, nil
}

func (m *MsgDeleteUserStake) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *MsgDeleteUserStake) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *MsgDeleteUserStake) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.Index) > 0 {
		i -= len(m.Index)
		copy(dAtA[i:], m.Index)
		i = encodeVarintTx(dAtA, i, uint64(len(m.Index)))
		i--
		dAtA[i] = 0x12
	}
	if len(m.Creator) > 0 {
		i -= len(m.Creator)
		copy(dAtA[i:], m.Creator)
		i = encodeVarintTx(dAtA, i, uint64(len(m.Creator)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *MsgDeleteUserStakeResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *MsgDeleteUserStakeResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *MsgDeleteUserStakeResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	return len(dAtA) - i, nil
}

func encodeVarintTx(dAtA []byte, offset int, v uint64) int {
	offset -= sovTx(v)
	base := offset
	for v >= 1<<7 {
		dAtA[offset] = uint8(v&0x7f | 0x80)
		v >>= 7
		offset++
	}
	dAtA[offset] = uint8(v)
	return base
}
func (m *MsgCreateIncentivePlan) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.Creator)
	if l > 0 {
		n += 1 + l + sovTx(uint64(l))
	}
	l = len(m.Index)
	if l > 0 {
		n += 1 + l + sovTx(uint64(l))
	}
	if m.StartDate != 0 {
		n += 1 + sovTx(uint64(m.StartDate))
	}
	if m.EndDate != 0 {
		n += 1 + sovTx(uint64(m.EndDate))
	}
	l = len(m.TradingPair)
	if l > 0 {
		n += 1 + l + sovTx(uint64(l))
	}
	l = m.TotalAmount.Size()
	n += 1 + l + sovTx(uint64(l))
	if m.StartTick != 0 {
		n += 1 + sovTx(uint64(m.StartTick))
	}
	if m.EndTick != 0 {
		n += 1 + sovTx(uint64(m.EndTick))
	}
	return n
}

func (m *MsgCreateIncentivePlanResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	return n
}

func (m *MsgDeleteIncentivePlan) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.Creator)
	if l > 0 {
		n += 1 + l + sovTx(uint64(l))
	}
	l = len(m.Index)
	if l > 0 {
		n += 1 + l + sovTx(uint64(l))
	}
	return n
}

func (m *MsgDeleteIncentivePlanResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	return n
}

func (m *MsgCreateUserStake) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.Creator)
	if l > 0 {
		n += 1 + l + sovTx(uint64(l))
	}
	l = len(m.Index)
	if l > 0 {
		n += 1 + l + sovTx(uint64(l))
	}
	if len(m.Amount) > 0 {
		for _, e := range m.Amount {
			l = e.Size()
			n += 1 + l + sovTx(uint64(l))
		}
	}
	if m.StartDate != 0 {
		n += 1 + sovTx(uint64(m.StartDate))
	}
	if m.EndDate != 0 {
		n += 1 + sovTx(uint64(m.EndDate))
	}
	return n
}

func (m *MsgCreateUserStakeResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	return n
}

func (m *MsgDeleteUserStake) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.Creator)
	if l > 0 {
		n += 1 + l + sovTx(uint64(l))
	}
	l = len(m.Index)
	if l > 0 {
		n += 1 + l + sovTx(uint64(l))
	}
	return n
}

func (m *MsgDeleteUserStakeResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	return n
}

func sovTx(x uint64) (n int) {
	return (math_bits.Len64(x|1) + 6) / 7
}
func sozTx(x uint64) (n int) {
	return sovTx(uint64((x << 1) ^ uint64((int64(x) >> 63))))
}
func (m *MsgCreateIncentivePlan) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowTx
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: MsgCreateIncentivePlan: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: MsgCreateIncentivePlan: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Creator", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTx
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTx
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Creator = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Index", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTx
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTx
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Index = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 3:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field StartDate", wireType)
			}
			m.StartDate = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.StartDate |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 4:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field EndDate", wireType)
			}
			m.EndDate = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.EndDate |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 5:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field TradingPair", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTx
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTx
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.TradingPair = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 6:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field TotalAmount", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthTx
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthTx
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := m.TotalAmount.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 7:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field StartTick", wireType)
			}
			m.StartTick = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.StartTick |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 8:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field EndTick", wireType)
			}
			m.EndTick = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.EndTick |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipTx(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthTx
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *MsgCreateIncentivePlanResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowTx
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: MsgCreateIncentivePlanResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: MsgCreateIncentivePlanResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		default:
			iNdEx = preIndex
			skippy, err := skipTx(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthTx
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *MsgDeleteIncentivePlan) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowTx
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: MsgDeleteIncentivePlan: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: MsgDeleteIncentivePlan: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Creator", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTx
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTx
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Creator = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Index", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTx
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTx
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Index = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipTx(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthTx
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *MsgDeleteIncentivePlanResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowTx
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: MsgDeleteIncentivePlanResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: MsgDeleteIncentivePlanResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		default:
			iNdEx = preIndex
			skippy, err := skipTx(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthTx
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *MsgCreateUserStake) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowTx
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: MsgCreateUserStake: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: MsgCreateUserStake: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Creator", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTx
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTx
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Creator = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Index", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTx
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTx
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Index = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Amount", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthTx
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthTx
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Amount = append(m.Amount, types.Coin{})
			if err := m.Amount[len(m.Amount)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 4:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field StartDate", wireType)
			}
			m.StartDate = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.StartDate |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 5:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field EndDate", wireType)
			}
			m.EndDate = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.EndDate |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipTx(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthTx
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *MsgCreateUserStakeResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowTx
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: MsgCreateUserStakeResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: MsgCreateUserStakeResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		default:
			iNdEx = preIndex
			skippy, err := skipTx(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthTx
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *MsgDeleteUserStake) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowTx
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: MsgDeleteUserStake: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: MsgDeleteUserStake: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Creator", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTx
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTx
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Creator = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Index", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTx
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTx
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Index = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipTx(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthTx
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *MsgDeleteUserStakeResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowTx
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: MsgDeleteUserStakeResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: MsgDeleteUserStakeResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		default:
			iNdEx = preIndex
			skippy, err := skipTx(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthTx
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func skipTx(dAtA []byte) (n int, err error) {
	l := len(dAtA)
	iNdEx := 0
	depth := 0
	for iNdEx < l {
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return 0, ErrIntOverflowTx
			}
			if iNdEx >= l {
				return 0, io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		wireType := int(wire & 0x7)
		switch wireType {
		case 0:
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowTx
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				iNdEx++
				if dAtA[iNdEx-1] < 0x80 {
					break
				}
			}
		case 1:
			iNdEx += 8
		case 2:
			var length int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowTx
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				length |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if length < 0 {
				return 0, ErrInvalidLengthTx
			}
			iNdEx += length
		case 3:
			depth++
		case 4:
			if depth == 0 {
				return 0, ErrUnexpectedEndOfGroupTx
			}
			depth--
		case 5:
			iNdEx += 4
		default:
			return 0, fmt.Errorf("proto: illegal wireType %d", wireType)
		}
		if iNdEx < 0 {
			return 0, ErrInvalidLengthTx
		}
		if depth == 0 {
			return iNdEx, nil
		}
	}
	return 0, io.ErrUnexpectedEOF
}

var (
	ErrInvalidLengthTx        = fmt.Errorf("proto: negative length found during unmarshaling")
	ErrIntOverflowTx          = fmt.Errorf("proto: integer overflow")
	ErrUnexpectedEndOfGroupTx = fmt.Errorf("proto: unexpected end of group")
)
