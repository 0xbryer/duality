version: 2.1
orbs:
  go: circleci/go@1.7.3
  aws-ecr: circleci/aws-ecr@8.1
  aws-ecs: circleci/aws-ecs@3.2.0
  aws-cli: circleci/aws-cli@3.1.1

jobs:
  go-tests:
    working_directory: ~/repo
    docker:
      - image: cimg/go:1.19.3
    steps:
      - checkout
      - restore_cache:
          keys:
            - go-mod-v4-{{ checksum "go.sum" }}
      - run:
          name: Install Dependencies
          command: go mod download
      - save_cache:
          key: go-mod-v4-{{ checksum "go.sum" }}
          paths:
            - "/go/pkg/mod"
      - run:
          name: Create a temp directory for artifacts
          command: mkdir -p /tmp/artifacts
      - run:
          name: Run tests
          command: |
            go test ./... -coverprofile=c.out -v
            go tool cover -html=c.out -o /tmp/artifacts/coverage.html
      - store_artifacts:
          path: /tmp/artifacts
  heighliner-build:
    working_directory: ~/repo
    machine: # executor type
      image: ubuntu-2004:2023.04.2 # recommended linux image - includes Ubuntu 20.04, docker 19.03.13, docker-compose 1.27.4
    resource_class: large
    steps:
      - go/install:
          version: "1.18"
      - run:
          name: Install heighliner
          command: |
            git clone -b v1.2.0 https://github.com/strangelove-ventures/heighliner
            cd heighliner
            go build
            go install
      - checkout:
          path: ./duality
      - run:
          name: Build duality docker image
          working_directory: ./duality
          command: |
            heighliner build -c duality --local
      - run:
          name: Authenticate with github
          command: |
            echo $GH_CR_TOKEN | docker login ghcr.io -u USERNAME --password-stdin
        # NOTE: eventually we might only want to publish an image to GHCR for tags or certain branches
      - run:
          name: Push to GHCR
          command: |
            TAG="${CIRCLE_TAG:-${CIRCLE_SHA1}}"
            docker tag duality:local ghcr.io/duality-labs/duality:${TAG}
            docker push ghcr.io/duality-labs/duality:${TAG}
      - run:
          name: Create a temp directory for docker image
          command: mkdir -p ./tmp/docker
      - run:
          name: Save Docker Image
          command: docker save --output ./tmp/docker/duality.tar duality
      - persist_to_workspace:
          root: ./tmp
          paths:
            - docker

  ictest:
    working_directory: ~/repo
    machine: # executor type
      image: ubuntu-2004:2023.04.2 # recommended linux image - includes Ubuntu 20.04, docker 19.03.13, docker-compose 1.27.4
    resource_class: large
    steps:
      - go/install:
          version: "1.18"
      - checkout:
          path: ./duality
      - attach_workspace:
          at: ./tmp
      - run:
          name: load docker image
          command: docker load -i ./tmp/docker/duality.tar
      - run:
          name: Run tests
          working_directory: ./duality/interchaintest
          command: go test -race -timeout 1h -v -run . 
  binary-build:
    working_directory: ~/repo
    docker:
      - image: ignitehq/cli:0.23.0
    steps:
      - checkout
      - run:
          name: Create a temp directory for artifacts
          command: mkdir -p /tmp/artifacts
      - run:
          name: Build chain binary
          command: ignite chain build -o /tmp/artifacts --clear-cache
      - run:
          name: Ensure ignite has not generated changes which have not been commited to VC
          command: |
            # NOTE: we are excluding openapi.yml from the new file check since it does not get generated predictably
            CHANGES=$(git ls-files -m -- ':!:docs/static/openapi.yml')
            [[ -n "$CHANGES" ]] && { echo -e "Untracked files created by ignite:\n$CHANGES" ; exit 1; }\
            || { echo "No new files detected" ; exit 0; }
      - store_artifacts:
          path: /tmp/artifacts
  binary-release-build:
    working_directory: ~/repo
    docker:
      - image: ignitehq/cli:0.23.0
    steps:
      - checkout
      - run:
          name: Create a temp directory for artifacts
          command: mkdir -p ./tmp/artifacts/release
      - run:
          name: Build chain binary
          command: ignite chain build  --release -t linux:amd64 -t darwin:amd64 -o ./tmp/artifacts/release --clear-cache
      - persist_to_workspace:
          root: ./tmp/artifacts
          paths:
            - release
  publish-github-release:
    docker:
      - image: cimg/go:1.19.3
    working_directory: ~/repo
    steps:
      - checkout
      - restore_cache:
          keys:
            - go-mod-v4-{{ checksum "go.sum" }}
      - attach_workspace:
          at: ./tmp/artifacts
      - run:
          name: "Publish Release on GitHub"
          command: |
            go install github.com/tcnksm/ghr@v0.16.0
            ghr -t "${GITHUB_TOKEN}" -u "${CIRCLE_PROJECT_USERNAME}" -r "${CIRCLE_PROJECT_REPONAME}" -c "${CIRCLE_SHA1}" -delete ${CIRCLE_TAG} ./tmp/artifacts/release


  deploy-devnet:
    machine:
      image: ubuntu-2004:2023.04.2
    working_directory: ~/repo
    steps:
      - aws-cli/install
      - aws-ecr/build-and-push-image:
          dockerfile: "dev.Dockerfile"
          registry-id: AWS_ACCOUNT_ID
          repo: devnet
          tag: ${CIRCLE_SHA1},latest
          extra-build-args: "--build-arg BASE_IMAGE_TAG=5ad3c74e50b1accb4ef2e70d28458b83b95da866"
      - run:
          name: Get service names
          command: |
             GENESIS_SERVICE=$(aws ecs list-services \
             --cluster devnet-cluster \
             --query 'serviceArns' | grep -oE "duality-devnet-Genesis[^\"]+")
             echo "export GENESIS_SERVICE='${GENESIS_SERVICE}'" >> $BASH_ENV
             FOLLOWER_SERVICE=$(aws ecs list-services \
             --cluster devnet-cluster \
             --query 'serviceArns' | grep -oE "duality-devnet-Follower[^\"]+")
             echo "export FOLLOWER_SERVICE='${FOLLOWER_SERVICE}'" >> $BASH_ENV
      - aws-ecs/update-service:
            cluster: devnet-cluster
            family: duality-devnet-genesis-node
            service-name: ${GENESIS_SERVICE}
            container-image-name-updates: container=genesis-node,tag=${CIRCLE_SHA1}
      - run:
        # We have to wait for the old genesis node to drain so that the follower connects to the new node
          name: Get latest genesis task definition
          command: >
            TASK_DEFINITION_ARN=$(aws ecs describe-task-definition \
                --task-definition duality-devnet-genesis-node \
                --output text \
                --query 'taskDefinition.taskDefinitionArn')
            echo "export TASK_DEFINITION_ARN='${TASK_DEFINITION_ARN}'" >>
            $BASH_ENV

      - aws-ecs/verify-revision-is-deployed:
            cluster: devnet-cluster
            family: duality-devnet-genesis-node
            task-definition-arn: ${TASK_DEFINITION_ARN}
      - aws-ecs/update-service:
            cluster: devnet-cluster
            family: duality-devnet-follower-node
            service-name: ${FOLLOWER_SERVICE}
            container-image-name-updates: container=follower-node,tag=${CIRCLE_SHA1}

  lint:
    working_directory: ~/repo
    docker:
      - image: cimg/go:1.19.3
    steps:
      - checkout
      - restore_cache:
          keys:
            - go-mod-v4-{{ checksum "go.sum" }}
      - run:
          name: Install GolangCI-Lint
          command: curl -sSfL https://raw.githubusercontent.com/golangci/golangci-lint/master/install.sh | sh -s v1.52.2
      - run:
          name: Run GolangCI-Lint
          command: "./bin/golangci-lint run --out-format colored-line-number:linter.txt --timeout 6m"
      - store_artifacts:
          path: ./linter.txt
workflows:
  version: 2
  test_and_deploy:
    jobs:
      - deploy-devnet:
          # filters:
          #   branches:
          #     only: main
          context:
            - AWS_CREDS
          # requires:
            # - heighliner-build
      - go-tests
      - heighliner-build:
          context:
            - GITHUB_CREDS
      - ictest:
          requires:
            - heighliner-build
      - binary-build


  lint:
    jobs:
      - lint
  publish-release-maybe:
    jobs:
      - go-tests:
          filters:
            tags:
              only: /^v\d+\.\d+\.\d+$/
            branches:
              ignore: /.*/
      - binary-release-build:
          filters:
            tags:
              only: /^v\d+\.\d+\.\d+$/
            branches:
              ignore: /.*/
      - publish-github-release:
          filters:
            tags:
              only: /^v\d+\.\d+\.\d+$/
            branches:
              ignore: /.*/
          context:
            - GITHUB_CREDS
          requires:
            - go-tests
            - binary-release-build
