{
  "fileName": "msg_server.go",
  "filePath": "x/incentives/keeper/msg_server.go",
  "url": "https://github.com/duality-labs/duality/incentives/keeper/msg_server.go",
  "summary": "The `keeper` package contains the implementation of the message server interface for the incentives module of the Duality project. The `msgServer` struct provides a way to reference the `Keeper` pointer in the message server interface. The `NewMsgServerImpl` function returns an instance of `MsgServer` for the provided `Keeper`.\n\nThe `CreateGauge` function creates a new gauge and sends coins to the gauge. It emits a create gauge event and returns the create gauge response. The function takes in a context, a message of type `MsgCreateGauge`, and returns a message of type `MsgCreateGaugeResponse`. The `AddToGauge` function adds coins to an existing gauge. It emits an add to gauge event and returns the add to gauge response. The function takes in a context, a message of type `MsgAddToGauge`, and returns a message of type `MsgAddToGaugeResponse`.\n\nThe `Stake` function stakes tokens in either of two ways. It either adds to an existing stake if a stake with the same owner and same duration exists or creates a new stake if not. A sanity check to ensure that the given tokens are a single token is done in `ValidateBasic`. That is, a stake with multiple tokens cannot be created. The function takes in a context, a message of type `MsgStake`, and returns a message of type `MsgStakeResponse`.\n\nThe `Unstake` function begins the unstaking of the specified stake. The stake would enter the unstaking queue, with the end time of the stake set as block time + duration. The function takes in a context, a message of type `MsgUnstake`, and returns a message of type `MsgUnstakeResponse`.\n\nOverall, this package provides the implementation of the message server interface for the incentives module of the Duality project. It allows for the creation and management of gauges and stakes, which are used to incentivize users to participate in the network.",
  "questions": "1. What is the purpose of the `keeper` package and what other packages does it import?\n- The `keeper` package appears to be part of the `duality` project and it imports packages from `github.com/duality-labs/duality/x/incentives/types` and `github.com/cosmos/cosmos-sdk/types`.\n2. What is the purpose of the `msgServer` struct and its associated methods?\n- The `msgServer` struct provides a way to reference the `keeper` pointer in the message server interface. Its associated methods (`CreateGauge`, `AddToGauge`, `Stake`, and `Unstake`) perform various actions related to creating and managing gauges, adding rewards to gauges, staking tokens, and beginning the unstaking process.\n3. What types of events are emitted by the `msgServer` methods?\n- The `CreateGauge` method emits a `TypeEvtCreateGauge` event with an attribute for the gauge ID. The `AddToGauge` method emits a `TypeEvtAddToGauge` event with an attribute for the gauge ID. The `Stake` method emits a `TypeEvtStake` event with attributes for the stake ID, owner, and amount. The `Unstake` method does not emit an event directly, but instead emits a `TypeEvtBeginUnstake` event downstream in the keeper method."
}