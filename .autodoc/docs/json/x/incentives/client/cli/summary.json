{
  "folderName": "cli",
  "folderPath": ".autodoc/docs/json/x/incentives/client/cli",
  "url": "https://github.com/duality-labs/duality/utodoc/docs/json/x/incentives/client/cli",
  "files": [
    {
      "fileName": "flags.go",
      "filePath": "x/incentives/client/cli/flags.go",
      "url": "https://github.com/duality-labs/duality/incentives/client/cli/flags.go",
      "summary": "The code above is a part of the duality project and is located in the `cli` package. The purpose of this code is to define and create flag sets for the incentives module tx commands. The `flag` package from `github.com/spf13/pflag` is imported to create these flag sets.\n\nThe code defines three constants, `FlagStartTime`, `FlagPerpetual`, and `FlagAmount`, which are used as keys to access the corresponding flag values. These constants are used to set the names of the flags and their default values.\n\nThe `FlagSetCreateGauge()` function returns a flag set that can be used to create gauges. It creates a new flag set using the `flag.NewFlagSet()` function and sets the name of the flag set to an empty string. The `FlagStartTime` and `FlagPerpetual` flags are added to the flag set using the `fs.String()` and `fs.Bool()` functions respectively. The `fs.String()` function sets the type of the flag to a string and the `fs.Bool()` function sets the type of the flag to a boolean. The `fs.String()` function also sets the description of the flag to \"Timestamp to begin distribution\" and the `fs.Bool()` function sets the description of the flag to \"Perpetual distribution\". The flag set is then returned.\n\nThe `FlagSetUnSetupStake()` function returns a flag set that can be used to unstake an amount. It creates a new flag set using the `flag.NewFlagSet()` function and sets the name of the flag set to an empty string. The `FlagAmount` flag is added to the flag set using the `fs.String()` function. The `fs.String()` function sets the type of the flag to a string and sets the description of the flag to \"The amount to be unstaked. e.g. 1osmo\". The flag set is then returned.\n\nThese flag sets can be used in the larger project to parse command line arguments and set the corresponding values. For example, the `FlagSetCreateGauge()` function can be used to create a gauge with a start time and perpetual distribution by running the following command:\n\n```\nduality create-gauge --start-time 2022-01-01T00:00:00Z --perpetual\n```\n\nThe `FlagSetUnSetupStake()` function can be used to unstake a certain amount by running the following command:\n\n```\nduality unstake --amount 1osmo\n```\n\nOverall, this code provides a convenient way to define and create flag sets for the incentives module tx commands in the duality project.",
      "questions": "1. What is the purpose of the `cli` package in the `duality` project?\n- The `cli` package likely contains code related to command-line interface functionality for the `duality` project.\n\n2. What are the `FlagSetCreateGauge` and `FlagSetUnSetupStake` functions used for?\n- These functions return flag sets that can be used to set command-line flags for creating gauges and unstaking stakes, respectively.\n\n3. What is the purpose of the `github.com/spf13/pflag` package import?\n- The `github.com/spf13/pflag` package is likely used to provide additional functionality for handling command-line flags in the `cli` package."
    },
    {
      "fileName": "query.go",
      "filePath": "x/incentives/client/cli/query.go",
      "url": "https://github.com/duality-labs/duality/incentives/client/cli/query.go",
      "summary": "The `cli` package contains functions that define the command-line interface (CLI) for the Duality project's incentives module. The `GetQueryCmd` function returns a `cobra.Command` object that groups all the query commands for the incentives module under a subcommand. The `osmocli` package is used to create the CLI commands. \n\nThe `GetCmdGetModuleStatus` function returns a `QueryDescriptor` object and a `GetModuleStatusRequest` object. The former defines the CLI command for querying the status of the incentives module, while the latter is used to specify any parameters required for the query. \n\nSimilarly, the `GetCmdGetGaugeByID`, `GetCmdGauges`, `GetCmdGetStakeByID`, and `GetCmdStakes` functions define CLI commands for querying gauges and stakes by ID or status. These functions return a `QueryDescriptor` object and a corresponding `GetGaugeByIDRequest`, `GetGaugesRequest`, `GetStakeByIDRequest`, or `GetStakesRequest` object, respectively. \n\nThe `GetCmdGetFutureRewardEstimate` function returns a `QueryDescriptor` object and a `GetFutureRewardEstimateRequest` object. This command is used to estimate future rewards for a given set of stakes. The `CustomFieldParsers` field in the `QueryDescriptor` object is used to specify custom parsing functions for the command's parameters. \n\nOverall, this package defines the CLI commands for querying the incentives module in the Duality project. These commands can be used by users to retrieve information about gauges and stakes, as well as estimate future rewards. \n\nExample usage:\n```\n$ duality query incentives module-status\n$ duality query incentives gauge-by-id 1\n$ duality query incentives list-gauges UPCOMING DualityPoolShares-stake-token-t0-f1\n$ duality query incentives stake-by-id 1\n$ duality query incentives list-stakes cosmos1chl62vc593p99z2tfh2pp8tl4anm0w4l8h8svx\n$ duality query incentives reward-estimate cosmos1chl62vc593p99z2tfh2pp8tl4anm0w4l8h8svx [1,2,3] 1681450672\n```",
      "questions": "1. What is the purpose of the `duality-labs/duality/osmoutils/osmocli` package?\n- The `duality-labs/duality/osmoutils/osmocli` package is used to add query commands to the `cobra.Command` object.\n2. What is the `GetQueryCmd` function used for?\n- The `GetQueryCmd` function returns a `cobra.Command` object that contains several query commands related to incentives.\n3. What is the purpose of the `parseGaugeStatus` function?\n- The `parseGaugeStatus` function is a custom field parser that is used to parse the `Status` field in the `GetCmdGauges` query command. It converts the string value to the corresponding `types.GaugeStatus` enum value."
    },
    {
      "fileName": "tx.go",
      "filePath": "x/incentives/client/cli/tx.go",
      "url": "https://github.com/duality-labs/duality/incentives/client/cli/tx.go",
      "summary": "The `cli` package contains the command-line interface (CLI) for the incentives module of the Duality project. The CLI allows users to interact with the incentives module by creating gauges, adding to gauges, staking tokens, and unstaking tokens. \n\nThe `GetTxCmd` function returns a `cobra.Command` that includes all the transaction commands for the incentives module. The `AddTxCmd` function is used to add each of the four transaction commands to the `cobra.Command`. \n\nThe `NewCreateGaugeCmd` function returns a `osmocli.TxCliDesc` and a `types.MsgCreateGauge`. The `osmocli.TxCliDesc` contains information about the command, such as the use case, short and long descriptions, and examples. The `types.MsgCreateGauge` is a message that is sent to the blockchain to create a new gauge. The `CreateGaugeCmdBuilder` function is used to parse the command-line arguments and flags and build the `types.MsgCreateGauge` message. \n\nThe `NewAddToGaugeCmd` function returns a `osmocli.TxCliDesc` and a `types.MsgAddToGauge`. The `osmocli.TxCliDesc` contains information about the command, such as the use case, short and long descriptions, and examples. The `types.MsgAddToGauge` is a message that is sent to the blockchain to add tokens to an existing gauge. \n\nThe `NewStakeCmd` function returns a `osmocli.TxCliDesc` and a `types.MsgStake`. The `osmocli.TxCliDesc` contains information about the command, such as the use case, short and long descriptions, and examples. The `types.MsgStake` is a message that is sent to the blockchain to stake tokens into the stakeup pool from a user account. \n\nThe `NewUnstakeCmd` function returns a `osmocli.TxCliDesc` and a `types.MsgUnstake`. The `osmocli.TxCliDesc` contains information about the command, such as the use case, short and long descriptions, and examples. The `types.MsgUnstake` is a message that is sent to the blockchain to unstake tokens from the stakeup pool. \n\nOverall, the `cli` package provides a user-friendly way for users to interact with the incentives module of the Duality project. Users can create gauges, add to gauges, stake tokens, and unstake tokens using the CLI.",
      "questions": "1. What is the purpose of the `GetTxCmd` function?\n- The `GetTxCmd` function returns a `cobra.Command` that contains transaction commands for the module.\n2. What is the purpose of the `CreateGaugeCmdBuilder` function?\n- The `CreateGaugeCmdBuilder` function builds a `MsgCreateGauge` message from the command line arguments and flags.\n3. What is the purpose of the `UnstakeCmdBuilder` function?\n- The `UnstakeCmdBuilder` function builds a `MsgUnstake` message from the command line arguments and flags."
    }
  ],
  "folders": [],
  "summary": "The `cli` package in the `.autodoc/docs/json/x/incentives/client/cli` folder provides a command-line interface (CLI) for interacting with the incentives module of the Duality project. It allows users to create gauges, add to gauges, stake tokens, and unstake tokens using the CLI. The package contains three main files: `flags.go`, `query.go`, and `tx.go`.\n\n`flags.go` defines and creates flag sets for the incentives module tx commands. It imports the `flag` package from `github.com/spf13/pflag` to create these flag sets. The file defines three constants, `FlagStartTime`, `FlagPerpetual`, and `FlagAmount`, which are used as keys to access the corresponding flag values. The `FlagSetCreateGauge()` function returns a flag set for creating gauges, and the `FlagSetUnSetupStake()` function returns a flag set for unstaking an amount.\n\n`query.go` defines the CLI commands for querying the incentives module in the Duality project. Users can retrieve information about gauges and stakes, as well as estimate future rewards. The `GetQueryCmd` function returns a `cobra.Command` object that groups all the query commands for the incentives module under a subcommand. Functions like `GetCmdGetModuleStatus`, `GetCmdGetGaugeByID`, `GetCmdGauges`, `GetCmdGetStakeByID`, and `GetCmdStakes` define CLI commands for querying gauges and stakes by ID or status.\n\nExample usage of query commands:\n\n```\n$ duality query incentives module-status\n$ duality query incentives gauge-by-id 1\n$ duality query incentives list-gauges UPCOMING DualityPoolShares-stake-token-t0-f1\n$ duality query incentives stake-by-id 1\n$ duality query incentives list-stakes cosmos1chl62vc593p99z2tfh2pp8tl4anm0w4l8h8svx\n$ duality query incentives reward-estimate cosmos1chl62vc593p99z2tfh2pp8tl4anm0w4l8h8svx [1,2,3] 1681450672\n```\n\n`tx.go` contains the transaction commands for the incentives module. The `GetTxCmd` function returns a `cobra.Command` that includes all the transaction commands for the incentives module. Functions like `NewCreateGaugeCmd`, `NewAddToGaugeCmd`, `NewStakeCmd`, and `NewUnstakeCmd` return a `osmocli.TxCliDesc` and a corresponding message type (`types.MsgCreateGauge`, `types.MsgAddToGauge`, `types.MsgStake`, or `types.MsgUnstake`). These messages are sent to the blockchain to create a new gauge, add tokens to an existing gauge, stake tokens into the stakeup pool, or unstake tokens from the stakeup pool.\n\nOverall, the `cli` package provides a user-friendly way for users to interact with the incentives module of the Duality project. Users can create gauges, add to gauges, stake tokens, and unstake tokens using the CLI.",
  "questions": ""
}