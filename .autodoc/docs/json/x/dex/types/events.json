{
  "fileName": "events.go",
  "filePath": "x/dex/types/events.go",
  "url": "https://github.com/duality-labs/duality/dex/types/events.go",
  "summary": "The `types` package contains various types and functions used throughout the duality project. The code in this file provides functions for creating events related to deposit, withdrawal, swap, limit order placement, and tick updates. These events are used to notify users of the state changes in the duality system.\n\nThe `CreateDepositEvent` function creates an event that is emitted when a user deposits tokens into the duality system. The function takes in various parameters such as the creator's address, receiver's address, token0, token1, tickIndex, fee, depositAmountReserve0, depositAmountReserve1, and sharesMinted. These parameters are used to create an event with attributes such as the module name, action, creator, receiver, token0, token1, price, fee, reserves0 deposited, reserves1 deposited, and shares minted.\n\nThe `CreateWithdrawEvent` function creates an event that is emitted when a user withdraws tokens from the duality system. The function takes in various parameters such as the creator's address, receiver's address, token0, token1, tickIndex, fee, withdrawAmountReserve0, withdrawAmountReserve1, and sharesRemoved. These parameters are used to create an event with attributes such as the module name, action, creator, receiver, token0, token1, price, fee, reserves0 withdrawn, reserves1 withdrawn, and shares removed.\n\nThe `CreateSwapEvent` function creates an event that is emitted when a user swaps tokens in the duality system. The function takes in various parameters such as the creator's address, receiver's address, token0, token1, tokenIn, tokenOut, amountIn, and amountOut. These parameters are used to create an event with attributes such as the module name, action, creator, receiver, token0, token1, token in, token out, amount in, and amount out.\n\nThe `CreateMultihopSwapEvent` function creates an event that is emitted when a user performs a multihop swap in the duality system. The function takes in various parameters such as the creator's address, receiver's address, tokenIn, tokenOut, amountIn, amountOut, and route. These parameters are used to create an event with attributes such as the module name, action, creator, receiver, token in, token out, amount in, amount out, and route.\n\nThe `CreatePlaceLimitOrderEvent` function creates an event that is emitted when a user places a limit order in the duality system. The function takes in various parameters such as the creator's address, receiver's address, token0, token1, tokenIn, tokenOut, amountIn, limitTick, orderType, shares, and trancheKey. These parameters are used to create an event with attributes such as the module name, action, creator, receiver, token0, token1, token in, token out, amount in, limit tick, order type, shares, and tranche key.\n\nThe `WithdrawFilledLimitOrderEvent` function creates an event that is emitted when a user withdraws a filled limit order in the duality system. The function takes in various parameters such as the creator's address, token0, token1, tokenIn, tokenOut, amountOut, and trancheKey. These parameters are used to create an event with attributes such as the module name, action, creator, token0, token1, token in, token out, amount out, and tranche key.\n\nThe `CancelLimitOrderEvent` function creates an event that is emitted when a user cancels a limit order in the duality system. The function takes in various parameters such as the creator's address, token0, token1, tokenIn, tokenOut, amountOut, and trancheKey. These parameters are used to create an event with attributes such as the module name, action, creator, token0, token1, token in, token out, amount out, and tranche key.\n\nThe `TickUpdateEvent` function creates an event that is emitted when a tick update occurs in the duality system. The function takes in various parameters such as token0, token1, tokenIn, tickIndex, reserves, and otherAttrs. These parameters are used to create an event with attributes such as the module name, action, token0, token1, token in, tick index, fee, and reserves. The `CreateTickUpdatePoolReserves` and `CreateTickUpdateLimitOrderTranche` functions use this function to create events for pool reserves and limit order tranches, respectively.\n\nThe `GoodTilPurgeHitLimitEvent` function creates an event that is emitted when a good-til-purge order hits the gas limit in the duality system. The function takes in a gas parameter and creates an event with attributes such as the module name, action, and gas.\n\nOverall, these functions provide a way for the duality system to notify users of state changes and events that occur within the system. These events can be used by external systems to track and monitor the state of the duality system.",
  "questions": "1. What is the purpose of this code?\n- This code defines functions for creating various types of events related to a decentralized exchange (DEX) such as deposit, withdraw, swap, limit order placement, tick updates, and gas limit events.\n\n2. What parameters are required for each type of event?\n- Each type of event requires different parameters, but in general, they require information such as the creator and receiver addresses, token symbols, tick index, fee, deposit/withdraw amounts, shares, tranche key, gas limit, etc.\n\n3. What is the expected output of each function?\n- Each function returns an `sdk.Event` object that contains a set of `sdk.Attribute` objects representing the event data. The `sdk.EventTypeMessage` is used as the event type for all functions except for `TickUpdateEvent`, which uses a custom event type `EventTypeTickUpdate`."
}