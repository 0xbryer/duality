{
  "fileName": "export.go",
  "filePath": "app/export.go",
  "url": "https://github.com/duality-labs/duality/app/export.go",
  "summary": "The `duality` project contains a package called `app` which includes a file with the same name. This file contains a struct called `App` which has a method called `ExportAppStateAndValidators`. This method exports the state of the application for a genesis file. The exported app state includes the application state, validators, height, and consensus parameters. \n\nThe `ExportAppStateAndValidators` method takes two arguments: `forZeroHeight` and `jailAllowedAddrs`. The `forZeroHeight` argument is a boolean that determines whether the export is for a zero height genesis or not. If it is, the height is set to zero and the `prepForZeroHeightGenesis` method is called. The `jailAllowedAddrs` argument is a slice of strings that contains the addresses of jailed validators that are allowed to withdraw from the start of the next block.\n\nThe `prepForZeroHeightGenesis` method prepares the application for a fresh start at zero height. It asserts the invariants on the current state, sets the context height to zero, resets the context height, and handles the slashing state.\n\nThe `GetValidatorSet` method returns a slice of bonded validators. It gets all the consumer chain validators and appends them to a slice of `tmtypes.GenesisValidator` which is then returned.\n\nThe `ExportState` method is used for testing and exports the state of the application for a genesis file. It takes a context as an argument and returns a map of strings to `json.RawMessage`.\n\nOverall, this file is responsible for exporting the state of the application for a genesis file, preparing the application for a fresh start at zero height, and getting the bonded validators. It is an important part of the `duality` project as it allows for the state of the application to be exported and used for initialization.",
  "questions": "1. What is the purpose of the `ExportAppStateAndValidators` function?\n- The `ExportAppStateAndValidators` function exports the state of the application for a genesis file, along with the validators and consensus parameters.\n\n2. What is the purpose of the `prepForZeroHeightGenesis` function?\n- The `prepForZeroHeightGenesis` function prepares the application for a fresh start at zero height by resetting the start height on signing infos and asserting the invariants on the current state.\n\n3. What does the `GetValidatorSet` function return?\n- The `GetValidatorSet` function returns a slice of bonded validators in the form of `tmtypes.GenesisValidator`."
}