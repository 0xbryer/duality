# Generated by the protocol buffer compiler.  DO NOT EDIT!
# source: dex/tick_map.proto

import sys
_b=sys.version_info[0]<3 and (lambda x:x) or (lambda x:x.encode('latin1'))
from google.protobuf import descriptor as _descriptor
from google.protobuf import message as _message
from google.protobuf import reflection as _reflection
from google.protobuf import symbol_database as _symbol_database
from google.protobuf import descriptor_pb2
# @@protoc_insertion_point(imports)

_sym_db = _symbol_database.Default()


from dex import tick_data_type_pb2 as dex_dot_tick__data__type__pb2
from dex import limit_order_pool_pb2 as dex_dot_limit__order__pool__pb2


DESCRIPTOR = _descriptor.FileDescriptor(
  name='dex/tick_map.proto',
  package='nicholasdotsol.duality.dex',
  syntax='proto3',
  serialized_pb=_b('\n\x12\x64\x65x/tick_map.proto\x12\x1anicholasdotsol.duality.dex\x1a\x18\x64\x65x/tick_data_type.proto\x1a\x1a\x64\x65x/limit_order_pool.proto\"\xf8\x01\n\x07TickMap\x12\x0e\n\x06pairId\x18\x01 \x01(\t\x12\x11\n\ttickIndex\x18\x02 \x01(\x03\x12:\n\x08tickData\x18\x03 \x01(\x0b\x32(.nicholasdotsol.duality.dex.TickDataType\x12\x46\n\x12LimitOrderPool0to1\x18\x04 \x01(\x0b\x32*.nicholasdotsol.duality.dex.LimitOrderPool\x12\x46\n\x12LimitOrderPool1to0\x18\x05 \x01(\x0b\x32*.nicholasdotsol.duality.dex.LimitOrderPoolB/Z-github.com/NicholasDotSol/duality/x/dex/typesb\x06proto3')
  ,
  dependencies=[dex_dot_tick__data__type__pb2.DESCRIPTOR,dex_dot_limit__order__pool__pb2.DESCRIPTOR,])
_sym_db.RegisterFileDescriptor(DESCRIPTOR)




_TICKMAP = _descriptor.Descriptor(
  name='TickMap',
  full_name='nicholasdotsol.duality.dex.TickMap',
  filename=None,
  file=DESCRIPTOR,
  containing_type=None,
  fields=[
    _descriptor.FieldDescriptor(
      name='pairId', full_name='nicholasdotsol.duality.dex.TickMap.pairId', index=0,
      number=1, type=9, cpp_type=9, label=1,
      has_default_value=False, default_value=_b("").decode('utf-8'),
      message_type=None, enum_type=None, containing_type=None,
      is_extension=False, extension_scope=None,
      options=None),
    _descriptor.FieldDescriptor(
      name='tickIndex', full_name='nicholasdotsol.duality.dex.TickMap.tickIndex', index=1,
      number=2, type=3, cpp_type=2, label=1,
      has_default_value=False, default_value=0,
      message_type=None, enum_type=None, containing_type=None,
      is_extension=False, extension_scope=None,
      options=None),
    _descriptor.FieldDescriptor(
      name='tickData', full_name='nicholasdotsol.duality.dex.TickMap.tickData', index=2,
      number=3, type=11, cpp_type=10, label=1,
      has_default_value=False, default_value=None,
      message_type=None, enum_type=None, containing_type=None,
      is_extension=False, extension_scope=None,
      options=None),
    _descriptor.FieldDescriptor(
      name='LimitOrderPool0to1', full_name='nicholasdotsol.duality.dex.TickMap.LimitOrderPool0to1', index=3,
      number=4, type=11, cpp_type=10, label=1,
      has_default_value=False, default_value=None,
      message_type=None, enum_type=None, containing_type=None,
      is_extension=False, extension_scope=None,
      options=None),
    _descriptor.FieldDescriptor(
      name='LimitOrderPool1to0', full_name='nicholasdotsol.duality.dex.TickMap.LimitOrderPool1to0', index=4,
      number=5, type=11, cpp_type=10, label=1,
      has_default_value=False, default_value=None,
      message_type=None, enum_type=None, containing_type=None,
      is_extension=False, extension_scope=None,
      options=None),
  ],
  extensions=[
  ],
  nested_types=[],
  enum_types=[
  ],
  options=None,
  is_extendable=False,
  syntax='proto3',
  extension_ranges=[],
  oneofs=[
  ],
  serialized_start=105,
  serialized_end=353,
)

_TICKMAP.fields_by_name['tickData'].message_type = dex_dot_tick__data__type__pb2._TICKDATATYPE
_TICKMAP.fields_by_name['LimitOrderPool0to1'].message_type = dex_dot_limit__order__pool__pb2._LIMITORDERPOOL
_TICKMAP.fields_by_name['LimitOrderPool1to0'].message_type = dex_dot_limit__order__pool__pb2._LIMITORDERPOOL
DESCRIPTOR.message_types_by_name['TickMap'] = _TICKMAP

TickMap = _reflection.GeneratedProtocolMessageType('TickMap', (_message.Message,), dict(
  DESCRIPTOR = _TICKMAP,
  __module__ = 'dex.tick_map_pb2'
  # @@protoc_insertion_point(class_scope:nicholasdotsol.duality.dex.TickMap)
  ))
_sym_db.RegisterMessage(TickMap)


DESCRIPTOR.has_options = True
DESCRIPTOR._options = _descriptor._ParseOptions(descriptor_pb2.FileOptions(), _b('Z-github.com/NicholasDotSol/duality/x/dex/types'))
# @@protoc_insertion_point(module_scope)
